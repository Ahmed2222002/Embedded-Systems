
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000642  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00000642  000006b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012b4  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e8  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d7  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dc3  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000040be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	e2 00       	.word	0x00e2	; ????
  56:	fb 00       	.word	0x00fb	; ????
  58:	14 01       	movw	r2, r8
  5a:	2d 01       	movw	r4, r26
  5c:	45 01       	movw	r8, r10
  5e:	45 01       	movw	r8, r10
  60:	45 01       	movw	r8, r10
  62:	45 01       	movw	r8, r10
  64:	45 01       	movw	r8, r10
  66:	45 01       	movw	r8, r10
  68:	45 01       	movw	r8, r10
  6a:	45 01       	movw	r8, r10
  6c:	45 01       	movw	r8, r10
  6e:	45 01       	movw	r8, r10
  70:	45 01       	movw	r8, r10
  72:	45 01       	movw	r8, r10
  74:	45 01       	movw	r8, r10
  76:	45 01       	movw	r8, r10
  78:	45 01       	movw	r8, r10
  7a:	45 01       	movw	r8, r10
  7c:	45 01       	movw	r8, r10
  7e:	45 01       	movw	r8, r10
  80:	45 01       	movw	r8, r10
  82:	45 01       	movw	r8, r10
  84:	45 01       	movw	r8, r10
  86:	45 01       	movw	r8, r10
  88:	45 01       	movw	r8, r10
  8a:	45 01       	movw	r8, r10
  8c:	45 01       	movw	r8, r10
  8e:	45 01       	movw	r8, r10
  90:	45 01       	movw	r8, r10
  92:	45 01       	movw	r8, r10
  94:	e2 00       	.word	0x00e2	; ????
  96:	fb 00       	.word	0x00fb	; ????
  98:	14 01       	movw	r2, r8
  9a:	2d 01       	movw	r4, r26
  9c:	51 01       	movw	r10, r2
  9e:	5c 01       	movw	r10, r24
  a0:	67 01       	movw	r12, r14
  a2:	72 01       	movw	r14, r4
  a4:	7c 01       	movw	r14, r24
  a6:	7c 01       	movw	r14, r24
  a8:	7c 01       	movw	r14, r24
  aa:	7c 01       	movw	r14, r24
  ac:	7c 01       	movw	r14, r24
  ae:	7c 01       	movw	r14, r24
  b0:	7c 01       	movw	r14, r24
  b2:	7c 01       	movw	r14, r24
  b4:	7c 01       	movw	r14, r24
  b6:	7c 01       	movw	r14, r24
  b8:	7c 01       	movw	r14, r24
  ba:	7c 01       	movw	r14, r24
  bc:	7c 01       	movw	r14, r24
  be:	7c 01       	movw	r14, r24
  c0:	7c 01       	movw	r14, r24
  c2:	7c 01       	movw	r14, r24
  c4:	7c 01       	movw	r14, r24
  c6:	7c 01       	movw	r14, r24
  c8:	7c 01       	movw	r14, r24
  ca:	7c 01       	movw	r14, r24
  cc:	7c 01       	movw	r14, r24
  ce:	7c 01       	movw	r14, r24
  d0:	7c 01       	movw	r14, r24
  d2:	7c 01       	movw	r14, r24
  d4:	7c 01       	movw	r14, r24
  d6:	7c 01       	movw	r14, r24
  d8:	7c 01       	movw	r14, r24
  da:	7c 01       	movw	r14, r24
  dc:	51 01       	movw	r10, r2
  de:	5c 01       	movw	r10, r24
  e0:	67 01       	movw	r12, r14
  e2:	72 01       	movw	r14, r4
  e4:	8a 01       	movw	r16, r20
  e6:	91 01       	movw	r18, r2
  e8:	98 01       	movw	r18, r16
  ea:	9f 01       	movw	r18, r30
  ec:	a5 01       	movw	r20, r10
  ee:	a5 01       	movw	r20, r10
  f0:	a5 01       	movw	r20, r10
  f2:	a5 01       	movw	r20, r10
  f4:	a5 01       	movw	r20, r10
  f6:	a5 01       	movw	r20, r10
  f8:	a5 01       	movw	r20, r10
  fa:	a5 01       	movw	r20, r10
  fc:	a5 01       	movw	r20, r10
  fe:	a5 01       	movw	r20, r10
 100:	a5 01       	movw	r20, r10
 102:	a5 01       	movw	r20, r10
 104:	a5 01       	movw	r20, r10
 106:	a5 01       	movw	r20, r10
 108:	a5 01       	movw	r20, r10
 10a:	a5 01       	movw	r20, r10
 10c:	a5 01       	movw	r20, r10
 10e:	a5 01       	movw	r20, r10
 110:	a5 01       	movw	r20, r10
 112:	a5 01       	movw	r20, r10
 114:	a5 01       	movw	r20, r10
 116:	a5 01       	movw	r20, r10
 118:	a5 01       	movw	r20, r10
 11a:	a5 01       	movw	r20, r10
 11c:	a5 01       	movw	r20, r10
 11e:	a5 01       	movw	r20, r10
 120:	a5 01       	movw	r20, r10
 122:	a5 01       	movw	r20, r10
 124:	8a 01       	movw	r16, r20
 126:	91 01       	movw	r18, r2
 128:	98 01       	movw	r18, r16
 12a:	9f 01       	movw	r18, r30
 12c:	b1 01       	movw	r22, r2
 12e:	bd 01       	movw	r22, r26
 130:	c9 01       	movw	r24, r18
 132:	d5 01       	movw	r26, r10
 134:	e0 01       	movw	r28, r0
 136:	e0 01       	movw	r28, r0
 138:	e0 01       	movw	r28, r0
 13a:	e0 01       	movw	r28, r0
 13c:	e0 01       	movw	r28, r0
 13e:	e0 01       	movw	r28, r0
 140:	e0 01       	movw	r28, r0
 142:	e0 01       	movw	r28, r0
 144:	e0 01       	movw	r28, r0
 146:	e0 01       	movw	r28, r0
 148:	e0 01       	movw	r28, r0
 14a:	e0 01       	movw	r28, r0
 14c:	e0 01       	movw	r28, r0
 14e:	e0 01       	movw	r28, r0
 150:	e0 01       	movw	r28, r0
 152:	e0 01       	movw	r28, r0
 154:	e0 01       	movw	r28, r0
 156:	e0 01       	movw	r28, r0
 158:	e0 01       	movw	r28, r0
 15a:	e0 01       	movw	r28, r0
 15c:	e0 01       	movw	r28, r0
 15e:	e0 01       	movw	r28, r0
 160:	e0 01       	movw	r28, r0
 162:	e0 01       	movw	r28, r0
 164:	e0 01       	movw	r28, r0
 166:	e0 01       	movw	r28, r0
 168:	e0 01       	movw	r28, r0
 16a:	e0 01       	movw	r28, r0
 16c:	b1 01       	movw	r22, r2
 16e:	bd 01       	movw	r22, r26
 170:	c9 01       	movw	r24, r18
 172:	d5 01       	movw	r26, r10

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e2 e4       	ldi	r30, 0x42	; 66
 188:	f6 e0       	ldi	r31, 0x06	; 6
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a0 3d       	cpi	r26, 0xD0	; 208
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>
 196:	0e 94 b8 02 	call	0x570	; 0x570 <main>
 19a:	0c 94 1f 03 	jmp	0x63e	; 0x63e <_exit>

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <setBitDirection>:
		break;
		
		case 'D':
		case 'd':
			PORTD &=0xF0;
			PORTD |=value;
 1a2:	41 33       	cpi	r20, 0x31	; 49
 1a4:	11 f4       	brne	.+4      	; 0x1aa <setBitDirection+0x8>
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <setBitDirection+0xa>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	e1 54       	subi	r30, 0x41	; 65
 1b2:	f1 09       	sbc	r31, r1
 1b4:	e4 32       	cpi	r30, 0x24	; 36
 1b6:	f1 05       	cpc	r31, r1
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <setBitDirection+0x1a>
 1ba:	67 c0       	rjmp	.+206    	; 0x28a <setBitDirection+0xe8>
 1bc:	e6 5d       	subi	r30, 0xD6	; 214
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	0c 94 19 03 	jmp	0x632	; 0x632 <__tablejump2__>
 1c4:	22 23       	and	r18, r18
 1c6:	59 f0       	breq	.+22     	; 0x1de <setBitDirection+0x3c>
 1c8:	2a b3       	in	r18, 0x1a	; 26
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <setBitDirection+0x32>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <setBitDirection+0x2e>
 1d8:	82 2b       	or	r24, r18
 1da:	8a bb       	out	0x1a, r24	; 26
 1dc:	08 95       	ret
 1de:	2a b3       	in	r18, 0x1a	; 26
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <setBitDirection+0x48>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <setBitDirection+0x44>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	8a bb       	out	0x1a, r24	; 26
 1f4:	08 95       	ret
 1f6:	22 23       	and	r18, r18
 1f8:	59 f0       	breq	.+22     	; 0x210 <setBitDirection+0x6e>
 1fa:	27 b3       	in	r18, 0x17	; 23
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <setBitDirection+0x64>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <setBitDirection+0x60>
 20a:	82 2b       	or	r24, r18
 20c:	87 bb       	out	0x17, r24	; 23
 20e:	08 95       	ret
 210:	27 b3       	in	r18, 0x17	; 23
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <setBitDirection+0x7a>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <setBitDirection+0x76>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	87 bb       	out	0x17, r24	; 23
 226:	08 95       	ret
 228:	22 23       	and	r18, r18
 22a:	59 f0       	breq	.+22     	; 0x242 <setBitDirection+0xa0>
 22c:	24 b3       	in	r18, 0x14	; 20
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <setBitDirection+0x96>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <setBitDirection+0x92>
 23c:	82 2b       	or	r24, r18
 23e:	84 bb       	out	0x14, r24	; 20
 240:	08 95       	ret
 242:	24 b3       	in	r18, 0x14	; 20
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <setBitDirection+0xac>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <setBitDirection+0xa8>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	84 bb       	out	0x14, r24	; 20
 258:	08 95       	ret
 25a:	22 23       	and	r18, r18
 25c:	59 f0       	breq	.+22     	; 0x274 <setBitDirection+0xd2>
 25e:	21 b3       	in	r18, 0x11	; 17
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <setBitDirection+0xc8>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <setBitDirection+0xc4>
 26e:	82 2b       	or	r24, r18
 270:	81 bb       	out	0x11, r24	; 17
 272:	08 95       	ret
 274:	21 b3       	in	r18, 0x11	; 17
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <setBitDirection+0xde>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <setBitDirection+0xda>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	81 bb       	out	0x11, r24	; 17
 28a:	08 95       	ret

0000028c <setBit>:
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	e1 54       	subi	r30, 0x41	; 65
 292:	f1 09       	sbc	r31, r1
 294:	e4 32       	cpi	r30, 0x24	; 36
 296:	f1 05       	cpc	r31, r1
 298:	78 f5       	brcc	.+94     	; 0x2f8 <setBit+0x6c>
 29a:	e2 5b       	subi	r30, 0xB2	; 178
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	0c 94 19 03 	jmp	0x632	; 0x632 <__tablejump2__>
 2a2:	2b b3       	in	r18, 0x1b	; 27
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <setBit+0x22>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <setBit+0x1e>
 2b2:	82 2b       	or	r24, r18
 2b4:	8b bb       	out	0x1b, r24	; 27
 2b6:	08 95       	ret
 2b8:	28 b3       	in	r18, 0x18	; 24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <setBit+0x38>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <setBit+0x34>
 2c8:	82 2b       	or	r24, r18
 2ca:	88 bb       	out	0x18, r24	; 24
 2cc:	08 95       	ret
 2ce:	25 b3       	in	r18, 0x15	; 21
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <setBit+0x4e>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <setBit+0x4a>
 2de:	82 2b       	or	r24, r18
 2e0:	85 bb       	out	0x15, r24	; 21
 2e2:	08 95       	ret
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <setBit+0x64>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <setBit+0x60>
 2f4:	82 2b       	or	r24, r18
 2f6:	82 bb       	out	0x12, r24	; 18
 2f8:	08 95       	ret

000002fa <writeHigh_4pins>:
	}
}

void writeHigh_4pins(unsigned char port,unsigned char value)
{
	value = value << 4;
 2fa:	62 95       	swap	r22
 2fc:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	e1 54       	subi	r30, 0x41	; 65
 304:	f1 09       	sbc	r31, r1
 306:	e4 32       	cpi	r30, 0x24	; 36
 308:	f1 05       	cpc	r31, r1
 30a:	f8 f4       	brcc	.+62     	; 0x34a <writeHigh_4pins+0x50>
 30c:	ee 58       	subi	r30, 0x8E	; 142
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	0c 94 19 03 	jmp	0x632	; 0x632 <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA &= 0x0F;
 314:	8b b3       	in	r24, 0x1b	; 27
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 31a:	8b b3       	in	r24, 0x1b	; 27
 31c:	68 2b       	or	r22, r24
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB &= 0x0F;
 322:	88 b3       	in	r24, 0x18	; 24
 324:	8f 70       	andi	r24, 0x0F	; 15
 326:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 328:	88 b3       	in	r24, 0x18	; 24
 32a:	68 2b       	or	r22, r24
 32c:	68 bb       	out	0x18, r22	; 24
		break;
 32e:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC &= 0x0F;
 330:	85 b3       	in	r24, 0x15	; 21
 332:	8f 70       	andi	r24, 0x0F	; 15
 334:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 336:	85 b3       	in	r24, 0x15	; 21
 338:	68 2b       	or	r22, r24
 33a:	65 bb       	out	0x15, r22	; 21
		break;
 33c:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD &= 0x0F;
 33e:	82 b3       	in	r24, 0x12	; 18
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 344:	82 b3       	in	r24, 0x12	; 18
 346:	68 2b       	or	r22, r24
 348:	62 bb       	out	0x12, r22	; 18
 34a:	08 95       	ret

0000034c <clearBit>:
}

void clearBit(char port , int bitNumber)
{
	
	switch(port)
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	e1 54       	subi	r30, 0x41	; 65
 352:	f1 09       	sbc	r31, r1
 354:	e4 32       	cpi	r30, 0x24	; 36
 356:	f1 05       	cpc	r31, r1
 358:	98 f5       	brcc	.+102    	; 0x3c0 <clearBit+0x74>
 35a:	ea 56       	subi	r30, 0x6A	; 106
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	0c 94 19 03 	jmp	0x632	; 0x632 <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA &= ~(1<<bitNumber);
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <clearBit+0x22>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <clearBit+0x1e>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8b bb       	out	0x1b, r24	; 27
		break;
 378:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB &= ~(1<<bitNumber);
 37a:	28 b3       	in	r18, 0x18	; 24
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <clearBit+0x3a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <clearBit+0x36>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	88 bb       	out	0x18, r24	; 24
		break;
 390:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC &= ~(1<<bitNumber);
 392:	25 b3       	in	r18, 0x15	; 21
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <clearBit+0x52>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <clearBit+0x4e>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	85 bb       	out	0x15, r24	; 21
		break;
 3a8:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD &= ~(1<<bitNumber);
 3aa:	22 b3       	in	r18, 0x12	; 18
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <clearBit+0x6a>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <clearBit+0x66>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	82 bb       	out	0x12, r24	; 18
 3c0:	08 95       	ret

000003c2 <send_pulse>:
#define CURSOR_ON_DISPLAN_ON 0x0E
#define CLEAR_SCREEN 0x01
#define ENTRY_MODE 0x06
void send_pulse()
{
	setBit(ENABEL_PORT,ENABEL_PIN);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	82 e4       	ldi	r24, 0x42	; 66
 3c8:	0e 94 46 01 	call	0x28c	; 0x28c <setBit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3cc:	8f e9       	ldi	r24, 0x9F	; 159
 3ce:	9f e0       	ldi	r25, 0x0F	; 15
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <send_pulse+0xe>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <send_pulse+0x14>
 3d6:	00 00       	nop
	_delay_ms(2);
	clearBit(ENABEL_PORT,ENABEL_PIN);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	82 e4       	ldi	r24, 0x42	; 66
 3de:	0e 94 a6 01 	call	0x34c	; 0x34c <clearBit>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <send_pulse+0x24>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <send_pulse+0x2a>
 3ec:	00 00       	nop
 3ee:	08 95       	ret

000003f0 <LCD_sendCommand>:
	_delay_ms(2);
}
void LCD_sendCommand(unsigned char cmd)
{
 3f0:	cf 93       	push	r28
 3f2:	c8 2f       	mov	r28, r24
			_delay_ms(1);
			writeLow_4pins(LCD_CONNECTED_PORT,cmd);
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd>>4);
 3f4:	68 2f       	mov	r22, r24
 3f6:	62 95       	swap	r22
 3f8:	6f 70       	andi	r22, 0x0F	; 15
 3fa:	84 e4       	ldi	r24, 0x44	; 68
 3fc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	82 e4       	ldi	r24, 0x42	; 66
 406:	0e 94 a6 01 	call	0x34c	; 0x34c <clearBit>
			send_pulse();
 40a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
 40e:	8f ec       	ldi	r24, 0xCF	; 207
 410:	97 e0       	ldi	r25, 0x07	; 7
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
			_delay_ms(1);
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd);
 41a:	6c 2f       	mov	r22, r28
 41c:	84 e4       	ldi	r24, 0x44	; 68
 41e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	82 e4       	ldi	r24, 0x42	; 66
 428:	0e 94 a6 01 	call	0x34c	; 0x34c <clearBit>
			send_pulse();
 42c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
 430:	8f ec       	ldi	r24, 0xCF	; 207
 432:	97 e0       	ldi	r25, 0x07	; 7
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
		#endif
	#endif 
	_delay_ms(1);
}
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <LCD_Initialization>:
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	81 ee       	ldi	r24, 0xE1	; 225
 444:	94 e0       	ldi	r25, 0x04	; 4
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <LCD_Initialization+0x6>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_Initialization+0x10>
 450:	00 00       	nop
			setBitDirection(LCD_CONNECTED_PORT,0,'1');
			setBitDirection(LCD_CONNECTED_PORT,1,'1');
			setBitDirection(LCD_CONNECTED_PORT,2,'1');
			setBitDirection(LCD_CONNECTED_PORT,3,'1');
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			setBitDirection(LCD_CONNECTED_PORT,4,'1');
 452:	41 e3       	ldi	r20, 0x31	; 49
 454:	64 e0       	ldi	r22, 0x04	; 4
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	84 e4       	ldi	r24, 0x44	; 68
 45a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,5,'1');
 45e:	41 e3       	ldi	r20, 0x31	; 49
 460:	65 e0       	ldi	r22, 0x05	; 5
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	84 e4       	ldi	r24, 0x44	; 68
 466:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,6,'1');
 46a:	41 e3       	ldi	r20, 0x31	; 49
 46c:	66 e0       	ldi	r22, 0x06	; 6
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	84 e4       	ldi	r24, 0x44	; 68
 472:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,7,'1');
 476:	41 e3       	ldi	r20, 0x31	; 49
 478:	67 e0       	ldi	r22, 0x07	; 7
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	84 e4       	ldi	r24, 0x44	; 68
 47e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
		#else
			#warning "You must set IS_CONNECTED_TO_HIGH_PINS 0 to connect lcd to first 4-bit of any port or 1 to connect lcd to last 4-bit of any port"
		#endif
		
		setBitDirection(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN,'1');
 482:	41 e3       	ldi	r20, 0x31	; 49
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	82 e4       	ldi	r24, 0x42	; 66
 48a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
		setBitDirection(ENABEL_PORT,ENABEL_PIN,'1');
 48e:	41 e3       	ldi	r20, 0x31	; 49
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	82 e4       	ldi	r24, 0x42	; 66
 496:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
		
		LCD_sendCommand(0x02); //return home
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4a0:	8f e1       	ldi	r24, 0x1F	; 31
 4a2:	9e e4       	ldi	r25, 0x4E	; 78
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <LCD_Initialization+0x64>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LCD_Initialization+0x6a>
 4aa:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(LCD_4BIT_MODE);//FOUR_BITS MODE
 4ac:	88 e2       	ldi	r24, 0x28	; 40
 4ae:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4b2:	8f ec       	ldi	r24, 0xCF	; 207
 4b4:	97 e0       	ldi	r25, 0x07	; 7
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <LCD_Initialization+0x76>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <LCD_Initialization+0x7c>
 4bc:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(CURSOR_ON_DISPLAN_ON);//CURSOR_ON_DISPLAN_ON
 4be:	8e e0       	ldi	r24, 0x0E	; 14
 4c0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4c4:	8f ec       	ldi	r24, 0xCF	; 207
 4c6:	97 e0       	ldi	r25, 0x07	; 7
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCD_Initialization+0x88>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCD_Initialization+0x8e>
 4ce:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(0x01);//CLEAR_SCREEN
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4d6:	8f e1       	ldi	r24, 0x1F	; 31
 4d8:	9e e4       	ldi	r25, 0x4E	; 78
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_Initialization+0x9a>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_Initialization+0xa0>
 4e0:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(ENTRY_MODE);//ENTRY_MODE
 4e2:	86 e0       	ldi	r24, 0x06	; 6
 4e4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4e8:	08 95       	ret

000004ea <LCD_printCharacter>:
	#endif
}

void LCD_printCharacter(char character)
{
 4ea:	cf 93       	push	r28
 4ec:	c8 2f       	mov	r28, r24
			send_pulse();
			writeLow_4pins(LCD_CONNECTED_PORT,character);
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,character>>4);
 4ee:	68 2f       	mov	r22, r24
 4f0:	62 95       	swap	r22
 4f2:	6f 70       	andi	r22, 0x0F	; 15
 4f4:	84 e4       	ldi	r24, 0x44	; 68
 4f6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	82 e4       	ldi	r24, 0x42	; 66
 500:	0e 94 46 01 	call	0x28c	; 0x28c <setBit>
			send_pulse();
 504:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
			writeHigh_4pins(LCD_CONNECTED_PORT,character);
 508:	6c 2f       	mov	r22, r28
 50a:	84 e4       	ldi	r24, 0x44	; 68
 50c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	82 e4       	ldi	r24, 0x42	; 66
 516:	0e 94 46 01 	call	0x28c	; 0x28c <setBit>
			send_pulse();
 51a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
 51e:	8f ec       	ldi	r24, 0xCF	; 207
 520:	97 e0       	ldi	r25, 0x07	; 7
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <LCD_printCharacter+0x38>
 526:	00 c0       	rjmp	.+0      	; 0x528 <LCD_printCharacter+0x3e>
 528:	00 00       	nop
		#endif

	#endif
	_delay_ms(1);
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <LCD_printString>:

void LCD_printString(char* ptr)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ec 01       	movw	r28, r24
	while(*ptr != 0)
 534:	03 c0       	rjmp	.+6      	; 0x53c <LCD_printString+0xe>
	{
		LCD_printCharacter(*ptr);
 536:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
		++ptr;
 53a:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(1);
}

void LCD_printString(char* ptr)
{
	while(*ptr != 0)
 53c:	88 81       	ld	r24, Y
 53e:	81 11       	cpse	r24, r1
 540:	fa cf       	rjmp	.-12     	; 0x536 <LCD_printString+0x8>
	{
		LCD_printCharacter(*ptr);
		++ptr;
	}
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <LCD_moveCursor>:
void LCD_moveCursor(char row , char column)
{
	char address;
	if (row == 1)
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	19 f4       	brne	.+6      	; 0x552 <LCD_moveCursor+0xa>
	{
		address = 0x80 + column -1;
 54c:	8f e7       	ldi	r24, 0x7F	; 127
 54e:	86 0f       	add	r24, r22
 550:	02 c0       	rjmp	.+4      	; 0x556 <LCD_moveCursor+0xe>
	}
	else
	{
		address = 0xC0 + column -1;
 552:	8f eb       	ldi	r24, 0xBF	; 191
 554:	86 0f       	add	r24, r22
	}
	LCD_sendCommand(address);
 556:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 55a:	08 95       	ret

0000055c <clearScreen>:
}
void clearScreen()
{
	LCD_sendCommand(0x01);
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 562:	8f e1       	ldi	r24, 0x1F	; 31
 564:	9e e4       	ldi	r25, 0x4E	; 78
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <clearScreen+0xa>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <clearScreen+0x10>
 56c:	00 00       	nop
 56e:	08 95       	ret

00000570 <main>:
    LCD_moveCursor(2,1);
	LCD_printString("Embedded Systems");
	_delay_ms(1000);
	clearScreen();
	*/
   LCD_Initialization();
 570:	0e 94 20 02 	call	0x440	; 0x440 <LCD_Initialization>
   
   LCD_printString("     HELLO     ");
 574:	80 e6       	ldi	r24, 0x60	; 96
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	89 e6       	ldi	r24, 0x69	; 105
 580:	98 e1       	ldi	r25, 0x18	; 24
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x12>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x1c>
 58c:	00 00       	nop
   _delay_ms(1000);
   clearScreen();
 58e:	0e 94 ae 02 	call	0x55c	; 0x55c <clearScreen>
   
   LCD_printString("This is the");
 592:	80 e7       	ldi	r24, 0x70	; 112
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
   LCD_moveCursor(2,1);
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_moveCursor>
   LCD_printString("First LCD project");
 5a2:	8c e7       	ldi	r24, 0x7C	; 124
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
 5aa:	2f ef       	ldi	r18, 0xFF	; 255
 5ac:	8d e3       	ldi	r24, 0x3D	; 61
 5ae:	99 e4       	ldi	r25, 0x49	; 73
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x40>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x4a>
 5ba:	00 00       	nop
   _delay_ms(3000);
   
   clearScreen();
 5bc:	0e 94 ae 02 	call	0x55c	; 0x55c <clearScreen>
   LCD_moveCursor(1,1);
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_moveCursor>
   LCD_printString("Developed by ENG");
 5c8:	8e e8       	ldi	r24, 0x8E	; 142
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
   LCD_moveCursor(2,1);
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_moveCursor>
   LCD_printString(" Ahmed Hussien");
 5d8:	8f e9       	ldi	r24, 0x9F	; 159
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
 5e0:	2f ef       	ldi	r18, 0xFF	; 255
 5e2:	8d e3       	ldi	r24, 0x3D	; 61
 5e4:	99 e4       	ldi	r25, 0x49	; 73
 5e6:	21 50       	subi	r18, 0x01	; 1
 5e8:	80 40       	sbci	r24, 0x00	; 0
 5ea:	90 40       	sbci	r25, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <main+0x76>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <main+0x80>
 5f0:	00 00       	nop
   _delay_ms(3000);
   
   clearScreen();
 5f2:	0e 94 ae 02 	call	0x55c	; 0x55c <clearScreen>
   LCD_moveCursor(1,1);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_moveCursor>
   LCD_printString(" Thank you for ");
 5fe:	8e ea       	ldi	r24, 0xAE	; 174
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
   LCD_moveCursor(2,1);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_moveCursor>
   LCD_printString("    watching    ");
 60e:	8e eb       	ldi	r24, 0xBE	; 190
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
 616:	2f ef       	ldi	r18, 0xFF	; 255
 618:	89 e6       	ldi	r24, 0x69	; 105
 61a:	98 e1       	ldi	r25, 0x18	; 24
 61c:	21 50       	subi	r18, 0x01	; 1
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	e1 f7       	brne	.-8      	; 0x61c <main+0xac>
 624:	00 c0       	rjmp	.+0      	; 0x626 <main+0xb6>
 626:	00 00       	nop
   _delay_ms(1000);
   clearScreen();
 628:	0e 94 ae 02 	call	0x55c	; 0x55c <clearScreen>
  /*while(1)
  {
	  LCD_sendCommand(0x1C);
	  _delay_ms(500);
  }*/
}
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	08 95       	ret

00000632 <__tablejump2__>:
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	05 90       	lpm	r0, Z+
 638:	f4 91       	lpm	r31, Z
 63a:	e0 2d       	mov	r30, r0
 63c:	09 94       	ijmp

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
