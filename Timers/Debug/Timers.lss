
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000003d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab7  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cb  00000000  00000000  00000fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000921  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000091d  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002e69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__ctors_end>
   4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
   8:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
   c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  10:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  14:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  18:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  1c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  20:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  24:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  28:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_10>
  2c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  30:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  34:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  3c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  40:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  44:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  48:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  4c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  50:	0c 94 96 00 	jmp	0x12c	; 0x12c <__bad_interrupt>
  54:	a9 00       	.word	0x00a9	; ????
  56:	c2 00       	.word	0x00c2	; ????
  58:	db 00       	.word	0x00db	; ????
  5a:	f4 00       	.word	0x00f4	; ????
  5c:	0c 01       	movw	r0, r24
  5e:	0c 01       	movw	r0, r24
  60:	0c 01       	movw	r0, r24
  62:	0c 01       	movw	r0, r24
  64:	0c 01       	movw	r0, r24
  66:	0c 01       	movw	r0, r24
  68:	0c 01       	movw	r0, r24
  6a:	0c 01       	movw	r0, r24
  6c:	0c 01       	movw	r0, r24
  6e:	0c 01       	movw	r0, r24
  70:	0c 01       	movw	r0, r24
  72:	0c 01       	movw	r0, r24
  74:	0c 01       	movw	r0, r24
  76:	0c 01       	movw	r0, r24
  78:	0c 01       	movw	r0, r24
  7a:	0c 01       	movw	r0, r24
  7c:	0c 01       	movw	r0, r24
  7e:	0c 01       	movw	r0, r24
  80:	0c 01       	movw	r0, r24
  82:	0c 01       	movw	r0, r24
  84:	0c 01       	movw	r0, r24
  86:	0c 01       	movw	r0, r24
  88:	0c 01       	movw	r0, r24
  8a:	0c 01       	movw	r0, r24
  8c:	0c 01       	movw	r0, r24
  8e:	0c 01       	movw	r0, r24
  90:	0c 01       	movw	r0, r24
  92:	0c 01       	movw	r0, r24
  94:	a9 00       	.word	0x00a9	; ????
  96:	c2 00       	.word	0x00c2	; ????
  98:	db 00       	.word	0x00db	; ????
  9a:	f4 00       	.word	0x00f4	; ????
  9c:	18 01       	movw	r2, r16
  9e:	23 01       	movw	r4, r6
  a0:	2e 01       	movw	r4, r28
  a2:	39 01       	movw	r6, r18
  a4:	43 01       	movw	r8, r6
  a6:	43 01       	movw	r8, r6
  a8:	43 01       	movw	r8, r6
  aa:	43 01       	movw	r8, r6
  ac:	43 01       	movw	r8, r6
  ae:	43 01       	movw	r8, r6
  b0:	43 01       	movw	r8, r6
  b2:	43 01       	movw	r8, r6
  b4:	43 01       	movw	r8, r6
  b6:	43 01       	movw	r8, r6
  b8:	43 01       	movw	r8, r6
  ba:	43 01       	movw	r8, r6
  bc:	43 01       	movw	r8, r6
  be:	43 01       	movw	r8, r6
  c0:	43 01       	movw	r8, r6
  c2:	43 01       	movw	r8, r6
  c4:	43 01       	movw	r8, r6
  c6:	43 01       	movw	r8, r6
  c8:	43 01       	movw	r8, r6
  ca:	43 01       	movw	r8, r6
  cc:	43 01       	movw	r8, r6
  ce:	43 01       	movw	r8, r6
  d0:	43 01       	movw	r8, r6
  d2:	43 01       	movw	r8, r6
  d4:	43 01       	movw	r8, r6
  d6:	43 01       	movw	r8, r6
  d8:	43 01       	movw	r8, r6
  da:	43 01       	movw	r8, r6
  dc:	18 01       	movw	r2, r16
  de:	23 01       	movw	r4, r6
  e0:	2e 01       	movw	r4, r28
  e2:	39 01       	movw	r6, r18
  e4:	7e 01       	movw	r14, r28
  e6:	82 01       	movw	r16, r4
  e8:	86 01       	movw	r16, r12
  ea:	8d 01       	movw	r16, r26
  ec:	91 01       	movw	r18, r2
  ee:	98 01       	movw	r18, r16
  f0:	9f 01       	movw	r18, r30

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf e5       	ldi	r28, 0x5F	; 95
  f8:	d8 e0       	ldi	r29, 0x08	; 8
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	a0 e6       	ldi	r26, 0x60	; 96
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e2 e6       	ldi	r30, 0x62	; 98
 106:	f3 e0       	ldi	r31, 0x03	; 3
 108:	02 c0       	rjmp	.+4      	; 0x10e <__do_copy_data+0x10>
 10a:	05 90       	lpm	r0, Z+
 10c:	0d 92       	st	X+, r0
 10e:	a0 36       	cpi	r26, 0x60	; 96
 110:	b1 07       	cpc	r27, r17
 112:	d9 f7       	brne	.-10     	; 0x10a <__do_copy_data+0xc>

00000114 <__do_clear_bss>:
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	a0 e6       	ldi	r26, 0x60	; 96
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
 11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
 11e:	a1 36       	cpi	r26, 0x61	; 97
 120:	b2 07       	cpc	r27, r18
 122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>
 124:	0e 94 44 01 	call	0x288	; 0x288 <main>
 128:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

0000012c <__bad_interrupt>:
 12c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000130 <setBitDirection>:
			PORTC = 0;
		break;
		
		case 'D':
		case 'd':
			PORTD = 0;
 130:	41 33       	cpi	r20, 0x31	; 49
 132:	11 f4       	brne	.+4      	; 0x138 <setBitDirection+0x8>
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	01 c0       	rjmp	.+2      	; 0x13a <setBitDirection+0xa>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	e1 54       	subi	r30, 0x41	; 65
 140:	f1 09       	sbc	r31, r1
 142:	e4 32       	cpi	r30, 0x24	; 36
 144:	f1 05       	cpc	r31, r1
 146:	08 f0       	brcs	.+2      	; 0x14a <setBitDirection+0x1a>
 148:	67 c0       	rjmp	.+206    	; 0x218 <setBitDirection+0xe8>
 14a:	e6 5d       	subi	r30, 0xD6	; 214
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	0c 94 a9 01 	jmp	0x352	; 0x352 <__tablejump2__>
 152:	22 23       	and	r18, r18
 154:	59 f0       	breq	.+22     	; 0x16c <setBitDirection+0x3c>
 156:	2a b3       	in	r18, 0x1a	; 26
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <setBitDirection+0x32>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <setBitDirection+0x2e>
 166:	82 2b       	or	r24, r18
 168:	8a bb       	out	0x1a, r24	; 26
 16a:	08 95       	ret
 16c:	2a b3       	in	r18, 0x1a	; 26
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <setBitDirection+0x48>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <setBitDirection+0x44>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	8a bb       	out	0x1a, r24	; 26
 182:	08 95       	ret
 184:	22 23       	and	r18, r18
 186:	59 f0       	breq	.+22     	; 0x19e <setBitDirection+0x6e>
 188:	27 b3       	in	r18, 0x17	; 23
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <setBitDirection+0x64>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <setBitDirection+0x60>
 198:	82 2b       	or	r24, r18
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
 19e:	27 b3       	in	r18, 0x17	; 23
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <setBitDirection+0x7a>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <setBitDirection+0x76>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	87 bb       	out	0x17, r24	; 23
 1b4:	08 95       	ret
 1b6:	22 23       	and	r18, r18
 1b8:	59 f0       	breq	.+22     	; 0x1d0 <setBitDirection+0xa0>
 1ba:	24 b3       	in	r18, 0x14	; 20
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <setBitDirection+0x96>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <setBitDirection+0x92>
 1ca:	82 2b       	or	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
 1ce:	08 95       	ret
 1d0:	24 b3       	in	r18, 0x14	; 20
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <setBitDirection+0xac>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <setBitDirection+0xa8>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	84 bb       	out	0x14, r24	; 20
 1e6:	08 95       	ret
 1e8:	22 23       	and	r18, r18
 1ea:	59 f0       	breq	.+22     	; 0x202 <setBitDirection+0xd2>
 1ec:	21 b3       	in	r18, 0x11	; 17
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <setBitDirection+0xc8>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <setBitDirection+0xc4>
 1fc:	82 2b       	or	r24, r18
 1fe:	81 bb       	out	0x11, r24	; 17
 200:	08 95       	ret
 202:	21 b3       	in	r18, 0x11	; 17
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <setBitDirection+0xde>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <setBitDirection+0xda>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	81 bb       	out	0x11, r24	; 17
 218:	08 95       	ret

0000021a <toggelBit>:
}

void toggelBit(char port , int bitNumber)
{
	
	switch(port)
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	e1 54       	subi	r30, 0x41	; 65
 220:	f1 09       	sbc	r31, r1
 222:	e4 32       	cpi	r30, 0x24	; 36
 224:	f1 05       	cpc	r31, r1
 226:	78 f5       	brcc	.+94     	; 0x286 <toggelBit+0x6c>
 228:	e2 5b       	subi	r30, 0xB2	; 178
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA ^= (1<<bitNumber);
 230:	2b b3       	in	r18, 0x1b	; 27
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <toggelBit+0x22>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <toggelBit+0x1e>
 240:	82 27       	eor	r24, r18
 242:	8b bb       	out	0x1b, r24	; 27
		break;
 244:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB ^= (1<<bitNumber);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <toggelBit+0x38>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <toggelBit+0x34>
 256:	82 27       	eor	r24, r18
 258:	88 bb       	out	0x18, r24	; 24
		break;
 25a:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC ^= (1<<bitNumber);
 25c:	25 b3       	in	r18, 0x15	; 21
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <toggelBit+0x4e>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <toggelBit+0x4a>
 26c:	82 27       	eor	r24, r18
 26e:	85 bb       	out	0x15, r24	; 21
		break; 
 270:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD ^= (1<<bitNumber);
 272:	22 b3       	in	r18, 0x12	; 18
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <toggelBit+0x64>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <toggelBit+0x60>
 282:	82 27       	eor	r24, r18
 284:	82 bb       	out	0x12, r24	; 18
 286:	08 95       	ret

00000288 <main>:
#include "macros.h"
#include "timer0_driver.h"
volatile char x = 0 ;
int main(void)
{
	setBitDirection('A',0,'1');
 288:	41 e3       	ldi	r20, 0x31	; 49
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	81 e4       	ldi	r24, 0x41	; 65
 290:	0e 94 98 00 	call	0x130	; 0x130 <setBitDirection>
	
	timer0_ctc_init(78,5);
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	8e e4       	ldi	r24, 0x4E	; 78
 298:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <timer0_ctc_init>
	while(1)
	{
		
		if (x>=100)
 29c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2a0:	84 36       	cpi	r24, 0x64	; 100
 2a2:	e0 f3       	brcs	.-8      	; 0x29c <main+0x14>
		{
			toggelBit('A',0);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	81 e4       	ldi	r24, 0x41	; 65
 2aa:	0e 94 0d 01 	call	0x21a	; 0x21a <toggelBit>
			x = 0;
 2ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	f4 cf       	rjmp	.-24     	; 0x29c <main+0x14>

000002b4 <__vector_10>:
		}
	}
}

ISR(TIMER0_COMP_vect)
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	8f 93       	push	r24
	++x;
 2c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <timer0_ctc_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "macros.h"
void timer0_ctc_init(char OCR0_value,unsigned char prescaler)
{
	sei();
 2d6:	78 94       	sei
	//set interrupt enable bit for CTC mode 
	SET_BIT(TIMSK,OCIE0);
 2d8:	99 b7       	in	r25, 0x39	; 57
 2da:	92 60       	ori	r25, 0x02	; 2
 2dc:	99 bf       	out	0x39, r25	; 57
	
	//load value in OCR
	OCR0 = OCR0_value;
 2de:	8c bf       	out	0x3c, r24	; 60
	
	// select CTC mode 
	SET_BIT(TCCR0,WGM01);
 2e0:	83 b7       	in	r24, 0x33	; 51
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	83 bf       	out	0x33, r24	; 51
	
	//set clock select bits CS02 , CS01 , CS00 (prescaler)
	switch(prescaler)
 2e6:	86 2f       	mov	r24, r22
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	e7 30       	cpi	r30, 0x07	; 7
 2f0:	f1 05       	cpc	r31, r1
 2f2:	70 f5       	brcc	.+92     	; 0x350 <timer0_ctc_init+0x7a>
 2f4:	ee 58       	subi	r30, 0x8E	; 142
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__tablejump2__>
	{
		case 1: // clk (no prescaling)
			SET_BIT(TCCR0,CS00);
 2fc:	83 b7       	in	r24, 0x33	; 51
 2fe:	81 60       	ori	r24, 0x01	; 1
 300:	83 bf       	out	0x33, r24	; 51
			break;
 302:	08 95       	ret
		case 2: // clk / 8
			SET_BIT(TCCR0,CS01);
 304:	83 b7       	in	r24, 0x33	; 51
 306:	82 60       	ori	r24, 0x02	; 2
 308:	83 bf       	out	0x33, r24	; 51
			break;
 30a:	08 95       	ret
		case 3: // clk / 64
			SET_BIT(TCCR0,CS00);
 30c:	83 b7       	in	r24, 0x33	; 51
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS01);
 312:	83 b7       	in	r24, 0x33	; 51
 314:	82 60       	ori	r24, 0x02	; 2
 316:	83 bf       	out	0x33, r24	; 51
			break;
 318:	08 95       	ret
		case 4: // clk / 256
			SET_BIT(TCCR0,CS02);
 31a:	83 b7       	in	r24, 0x33	; 51
 31c:	84 60       	ori	r24, 0x04	; 4
 31e:	83 bf       	out	0x33, r24	; 51
			break;
 320:	08 95       	ret
		case 5: // clk /1024
			SET_BIT(TCCR0,CS00);
 322:	83 b7       	in	r24, 0x33	; 51
 324:	81 60       	ori	r24, 0x01	; 1
 326:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS02);
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	84 60       	ori	r24, 0x04	; 4
 32c:	83 bf       	out	0x33, r24	; 51
			break;
 32e:	08 95       	ret
		case 6: //external clock source on T0 pin clock on falling edge
			SET_BIT(TCCR0,CS01);
 330:	83 b7       	in	r24, 0x33	; 51
 332:	82 60       	ori	r24, 0x02	; 2
 334:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS02);
 336:	83 b7       	in	r24, 0x33	; 51
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	83 bf       	out	0x33, r24	; 51
			break;
 33c:	08 95       	ret
		case 7: //external clock source on T0 pin clock on rising edge
			SET_BIT(TCCR0,CS00);
 33e:	83 b7       	in	r24, 0x33	; 51
 340:	81 60       	ori	r24, 0x01	; 1
 342:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS01);
 344:	83 b7       	in	r24, 0x33	; 51
 346:	82 60       	ori	r24, 0x02	; 2
 348:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,CS02);
 34a:	83 b7       	in	r24, 0x33	; 51
 34c:	84 60       	ori	r24, 0x04	; 4
 34e:	83 bf       	out	0x33, r24	; 51
 350:	08 95       	ret

00000352 <__tablejump2__>:
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	05 90       	lpm	r0, Z+
 358:	f4 91       	lpm	r31, Z
 35a:	e0 2d       	mov	r30, r0
 35c:	09 94       	ijmp

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
