
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000008e4  00000958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001320  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ba  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab7  00000000  00000000  000026c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b8  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e74  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  48:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  4c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  54:	2a 01       	movw	r4, r20
  56:	43 01       	movw	r8, r6
  58:	5c 01       	movw	r10, r24
  5a:	75 01       	movw	r14, r10
  5c:	8d 01       	movw	r16, r26
  5e:	8d 01       	movw	r16, r26
  60:	8d 01       	movw	r16, r26
  62:	8d 01       	movw	r16, r26
  64:	8d 01       	movw	r16, r26
  66:	8d 01       	movw	r16, r26
  68:	8d 01       	movw	r16, r26
  6a:	8d 01       	movw	r16, r26
  6c:	8d 01       	movw	r16, r26
  6e:	8d 01       	movw	r16, r26
  70:	8d 01       	movw	r16, r26
  72:	8d 01       	movw	r16, r26
  74:	8d 01       	movw	r16, r26
  76:	8d 01       	movw	r16, r26
  78:	8d 01       	movw	r16, r26
  7a:	8d 01       	movw	r16, r26
  7c:	8d 01       	movw	r16, r26
  7e:	8d 01       	movw	r16, r26
  80:	8d 01       	movw	r16, r26
  82:	8d 01       	movw	r16, r26
  84:	8d 01       	movw	r16, r26
  86:	8d 01       	movw	r16, r26
  88:	8d 01       	movw	r16, r26
  8a:	8d 01       	movw	r16, r26
  8c:	8d 01       	movw	r16, r26
  8e:	8d 01       	movw	r16, r26
  90:	8d 01       	movw	r16, r26
  92:	8d 01       	movw	r16, r26
  94:	2a 01       	movw	r4, r20
  96:	43 01       	movw	r8, r6
  98:	5c 01       	movw	r10, r24
  9a:	75 01       	movw	r14, r10
  9c:	99 01       	movw	r18, r18
  9e:	a4 01       	movw	r20, r8
  a0:	af 01       	movw	r20, r30
  a2:	ba 01       	movw	r22, r20
  a4:	c4 01       	movw	r24, r8
  a6:	c4 01       	movw	r24, r8
  a8:	c4 01       	movw	r24, r8
  aa:	c4 01       	movw	r24, r8
  ac:	c4 01       	movw	r24, r8
  ae:	c4 01       	movw	r24, r8
  b0:	c4 01       	movw	r24, r8
  b2:	c4 01       	movw	r24, r8
  b4:	c4 01       	movw	r24, r8
  b6:	c4 01       	movw	r24, r8
  b8:	c4 01       	movw	r24, r8
  ba:	c4 01       	movw	r24, r8
  bc:	c4 01       	movw	r24, r8
  be:	c4 01       	movw	r24, r8
  c0:	c4 01       	movw	r24, r8
  c2:	c4 01       	movw	r24, r8
  c4:	c4 01       	movw	r24, r8
  c6:	c4 01       	movw	r24, r8
  c8:	c4 01       	movw	r24, r8
  ca:	c4 01       	movw	r24, r8
  cc:	c4 01       	movw	r24, r8
  ce:	c4 01       	movw	r24, r8
  d0:	c4 01       	movw	r24, r8
  d2:	c4 01       	movw	r24, r8
  d4:	c4 01       	movw	r24, r8
  d6:	c4 01       	movw	r24, r8
  d8:	c4 01       	movw	r24, r8
  da:	c4 01       	movw	r24, r8
  dc:	99 01       	movw	r18, r18
  de:	a4 01       	movw	r20, r8
  e0:	af 01       	movw	r20, r30
  e2:	ba 01       	movw	r22, r20
  e4:	d2 01       	movw	r26, r4
  e6:	d9 01       	movw	r26, r18
  e8:	e0 01       	movw	r28, r0
  ea:	e7 01       	movw	r28, r14
  ec:	ed 01       	movw	r28, r26
  ee:	ed 01       	movw	r28, r26
  f0:	ed 01       	movw	r28, r26
  f2:	ed 01       	movw	r28, r26
  f4:	ed 01       	movw	r28, r26
  f6:	ed 01       	movw	r28, r26
  f8:	ed 01       	movw	r28, r26
  fa:	ed 01       	movw	r28, r26
  fc:	ed 01       	movw	r28, r26
  fe:	ed 01       	movw	r28, r26
 100:	ed 01       	movw	r28, r26
 102:	ed 01       	movw	r28, r26
 104:	ed 01       	movw	r28, r26
 106:	ed 01       	movw	r28, r26
 108:	ed 01       	movw	r28, r26
 10a:	ed 01       	movw	r28, r26
 10c:	ed 01       	movw	r28, r26
 10e:	ed 01       	movw	r28, r26
 110:	ed 01       	movw	r28, r26
 112:	ed 01       	movw	r28, r26
 114:	ed 01       	movw	r28, r26
 116:	ed 01       	movw	r28, r26
 118:	ed 01       	movw	r28, r26
 11a:	ed 01       	movw	r28, r26
 11c:	ed 01       	movw	r28, r26
 11e:	ed 01       	movw	r28, r26
 120:	ed 01       	movw	r28, r26
 122:	ed 01       	movw	r28, r26
 124:	d2 01       	movw	r26, r4
 126:	d9 01       	movw	r26, r18
 128:	e0 01       	movw	r28, r0
 12a:	e7 01       	movw	r28, r14
 12c:	f9 01       	movw	r30, r18
 12e:	05 02       	muls	r16, r21
 130:	11 02       	muls	r17, r17
 132:	1d 02       	muls	r17, r29
 134:	28 02       	muls	r18, r24
 136:	28 02       	muls	r18, r24
 138:	28 02       	muls	r18, r24
 13a:	28 02       	muls	r18, r24
 13c:	28 02       	muls	r18, r24
 13e:	28 02       	muls	r18, r24
 140:	28 02       	muls	r18, r24
 142:	28 02       	muls	r18, r24
 144:	28 02       	muls	r18, r24
 146:	28 02       	muls	r18, r24
 148:	28 02       	muls	r18, r24
 14a:	28 02       	muls	r18, r24
 14c:	28 02       	muls	r18, r24
 14e:	28 02       	muls	r18, r24
 150:	28 02       	muls	r18, r24
 152:	28 02       	muls	r18, r24
 154:	28 02       	muls	r18, r24
 156:	28 02       	muls	r18, r24
 158:	28 02       	muls	r18, r24
 15a:	28 02       	muls	r18, r24
 15c:	28 02       	muls	r18, r24
 15e:	28 02       	muls	r18, r24
 160:	28 02       	muls	r18, r24
 162:	28 02       	muls	r18, r24
 164:	28 02       	muls	r18, r24
 166:	28 02       	muls	r18, r24
 168:	28 02       	muls	r18, r24
 16a:	28 02       	muls	r18, r24
 16c:	f9 01       	movw	r30, r18
 16e:	05 02       	muls	r16, r21
 170:	11 02       	muls	r17, r17
 172:	1d 02       	muls	r17, r29
 174:	35 02       	muls	r19, r21
 176:	49 02       	muls	r20, r25
 178:	5d 02       	muls	r21, r29
 17a:	71 02       	muls	r23, r17
 17c:	85 02       	muls	r24, r21
 17e:	85 02       	muls	r24, r21
 180:	85 02       	muls	r24, r21
 182:	85 02       	muls	r24, r21
 184:	85 02       	muls	r24, r21
 186:	85 02       	muls	r24, r21
 188:	85 02       	muls	r24, r21
 18a:	85 02       	muls	r24, r21
 18c:	85 02       	muls	r24, r21
 18e:	85 02       	muls	r24, r21
 190:	85 02       	muls	r24, r21
 192:	85 02       	muls	r24, r21
 194:	85 02       	muls	r24, r21
 196:	85 02       	muls	r24, r21
 198:	85 02       	muls	r24, r21
 19a:	85 02       	muls	r24, r21
 19c:	85 02       	muls	r24, r21
 19e:	85 02       	muls	r24, r21
 1a0:	85 02       	muls	r24, r21
 1a2:	85 02       	muls	r24, r21
 1a4:	85 02       	muls	r24, r21
 1a6:	85 02       	muls	r24, r21
 1a8:	85 02       	muls	r24, r21
 1aa:	85 02       	muls	r24, r21
 1ac:	85 02       	muls	r24, r21
 1ae:	85 02       	muls	r24, r21
 1b0:	85 02       	muls	r24, r21
 1b2:	85 02       	muls	r24, r21
 1b4:	35 02       	muls	r19, r21
 1b6:	49 02       	muls	r20, r25
 1b8:	5d 02       	muls	r21, r29
 1ba:	71 02       	muls	r23, r17
 1bc:	98 02       	muls	r25, r24
 1be:	b1 02       	muls	r27, r17
 1c0:	ca 02       	muls	r28, r26
 1c2:	e3 02       	muls	r30, r19
 1c4:	fb 02       	muls	r31, r27
 1c6:	fb 02       	muls	r31, r27
 1c8:	fb 02       	muls	r31, r27
 1ca:	fb 02       	muls	r31, r27
 1cc:	fb 02       	muls	r31, r27
 1ce:	fb 02       	muls	r31, r27
 1d0:	fb 02       	muls	r31, r27
 1d2:	fb 02       	muls	r31, r27
 1d4:	fb 02       	muls	r31, r27
 1d6:	fb 02       	muls	r31, r27
 1d8:	fb 02       	muls	r31, r27
 1da:	fb 02       	muls	r31, r27
 1dc:	fb 02       	muls	r31, r27
 1de:	fb 02       	muls	r31, r27
 1e0:	fb 02       	muls	r31, r27
 1e2:	fb 02       	muls	r31, r27
 1e4:	fb 02       	muls	r31, r27
 1e6:	fb 02       	muls	r31, r27
 1e8:	fb 02       	muls	r31, r27
 1ea:	fb 02       	muls	r31, r27
 1ec:	fb 02       	muls	r31, r27
 1ee:	fb 02       	muls	r31, r27
 1f0:	fb 02       	muls	r31, r27
 1f2:	fb 02       	muls	r31, r27
 1f4:	fb 02       	muls	r31, r27
 1f6:	fb 02       	muls	r31, r27
 1f8:	fb 02       	muls	r31, r27
 1fa:	fb 02       	muls	r31, r27
 1fc:	98 02       	muls	r25, r24
 1fe:	b1 02       	muls	r27, r17
 200:	ca 02       	muls	r28, r26
 202:	e3 02       	muls	r30, r19

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf e5       	ldi	r28, 0x5F	; 95
 20a:	d8 e0       	ldi	r29, 0x08	; 8
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	cd bf       	out	0x3d, r28	; 61

00000210 <__do_copy_data>:
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	a0 e6       	ldi	r26, 0x60	; 96
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e4 ee       	ldi	r30, 0xE4	; 228
 218:	f8 e0       	ldi	r31, 0x08	; 8
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x10>
 21c:	05 90       	lpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 37       	cpi	r26, 0x70	; 112
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0xc>
 226:	0e 94 4e 04 	call	0x89c	; 0x89c <main>
 22a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <_exit>

0000022e <__bad_interrupt>:
 22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000232 <setBitDirection>:
		default:
		break;
	}
	return pins;
	
}
 232:	41 33       	cpi	r20, 0x31	; 49
 234:	11 f4       	brne	.+4      	; 0x23a <setBitDirection+0x8>
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	01 c0       	rjmp	.+2      	; 0x23c <setBitDirection+0xa>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	e1 54       	subi	r30, 0x41	; 65
 242:	f1 09       	sbc	r31, r1
 244:	e4 32       	cpi	r30, 0x24	; 36
 246:	f1 05       	cpc	r31, r1
 248:	08 f0       	brcs	.+2      	; 0x24c <setBitDirection+0x1a>
 24a:	67 c0       	rjmp	.+206    	; 0x31a <setBitDirection+0xe8>
 24c:	e6 5d       	subi	r30, 0xD6	; 214
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__tablejump2__>
 254:	22 23       	and	r18, r18
 256:	59 f0       	breq	.+22     	; 0x26e <setBitDirection+0x3c>
 258:	2a b3       	in	r18, 0x1a	; 26
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <setBitDirection+0x32>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <setBitDirection+0x2e>
 268:	82 2b       	or	r24, r18
 26a:	8a bb       	out	0x1a, r24	; 26
 26c:	08 95       	ret
 26e:	2a b3       	in	r18, 0x1a	; 26
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <setBitDirection+0x48>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <setBitDirection+0x44>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	8a bb       	out	0x1a, r24	; 26
 284:	08 95       	ret
 286:	22 23       	and	r18, r18
 288:	59 f0       	breq	.+22     	; 0x2a0 <setBitDirection+0x6e>
 28a:	27 b3       	in	r18, 0x17	; 23
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <setBitDirection+0x64>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <setBitDirection+0x60>
 29a:	82 2b       	or	r24, r18
 29c:	87 bb       	out	0x17, r24	; 23
 29e:	08 95       	ret
 2a0:	27 b3       	in	r18, 0x17	; 23
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <setBitDirection+0x7a>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <setBitDirection+0x76>
 2b0:	80 95       	com	r24
 2b2:	82 23       	and	r24, r18
 2b4:	87 bb       	out	0x17, r24	; 23
 2b6:	08 95       	ret
 2b8:	22 23       	and	r18, r18
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <setBitDirection+0xa0>
 2bc:	24 b3       	in	r18, 0x14	; 20
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <setBitDirection+0x96>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <setBitDirection+0x92>
 2cc:	82 2b       	or	r24, r18
 2ce:	84 bb       	out	0x14, r24	; 20
 2d0:	08 95       	ret
 2d2:	24 b3       	in	r18, 0x14	; 20
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <setBitDirection+0xac>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <setBitDirection+0xa8>
 2e2:	80 95       	com	r24
 2e4:	82 23       	and	r24, r18
 2e6:	84 bb       	out	0x14, r24	; 20
 2e8:	08 95       	ret
 2ea:	22 23       	and	r18, r18
 2ec:	59 f0       	breq	.+22     	; 0x304 <setBitDirection+0xd2>
 2ee:	21 b3       	in	r18, 0x11	; 17
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <setBitDirection+0xc8>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <setBitDirection+0xc4>
 2fe:	82 2b       	or	r24, r18
 300:	81 bb       	out	0x11, r24	; 17
 302:	08 95       	ret
 304:	21 b3       	in	r18, 0x11	; 17
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <setBitDirection+0xde>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <setBitDirection+0xda>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	81 bb       	out	0x11, r24	; 17
 31a:	08 95       	ret

0000031c <setBit>:
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	e1 54       	subi	r30, 0x41	; 65
 322:	f1 09       	sbc	r31, r1
 324:	e4 32       	cpi	r30, 0x24	; 36
 326:	f1 05       	cpc	r31, r1
 328:	78 f5       	brcc	.+94     	; 0x388 <setBit+0x6c>
 32a:	e2 5b       	subi	r30, 0xB2	; 178
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__tablejump2__>
 332:	2b b3       	in	r18, 0x1b	; 27
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <setBit+0x22>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <setBit+0x1e>
 342:	82 2b       	or	r24, r18
 344:	8b bb       	out	0x1b, r24	; 27
 346:	08 95       	ret
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <setBit+0x38>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <setBit+0x34>
 358:	82 2b       	or	r24, r18
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	08 95       	ret
 35e:	25 b3       	in	r18, 0x15	; 21
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <setBit+0x4e>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <setBit+0x4a>
 36e:	82 2b       	or	r24, r18
 370:	85 bb       	out	0x15, r24	; 21
 372:	08 95       	ret
 374:	22 b3       	in	r18, 0x12	; 18
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <setBit+0x64>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <setBit+0x60>
 384:	82 2b       	or	r24, r18
 386:	82 bb       	out	0x12, r24	; 18
 388:	08 95       	ret

0000038a <writeHigh_4pins>:
 38a:	62 95       	swap	r22
 38c:	60 7f       	andi	r22, 0xF0	; 240
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fc 01       	movw	r30, r24
 392:	e1 54       	subi	r30, 0x41	; 65
 394:	f1 09       	sbc	r31, r1
 396:	e4 32       	cpi	r30, 0x24	; 36
 398:	f1 05       	cpc	r31, r1
 39a:	f8 f4       	brcc	.+62     	; 0x3da <writeHigh_4pins+0x50>
 39c:	ee 58       	subi	r30, 0x8E	; 142
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__tablejump2__>
 3a4:	8b b3       	in	r24, 0x1b	; 27
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	8b bb       	out	0x1b, r24	; 27
 3aa:	8b b3       	in	r24, 0x1b	; 27
 3ac:	68 2b       	or	r22, r24
 3ae:	6b bb       	out	0x1b, r22	; 27
 3b0:	08 95       	ret
 3b2:	88 b3       	in	r24, 0x18	; 24
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	88 b3       	in	r24, 0x18	; 24
 3ba:	68 2b       	or	r22, r24
 3bc:	68 bb       	out	0x18, r22	; 24
 3be:	08 95       	ret
 3c0:	85 b3       	in	r24, 0x15	; 21
 3c2:	8f 70       	andi	r24, 0x0F	; 15
 3c4:	85 bb       	out	0x15, r24	; 21
 3c6:	85 b3       	in	r24, 0x15	; 21
 3c8:	68 2b       	or	r22, r24
 3ca:	65 bb       	out	0x15, r22	; 21
 3cc:	08 95       	ret
 3ce:	82 b3       	in	r24, 0x12	; 18
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	82 bb       	out	0x12, r24	; 18
 3d4:	82 b3       	in	r24, 0x12	; 18
 3d6:	68 2b       	or	r22, r24
 3d8:	62 bb       	out	0x12, r22	; 18
 3da:	08 95       	ret

000003dc <clearBit>:
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	e1 54       	subi	r30, 0x41	; 65
 3e2:	f1 09       	sbc	r31, r1
 3e4:	e4 32       	cpi	r30, 0x24	; 36
 3e6:	f1 05       	cpc	r31, r1
 3e8:	98 f5       	brcc	.+102    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3ea:	ea 56       	subi	r30, 0x6A	; 106
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__tablejump2__>
 3f2:	2b b3       	in	r18, 0x1b	; 27
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <clearBit+0x22>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <clearBit+0x1e>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	8b bb       	out	0x1b, r24	; 27
 408:	08 95       	ret
 40a:	28 b3       	in	r18, 0x18	; 24
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	82 23       	and	r24, r18
 41e:	88 bb       	out	0x18, r24	; 24
 420:	08 95       	ret
 422:	25 b3       	in	r18, 0x15	; 21
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	80 95       	com	r24
 434:	82 23       	and	r24, r18
 436:	85 bb       	out	0x15, r24	; 21
 438:	08 95       	ret
 43a:	22 b3       	in	r18, 0x12	; 18
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	80 95       	com	r24
 44c:	82 23       	and	r24, r18
 44e:	82 bb       	out	0x12, r24	; 18
 450:	08 95       	ret

00000452 <readBit>:
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	fc 01       	movw	r30, r24
 456:	e1 54       	subi	r30, 0x41	; 65
 458:	f1 09       	sbc	r31, r1
 45a:	e4 32       	cpi	r30, 0x24	; 36
 45c:	f1 05       	cpc	r31, r1
 45e:	08 f0       	brcs	.+2      	; 0x462 <readBit+0x10>
 460:	54 c0       	rjmp	.+168    	; 0x50a <readBit+0xb8>
 462:	e6 54       	subi	r30, 0x46	; 70
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__tablejump2__>
 46a:	49 b3       	in	r20, 0x19	; 25
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9c 01       	movw	r18, r24
 472:	06 2e       	mov	r0, r22
 474:	02 c0       	rjmp	.+4      	; 0x47a <readBit+0x28>
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <readBit+0x24>
 47e:	84 2f       	mov	r24, r20
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	82 23       	and	r24, r18
 484:	93 23       	and	r25, r19
 486:	02 c0       	rjmp	.+4      	; 0x48c <readBit+0x3a>
 488:	95 95       	asr	r25
 48a:	87 95       	ror	r24
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <readBit+0x36>
 490:	08 95       	ret
 492:	46 b3       	in	r20, 0x16	; 22
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	9c 01       	movw	r18, r24
 49a:	06 2e       	mov	r0, r22
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <readBit+0x50>
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <readBit+0x4c>
 4a6:	84 2f       	mov	r24, r20
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	82 23       	and	r24, r18
 4ac:	93 23       	and	r25, r19
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <readBit+0x62>
 4b0:	95 95       	asr	r25
 4b2:	87 95       	ror	r24
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <readBit+0x5e>
 4b8:	08 95       	ret
 4ba:	43 b3       	in	r20, 0x13	; 19
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	9c 01       	movw	r18, r24
 4c2:	06 2e       	mov	r0, r22
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <readBit+0x78>
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <readBit+0x74>
 4ce:	84 2f       	mov	r24, r20
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	82 23       	and	r24, r18
 4d4:	93 23       	and	r25, r19
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <readBit+0x8a>
 4d8:	95 95       	asr	r25
 4da:	87 95       	ror	r24
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <readBit+0x86>
 4e0:	08 95       	ret
 4e2:	40 b3       	in	r20, 0x10	; 16
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	9c 01       	movw	r18, r24
 4ea:	06 2e       	mov	r0, r22
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <readBit+0xa0>
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <readBit+0x9c>
 4f6:	84 2f       	mov	r24, r20
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	82 23       	and	r24, r18
 4fc:	93 23       	and	r25, r19
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <readBit+0xb2>
 500:	95 95       	asr	r25
 502:	87 95       	ror	r24
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <readBit+0xae>
 508:	08 95       	ret
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret

0000050e <pullUpConnect>:

void pullUpConnect(char port , int bitNumber , char enable)
{
	if (enable == '1')
 50e:	41 33       	cpi	r20, 0x31	; 49
 510:	11 f4       	brne	.+4      	; 0x516 <pullUpConnect+0x8>
	{
		enable = 1;
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	01 c0       	rjmp	.+2      	; 0x518 <pullUpConnect+0xa>
	}
	else
	{
		enable = 0;
 516:	20 e0       	ldi	r18, 0x00	; 0
	}
	switch(port)
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	e1 54       	subi	r30, 0x41	; 65
 51e:	f1 09       	sbc	r31, r1
 520:	e4 32       	cpi	r30, 0x24	; 36
 522:	f1 05       	cpc	r31, r1
 524:	08 f0       	brcs	.+2      	; 0x528 <pullUpConnect+0x1a>
 526:	67 c0       	rjmp	.+206    	; 0x5f6 <pullUpConnect+0xe8>
 528:	e2 52       	subi	r30, 0x22	; 34
 52a:	ff 4f       	sbci	r31, 0xFF	; 255
 52c:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__tablejump2__>
	{
		case 'A':
		case 'a':
			if (enable)
 530:	22 23       	and	r18, r18
 532:	59 f0       	breq	.+22     	; 0x54a <pullUpConnect+0x3c>
			{
				PORTA |= (1<<bitNumber);
 534:	2b b3       	in	r18, 0x1b	; 27
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <pullUpConnect+0x32>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <pullUpConnect+0x2e>
 544:	82 2b       	or	r24, r18
 546:	8b bb       	out	0x1b, r24	; 27
 548:	08 95       	ret
			}
			else
			{
				PORTA &= ~(1<<bitNumber);
 54a:	2b b3       	in	r18, 0x1b	; 27
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <pullUpConnect+0x48>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <pullUpConnect+0x44>
 55a:	80 95       	com	r24
 55c:	82 23       	and	r24, r18
 55e:	8b bb       	out	0x1b, r24	; 27
 560:	08 95       	ret
			}
		break;
		
		case 'B':
		case 'b':
			if (enable)
 562:	22 23       	and	r18, r18
 564:	59 f0       	breq	.+22     	; 0x57c <pullUpConnect+0x6e>
			{
				PORTB |= (1<<bitNumber);
 566:	28 b3       	in	r18, 0x18	; 24
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <pullUpConnect+0x64>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <pullUpConnect+0x60>
 576:	82 2b       	or	r24, r18
 578:	88 bb       	out	0x18, r24	; 24
 57a:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<<bitNumber);
 57c:	28 b3       	in	r18, 0x18	; 24
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <pullUpConnect+0x7a>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <pullUpConnect+0x76>
 58c:	80 95       	com	r24
 58e:	82 23       	and	r24, r18
 590:	88 bb       	out	0x18, r24	; 24
 592:	08 95       	ret
			}
		break;
		
		case 'C':
		case 'c':
			if (enable)
 594:	22 23       	and	r18, r18
 596:	59 f0       	breq	.+22     	; 0x5ae <pullUpConnect+0xa0>
			{
				PORTC |= (1<<bitNumber);
 598:	25 b3       	in	r18, 0x15	; 21
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <pullUpConnect+0x96>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <pullUpConnect+0x92>
 5a8:	82 2b       	or	r24, r18
 5aa:	85 bb       	out	0x15, r24	; 21
 5ac:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<<bitNumber);
 5ae:	25 b3       	in	r18, 0x15	; 21
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <pullUpConnect+0xac>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <pullUpConnect+0xa8>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	85 bb       	out	0x15, r24	; 21
 5c4:	08 95       	ret
			}
		break;
		
		case 'D':
		case 'd':
			if (enable)
 5c6:	22 23       	and	r18, r18
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <pullUpConnect+0xd2>
			{
				PORTD |= (1<<bitNumber);
 5ca:	22 b3       	in	r18, 0x12	; 18
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <pullUpConnect+0xc8>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <pullUpConnect+0xc4>
 5da:	82 2b       	or	r24, r18
 5dc:	82 bb       	out	0x12, r24	; 18
 5de:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<<bitNumber);
 5e0:	22 b3       	in	r18, 0x12	; 18
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <pullUpConnect+0xde>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <pullUpConnect+0xda>
 5f0:	80 95       	com	r24
 5f2:	82 23       	and	r24, r18
 5f4:	82 bb       	out	0x12, r24	; 18
 5f6:	08 95       	ret

000005f8 <keypadInitialization>:
 */ 
#define connected_port 'D'
#include "DIO_Module.h"

void keypadInitialization()
{
 5f8:	0f 93       	push	r16
 5fa:	1f 93       	push	r17
 5fc:	cf 93       	push	r28
	char i ;
	//make first 4 pins output pins
	for (i = 0 ; i<4 ; i++)
 5fe:	c0 e0       	ldi	r28, 0x00	; 0
 600:	07 c0       	rjmp	.+14     	; 0x610 <keypadInitialization+0x18>
	{
		setBitDirection(connected_port,(int)i , '1');
 602:	6c 2f       	mov	r22, r28
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	41 e3       	ldi	r20, 0x31	; 49
 608:	84 e4       	ldi	r24, 0x44	; 68
 60a:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>

void keypadInitialization()
{
	char i ;
	//make first 4 pins output pins
	for (i = 0 ; i<4 ; i++)
 60e:	cf 5f       	subi	r28, 0xFF	; 255
 610:	c4 30       	cpi	r28, 0x04	; 4
 612:	b8 f3       	brcs	.-18     	; 0x602 <keypadInitialization+0xa>
 614:	c4 e0       	ldi	r28, 0x04	; 4
 616:	0d c0       	rjmp	.+26     	; 0x632 <keypadInitialization+0x3a>
		setBitDirection(connected_port,(int)i , '1');
	}
	//make last 4 pins input pins and enable internal pull up
	for (i = 4 ; i<8 ; i++)
	{
		setBitDirection(connected_port,(int)i , '0');
 618:	0c 2f       	mov	r16, r28
 61a:	10 e0       	ldi	r17, 0x00	; 0
 61c:	40 e3       	ldi	r20, 0x30	; 48
 61e:	b8 01       	movw	r22, r16
 620:	84 e4       	ldi	r24, 0x44	; 68
 622:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
		pullUpConnect(connected_port,(int)i , '1');
 626:	41 e3       	ldi	r20, 0x31	; 49
 628:	b8 01       	movw	r22, r16
 62a:	84 e4       	ldi	r24, 0x44	; 68
 62c:	0e 94 87 02 	call	0x50e	; 0x50e <pullUpConnect>
	for (i = 0 ; i<4 ; i++)
	{
		setBitDirection(connected_port,(int)i , '1');
	}
	//make last 4 pins input pins and enable internal pull up
	for (i = 4 ; i<8 ; i++)
 630:	cf 5f       	subi	r28, 0xFF	; 255
 632:	c8 30       	cpi	r28, 0x08	; 8
 634:	88 f3       	brcs	.-30     	; 0x618 <keypadInitialization+0x20>
	{
		setBitDirection(connected_port,(int)i , '0');
		pullUpConnect(connected_port,(int)i , '1');
	}
}
 636:	cf 91       	pop	r28
 638:	1f 91       	pop	r17
 63a:	0f 91       	pop	r16
 63c:	08 95       	ret

0000063e <keypadRead>:

unsigned char keypadRead()
{
 63e:	bf 92       	push	r11
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	60 97       	sbiw	r28, 0x10	; 16
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
	{'1','2','3','-'},
	{'c','0','=','+'}
     };
	
	*/
	char arr[4][4] = {{'7','8','9','/'},
 660:	80 e1       	ldi	r24, 0x10	; 16
 662:	e0 e6       	ldi	r30, 0x60	; 96
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	de 01       	movw	r26, r28
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	01 90       	ld	r0, Z+
 66c:	0d 92       	st	X+, r0
 66e:	8a 95       	dec	r24
 670:	e1 f7       	brne	.-8      	; 0x66a <keypadRead+0x2c>
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'c','0','=','+'}
};
	char row , col , val = 'Z';			  
 672:	0f 2e       	mov	r0, r31
 674:	fa e5       	ldi	r31, 0x5A	; 90
 676:	bf 2e       	mov	r11, r31
 678:	f0 2d       	mov	r31, r0
    for (row = 0 ; row < 4 ; row ++)
 67a:	00 e0       	ldi	r16, 0x00	; 0
 67c:	3c c0       	rjmp	.+120    	; 0x6f6 <keypadRead+0xb8>
    {
		setBit(connected_port,0);
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	84 e4       	ldi	r24, 0x44	; 68
 684:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		setBit(connected_port,1);
 688:	61 e0       	ldi	r22, 0x01	; 1
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	84 e4       	ldi	r24, 0x44	; 68
 68e:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		setBit(connected_port,2);
 692:	62 e0       	ldi	r22, 0x02	; 2
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	84 e4       	ldi	r24, 0x44	; 68
 698:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		setBit(connected_port,3);
 69c:	63 e0       	ldi	r22, 0x03	; 3
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	84 e4       	ldi	r24, 0x44	; 68
 6a2:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		clearBit(connected_port,(int)row);
 6a6:	c0 2e       	mov	r12, r16
 6a8:	d1 2c       	mov	r13, r1
 6aa:	b6 01       	movw	r22, r12
 6ac:	84 e4       	ldi	r24, 0x44	; 68
 6ae:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
		for (col = 0 ; col < 4 ; col++)
 6b2:	10 e0       	ldi	r17, 0x00	; 0
 6b4:	1a c0       	rjmp	.+52     	; 0x6ea <keypadRead+0xac>
		{
			if (readBit(connected_port,(col+4)) == 0)
 6b6:	e1 2e       	mov	r14, r17
 6b8:	f1 2c       	mov	r15, r1
 6ba:	b7 01       	movw	r22, r14
 6bc:	6c 5f       	subi	r22, 0xFC	; 252
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	84 e4       	ldi	r24, 0x44	; 68
 6c2:	0e 94 29 02 	call	0x452	; 0x452 <readBit>
 6c6:	81 11       	cpse	r24, r1
 6c8:	0f c0       	rjmp	.+30     	; 0x6e8 <keypadRead+0xaa>
			{
				val = arr[row][col];
 6ca:	cc 0c       	add	r12, r12
 6cc:	dd 1c       	adc	r13, r13
 6ce:	cc 0c       	add	r12, r12
 6d0:	dd 1c       	adc	r13, r13
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	8c 0f       	add	r24, r28
 6d8:	9d 1f       	adc	r25, r29
 6da:	c8 0e       	add	r12, r24
 6dc:	d9 1e       	adc	r13, r25
 6de:	f6 01       	movw	r30, r12
 6e0:	ee 0d       	add	r30, r14
 6e2:	ff 1d       	adc	r31, r15
 6e4:	b0 80       	ld	r11, Z
				break;
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <keypadRead+0xb0>
		setBit(connected_port,0);
		setBit(connected_port,1);
		setBit(connected_port,2);
		setBit(connected_port,3);
		clearBit(connected_port,(int)row);
		for (col = 0 ; col < 4 ; col++)
 6e8:	1f 5f       	subi	r17, 0xFF	; 255
 6ea:	14 30       	cpi	r17, 0x04	; 4
 6ec:	20 f3       	brcs	.-56     	; 0x6b6 <keypadRead+0x78>
			{
				val = arr[row][col];
				break;
			}
		}
		if (val != 'Z')
 6ee:	9a e5       	ldi	r25, 0x5A	; 90
 6f0:	b9 12       	cpse	r11, r25
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <keypadRead+0xbc>
	{'4','5','6','*'},
	{'1','2','3','-'},
	{'c','0','=','+'}
};
	char row , col , val = 'Z';			  
    for (row = 0 ; row < 4 ; row ++)
 6f4:	0f 5f       	subi	r16, 0xFF	; 255
 6f6:	04 30       	cpi	r16, 0x04	; 4
 6f8:	10 f2       	brcs	.-124    	; 0x67e <keypadRead+0x40>
		{
			break;
		}	
    }
	return val;
 6fa:	8b 2d       	mov	r24, r11
 6fc:	60 96       	adiw	r28, 0x10	; 16
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	1f 91       	pop	r17
 70e:	0f 91       	pop	r16
 710:	ff 90       	pop	r15
 712:	ef 90       	pop	r14
 714:	df 90       	pop	r13
 716:	cf 90       	pop	r12
 718:	bf 90       	pop	r11
 71a:	08 95       	ret

0000071c <send_pulse>:
	}
	else
	{
		address = 0xC0 + column -1;
	}
	LCD_sendCommand(address);
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	82 e4       	ldi	r24, 0x42	; 66
 722:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
 726:	8f e9       	ldi	r24, 0x9F	; 159
 728:	9f e0       	ldi	r25, 0x0F	; 15
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <send_pulse+0xe>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <send_pulse+0x14>
 730:	00 00       	nop
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	82 e4       	ldi	r24, 0x42	; 66
 738:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
 73c:	8f e9       	ldi	r24, 0x9F	; 159
 73e:	9f e0       	ldi	r25, 0x0F	; 15
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <send_pulse+0x24>
 744:	00 c0       	rjmp	.+0      	; 0x746 <send_pulse+0x2a>
 746:	00 00       	nop
 748:	08 95       	ret

0000074a <LCD_sendCommand>:
 74a:	cf 93       	push	r28
 74c:	c8 2f       	mov	r28, r24
 74e:	68 2f       	mov	r22, r24
 750:	62 95       	swap	r22
 752:	6f 70       	andi	r22, 0x0F	; 15
 754:	81 e4       	ldi	r24, 0x41	; 65
 756:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
 75a:	61 e0       	ldi	r22, 0x01	; 1
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	82 e4       	ldi	r24, 0x42	; 66
 760:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
 764:	0e 94 8e 03 	call	0x71c	; 0x71c <send_pulse>
 768:	8f ec       	ldi	r24, 0xCF	; 207
 76a:	97 e0       	ldi	r25, 0x07	; 7
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <LCD_sendCommand+0x22>
 770:	00 c0       	rjmp	.+0      	; 0x772 <LCD_sendCommand+0x28>
 772:	00 00       	nop
 774:	6c 2f       	mov	r22, r28
 776:	81 e4       	ldi	r24, 0x41	; 65
 778:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	82 e4       	ldi	r24, 0x42	; 66
 782:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
 786:	0e 94 8e 03 	call	0x71c	; 0x71c <send_pulse>
 78a:	8f ec       	ldi	r24, 0xCF	; 207
 78c:	97 e0       	ldi	r25, 0x07	; 7
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	f1 f7       	brne	.-4      	; 0x78e <LCD_sendCommand+0x44>
 792:	00 c0       	rjmp	.+0      	; 0x794 <LCD_sendCommand+0x4a>
 794:	00 00       	nop
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <LCD_Initialization>:
 79a:	2f ef       	ldi	r18, 0xFF	; 255
 79c:	81 ee       	ldi	r24, 0xE1	; 225
 79e:	94 e0       	ldi	r25, 0x04	; 4
 7a0:	21 50       	subi	r18, 0x01	; 1
 7a2:	80 40       	sbci	r24, 0x00	; 0
 7a4:	90 40       	sbci	r25, 0x00	; 0
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <LCD_Initialization+0x6>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <LCD_Initialization+0x10>
 7aa:	00 00       	nop
 7ac:	41 e3       	ldi	r20, 0x31	; 49
 7ae:	64 e0       	ldi	r22, 0x04	; 4
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	81 e4       	ldi	r24, 0x41	; 65
 7b4:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
 7b8:	41 e3       	ldi	r20, 0x31	; 49
 7ba:	65 e0       	ldi	r22, 0x05	; 5
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	81 e4       	ldi	r24, 0x41	; 65
 7c0:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
 7c4:	41 e3       	ldi	r20, 0x31	; 49
 7c6:	66 e0       	ldi	r22, 0x06	; 6
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	81 e4       	ldi	r24, 0x41	; 65
 7cc:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
 7d0:	41 e3       	ldi	r20, 0x31	; 49
 7d2:	67 e0       	ldi	r22, 0x07	; 7
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	81 e4       	ldi	r24, 0x41	; 65
 7d8:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
 7dc:	41 e3       	ldi	r20, 0x31	; 49
 7de:	61 e0       	ldi	r22, 0x01	; 1
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	82 e4       	ldi	r24, 0x42	; 66
 7e4:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
 7e8:	41 e3       	ldi	r20, 0x31	; 49
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	82 e4       	ldi	r24, 0x42	; 66
 7f0:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
 7f4:	82 e0       	ldi	r24, 0x02	; 2
 7f6:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
 7fa:	8f e1       	ldi	r24, 0x1F	; 31
 7fc:	9e e4       	ldi	r25, 0x4E	; 78
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <LCD_Initialization+0x64>
 802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 804:	00 00       	nop
 806:	88 e2       	ldi	r24, 0x28	; 40
 808:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
 80c:	8f ec       	ldi	r24, 0xCF	; 207
 80e:	97 e0       	ldi	r25, 0x07	; 7
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 814:	00 c0       	rjmp	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 816:	00 00       	nop
 818:	8e e0       	ldi	r24, 0x0E	; 14
 81a:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
 81e:	8f ec       	ldi	r24, 0xCF	; 207
 820:	97 e0       	ldi	r25, 0x07	; 7
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 828:	00 00       	nop
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
 830:	8f e1       	ldi	r24, 0x1F	; 31
 832:	9e e4       	ldi	r25, 0x4E	; 78
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 838:	00 c0       	rjmp	.+0      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 83a:	00 00       	nop
 83c:	86 e0       	ldi	r24, 0x06	; 6
 83e:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
 842:	08 95       	ret

00000844 <LCD_printCharacter>:
 844:	cf 93       	push	r28
 846:	c8 2f       	mov	r28, r24
 848:	68 2f       	mov	r22, r24
 84a:	62 95       	swap	r22
 84c:	6f 70       	andi	r22, 0x0F	; 15
 84e:	81 e4       	ldi	r24, 0x41	; 65
 850:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
 854:	61 e0       	ldi	r22, 0x01	; 1
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	82 e4       	ldi	r24, 0x42	; 66
 85a:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
 85e:	0e 94 8e 03 	call	0x71c	; 0x71c <send_pulse>
 862:	6c 2f       	mov	r22, r28
 864:	81 e4       	ldi	r24, 0x41	; 65
 866:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
 86a:	61 e0       	ldi	r22, 0x01	; 1
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	82 e4       	ldi	r24, 0x42	; 66
 870:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
 874:	0e 94 8e 03 	call	0x71c	; 0x71c <send_pulse>
 878:	8f ec       	ldi	r24, 0xCF	; 207
 87a:	97 e0       	ldi	r25, 0x07	; 7
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	f1 f7       	brne	.-4      	; 0x87c <__stack+0x1d>
 880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
 882:	00 00       	nop
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <clearScreen>:
}
void clearScreen()
{
	LCD_sendCommand(0x01);
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 88e:	8f e1       	ldi	r24, 0x1F	; 31
 890:	9e e4       	ldi	r25, 0x4E	; 78
 892:	01 97       	sbiw	r24, 0x01	; 1
 894:	f1 f7       	brne	.-4      	; 0x892 <clearScreen+0xa>
 896:	00 c0       	rjmp	.+0      	; 0x898 <clearScreen+0x10>
 898:	00 00       	nop
 89a:	08 95       	ret

0000089c <main>:
#include "LCD.h"
#include "keypad.h"
int main(void)
{
    /* Replace with your application code */
	LCD_Initialization();
 89c:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_Initialization>
	keypadInitialization();
 8a0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <keypadInitialization>
	char x ;
    while (1) 
    {
		x = keypadRead();
 8a4:	0e 94 1f 03 	call	0x63e	; 0x63e <keypadRead>
 8a8:	c8 2f       	mov	r28, r24
		if (x == 'c')
 8aa:	83 36       	cpi	r24, 0x63	; 99
 8ac:	11 f4       	brne	.+4      	; 0x8b2 <main+0x16>
		{
			clearScreen();
 8ae:	0e 94 44 04 	call	0x888	; 0x888 <clearScreen>
		}
		if (x != 'Z' && x != 'c')
 8b2:	ca 35       	cpi	r28, 0x5A	; 90
 8b4:	29 f0       	breq	.+10     	; 0x8c0 <main+0x24>
 8b6:	c3 36       	cpi	r28, 0x63	; 99
 8b8:	19 f0       	breq	.+6      	; 0x8c0 <main+0x24>
		{
			LCD_printCharacter(x);
 8ba:	8c 2f       	mov	r24, r28
 8bc:	0e 94 22 04 	call	0x844	; 0x844 <LCD_printCharacter>
 8c0:	2f ef       	ldi	r18, 0xFF	; 255
 8c2:	81 ee       	ldi	r24, 0xE1	; 225
 8c4:	94 e0       	ldi	r25, 0x04	; 4
 8c6:	21 50       	subi	r18, 0x01	; 1
 8c8:	80 40       	sbci	r24, 0x00	; 0
 8ca:	90 40       	sbci	r25, 0x00	; 0
 8cc:	e1 f7       	brne	.-8      	; 0x8c6 <main+0x2a>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <main+0x34>
 8d0:	00 00       	nop
 8d2:	e8 cf       	rjmp	.-48     	; 0x8a4 <main+0x8>

000008d4 <__tablejump2__>:
 8d4:	ee 0f       	add	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	05 90       	lpm	r0, Z+
 8da:	f4 91       	lpm	r31, Z
 8dc:	e0 2d       	mov	r30, r0
 8de:	09 94       	ijmp

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>
