
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000a9a  00000b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001197  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00001e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c5  00000000  00000000  000025d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a0  00000000  00000000  00003180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dfc  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	e2 00       	.word	0x00e2	; ????
  56:	fb 00       	.word	0x00fb	; ????
  58:	14 01       	movw	r2, r8
  5a:	2d 01       	movw	r4, r26
  5c:	45 01       	movw	r8, r10
  5e:	45 01       	movw	r8, r10
  60:	45 01       	movw	r8, r10
  62:	45 01       	movw	r8, r10
  64:	45 01       	movw	r8, r10
  66:	45 01       	movw	r8, r10
  68:	45 01       	movw	r8, r10
  6a:	45 01       	movw	r8, r10
  6c:	45 01       	movw	r8, r10
  6e:	45 01       	movw	r8, r10
  70:	45 01       	movw	r8, r10
  72:	45 01       	movw	r8, r10
  74:	45 01       	movw	r8, r10
  76:	45 01       	movw	r8, r10
  78:	45 01       	movw	r8, r10
  7a:	45 01       	movw	r8, r10
  7c:	45 01       	movw	r8, r10
  7e:	45 01       	movw	r8, r10
  80:	45 01       	movw	r8, r10
  82:	45 01       	movw	r8, r10
  84:	45 01       	movw	r8, r10
  86:	45 01       	movw	r8, r10
  88:	45 01       	movw	r8, r10
  8a:	45 01       	movw	r8, r10
  8c:	45 01       	movw	r8, r10
  8e:	45 01       	movw	r8, r10
  90:	45 01       	movw	r8, r10
  92:	45 01       	movw	r8, r10
  94:	e2 00       	.word	0x00e2	; ????
  96:	fb 00       	.word	0x00fb	; ????
  98:	14 01       	movw	r2, r8
  9a:	2d 01       	movw	r4, r26
  9c:	51 01       	movw	r10, r2
  9e:	5c 01       	movw	r10, r24
  a0:	67 01       	movw	r12, r14
  a2:	72 01       	movw	r14, r4
  a4:	7c 01       	movw	r14, r24
  a6:	7c 01       	movw	r14, r24
  a8:	7c 01       	movw	r14, r24
  aa:	7c 01       	movw	r14, r24
  ac:	7c 01       	movw	r14, r24
  ae:	7c 01       	movw	r14, r24
  b0:	7c 01       	movw	r14, r24
  b2:	7c 01       	movw	r14, r24
  b4:	7c 01       	movw	r14, r24
  b6:	7c 01       	movw	r14, r24
  b8:	7c 01       	movw	r14, r24
  ba:	7c 01       	movw	r14, r24
  bc:	7c 01       	movw	r14, r24
  be:	7c 01       	movw	r14, r24
  c0:	7c 01       	movw	r14, r24
  c2:	7c 01       	movw	r14, r24
  c4:	7c 01       	movw	r14, r24
  c6:	7c 01       	movw	r14, r24
  c8:	7c 01       	movw	r14, r24
  ca:	7c 01       	movw	r14, r24
  cc:	7c 01       	movw	r14, r24
  ce:	7c 01       	movw	r14, r24
  d0:	7c 01       	movw	r14, r24
  d2:	7c 01       	movw	r14, r24
  d4:	7c 01       	movw	r14, r24
  d6:	7c 01       	movw	r14, r24
  d8:	7c 01       	movw	r14, r24
  da:	7c 01       	movw	r14, r24
  dc:	51 01       	movw	r10, r2
  de:	5c 01       	movw	r10, r24
  e0:	67 01       	movw	r12, r14
  e2:	72 01       	movw	r14, r4
  e4:	8a 01       	movw	r16, r20
  e6:	91 01       	movw	r18, r2
  e8:	98 01       	movw	r18, r16
  ea:	9f 01       	movw	r18, r30
  ec:	a5 01       	movw	r20, r10
  ee:	a5 01       	movw	r20, r10
  f0:	a5 01       	movw	r20, r10
  f2:	a5 01       	movw	r20, r10
  f4:	a5 01       	movw	r20, r10
  f6:	a5 01       	movw	r20, r10
  f8:	a5 01       	movw	r20, r10
  fa:	a5 01       	movw	r20, r10
  fc:	a5 01       	movw	r20, r10
  fe:	a5 01       	movw	r20, r10
 100:	a5 01       	movw	r20, r10
 102:	a5 01       	movw	r20, r10
 104:	a5 01       	movw	r20, r10
 106:	a5 01       	movw	r20, r10
 108:	a5 01       	movw	r20, r10
 10a:	a5 01       	movw	r20, r10
 10c:	a5 01       	movw	r20, r10
 10e:	a5 01       	movw	r20, r10
 110:	a5 01       	movw	r20, r10
 112:	a5 01       	movw	r20, r10
 114:	a5 01       	movw	r20, r10
 116:	a5 01       	movw	r20, r10
 118:	a5 01       	movw	r20, r10
 11a:	a5 01       	movw	r20, r10
 11c:	a5 01       	movw	r20, r10
 11e:	a5 01       	movw	r20, r10
 120:	a5 01       	movw	r20, r10
 122:	a5 01       	movw	r20, r10
 124:	8a 01       	movw	r16, r20
 126:	91 01       	movw	r18, r2
 128:	98 01       	movw	r18, r16
 12a:	9f 01       	movw	r18, r30
 12c:	b1 01       	movw	r22, r2
 12e:	bd 01       	movw	r22, r26
 130:	c9 01       	movw	r24, r18
 132:	d5 01       	movw	r26, r10
 134:	e0 01       	movw	r28, r0
 136:	e0 01       	movw	r28, r0
 138:	e0 01       	movw	r28, r0
 13a:	e0 01       	movw	r28, r0
 13c:	e0 01       	movw	r28, r0
 13e:	e0 01       	movw	r28, r0
 140:	e0 01       	movw	r28, r0
 142:	e0 01       	movw	r28, r0
 144:	e0 01       	movw	r28, r0
 146:	e0 01       	movw	r28, r0
 148:	e0 01       	movw	r28, r0
 14a:	e0 01       	movw	r28, r0
 14c:	e0 01       	movw	r28, r0
 14e:	e0 01       	movw	r28, r0
 150:	e0 01       	movw	r28, r0
 152:	e0 01       	movw	r28, r0
 154:	e0 01       	movw	r28, r0
 156:	e0 01       	movw	r28, r0
 158:	e0 01       	movw	r28, r0
 15a:	e0 01       	movw	r28, r0
 15c:	e0 01       	movw	r28, r0
 15e:	e0 01       	movw	r28, r0
 160:	e0 01       	movw	r28, r0
 162:	e0 01       	movw	r28, r0
 164:	e0 01       	movw	r28, r0
 166:	e0 01       	movw	r28, r0
 168:	e0 01       	movw	r28, r0
 16a:	e0 01       	movw	r28, r0
 16c:	b1 01       	movw	r22, r2
 16e:	bd 01       	movw	r22, r26
 170:	c9 01       	movw	r24, r18
 172:	d5 01       	movw	r26, r10

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	ea e9       	ldi	r30, 0x9A	; 154
 188:	fa e0       	ldi	r31, 0x0A	; 10
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	ac 37       	cpi	r26, 0x7C	; 124
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>
 196:	0e 94 b8 02 	call	0x570	; 0x570 <main>
 19a:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <_exit>

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <setBitDirection>:
		break;
		
		case 'D':
		case 'd':
			PORTD &=0xF0;
			PORTD |=value;
 1a2:	41 33       	cpi	r20, 0x31	; 49
 1a4:	11 f4       	brne	.+4      	; 0x1aa <setBitDirection+0x8>
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <setBitDirection+0xa>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	e1 54       	subi	r30, 0x41	; 65
 1b2:	f1 09       	sbc	r31, r1
 1b4:	e4 32       	cpi	r30, 0x24	; 36
 1b6:	f1 05       	cpc	r31, r1
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <setBitDirection+0x1a>
 1ba:	67 c0       	rjmp	.+206    	; 0x28a <setBitDirection+0xe8>
 1bc:	e6 5d       	subi	r30, 0xD6	; 214
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__tablejump2__>
 1c4:	22 23       	and	r18, r18
 1c6:	59 f0       	breq	.+22     	; 0x1de <setBitDirection+0x3c>
 1c8:	2a b3       	in	r18, 0x1a	; 26
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <setBitDirection+0x32>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <setBitDirection+0x2e>
 1d8:	82 2b       	or	r24, r18
 1da:	8a bb       	out	0x1a, r24	; 26
 1dc:	08 95       	ret
 1de:	2a b3       	in	r18, 0x1a	; 26
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <setBitDirection+0x48>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <setBitDirection+0x44>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	8a bb       	out	0x1a, r24	; 26
 1f4:	08 95       	ret
 1f6:	22 23       	and	r18, r18
 1f8:	59 f0       	breq	.+22     	; 0x210 <setBitDirection+0x6e>
 1fa:	27 b3       	in	r18, 0x17	; 23
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <setBitDirection+0x64>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <setBitDirection+0x60>
 20a:	82 2b       	or	r24, r18
 20c:	87 bb       	out	0x17, r24	; 23
 20e:	08 95       	ret
 210:	27 b3       	in	r18, 0x17	; 23
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <setBitDirection+0x7a>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <setBitDirection+0x76>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	87 bb       	out	0x17, r24	; 23
 226:	08 95       	ret
 228:	22 23       	and	r18, r18
 22a:	59 f0       	breq	.+22     	; 0x242 <setBitDirection+0xa0>
 22c:	24 b3       	in	r18, 0x14	; 20
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <setBitDirection+0x96>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <setBitDirection+0x92>
 23c:	82 2b       	or	r24, r18
 23e:	84 bb       	out	0x14, r24	; 20
 240:	08 95       	ret
 242:	24 b3       	in	r18, 0x14	; 20
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <setBitDirection+0xac>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <setBitDirection+0xa8>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	84 bb       	out	0x14, r24	; 20
 258:	08 95       	ret
 25a:	22 23       	and	r18, r18
 25c:	59 f0       	breq	.+22     	; 0x274 <setBitDirection+0xd2>
 25e:	21 b3       	in	r18, 0x11	; 17
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <setBitDirection+0xc8>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <setBitDirection+0xc4>
 26e:	82 2b       	or	r24, r18
 270:	81 bb       	out	0x11, r24	; 17
 272:	08 95       	ret
 274:	21 b3       	in	r18, 0x11	; 17
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <setBitDirection+0xde>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <setBitDirection+0xda>
 284:	80 95       	com	r24
 286:	82 23       	and	r24, r18
 288:	81 bb       	out	0x11, r24	; 17
 28a:	08 95       	ret

0000028c <setBit>:
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	e1 54       	subi	r30, 0x41	; 65
 292:	f1 09       	sbc	r31, r1
 294:	e4 32       	cpi	r30, 0x24	; 36
 296:	f1 05       	cpc	r31, r1
 298:	78 f5       	brcc	.+94     	; 0x2f8 <setBit+0x6c>
 29a:	e2 5b       	subi	r30, 0xB2	; 178
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__tablejump2__>
 2a2:	2b b3       	in	r18, 0x1b	; 27
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <setBit+0x22>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <setBit+0x1e>
 2b2:	82 2b       	or	r24, r18
 2b4:	8b bb       	out	0x1b, r24	; 27
 2b6:	08 95       	ret
 2b8:	28 b3       	in	r18, 0x18	; 24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <setBit+0x38>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <setBit+0x34>
 2c8:	82 2b       	or	r24, r18
 2ca:	88 bb       	out	0x18, r24	; 24
 2cc:	08 95       	ret
 2ce:	25 b3       	in	r18, 0x15	; 21
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <setBit+0x4e>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <setBit+0x4a>
 2de:	82 2b       	or	r24, r18
 2e0:	85 bb       	out	0x15, r24	; 21
 2e2:	08 95       	ret
 2e4:	22 b3       	in	r18, 0x12	; 18
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <setBit+0x64>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <setBit+0x60>
 2f4:	82 2b       	or	r24, r18
 2f6:	82 bb       	out	0x12, r24	; 18
 2f8:	08 95       	ret

000002fa <writeHigh_4pins>:
	}
}

void writeHigh_4pins(unsigned char port,unsigned char value)
{
	value = value << 4;
 2fa:	62 95       	swap	r22
 2fc:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	e1 54       	subi	r30, 0x41	; 65
 304:	f1 09       	sbc	r31, r1
 306:	e4 32       	cpi	r30, 0x24	; 36
 308:	f1 05       	cpc	r31, r1
 30a:	f8 f4       	brcc	.+62     	; 0x34a <writeHigh_4pins+0x50>
 30c:	ee 58       	subi	r30, 0x8E	; 142
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA &= 0x0F;
 314:	8b b3       	in	r24, 0x1b	; 27
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 31a:	8b b3       	in	r24, 0x1b	; 27
 31c:	68 2b       	or	r22, r24
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB &= 0x0F;
 322:	88 b3       	in	r24, 0x18	; 24
 324:	8f 70       	andi	r24, 0x0F	; 15
 326:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 328:	88 b3       	in	r24, 0x18	; 24
 32a:	68 2b       	or	r22, r24
 32c:	68 bb       	out	0x18, r22	; 24
		break;
 32e:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC &= 0x0F;
 330:	85 b3       	in	r24, 0x15	; 21
 332:	8f 70       	andi	r24, 0x0F	; 15
 334:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 336:	85 b3       	in	r24, 0x15	; 21
 338:	68 2b       	or	r22, r24
 33a:	65 bb       	out	0x15, r22	; 21
		break;
 33c:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD &= 0x0F;
 33e:	82 b3       	in	r24, 0x12	; 18
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 344:	82 b3       	in	r24, 0x12	; 18
 346:	68 2b       	or	r22, r24
 348:	62 bb       	out	0x12, r22	; 18
 34a:	08 95       	ret

0000034c <clearBit>:
}

void clearBit(char port , int bitNumber)
{
	
	switch(port)
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	e1 54       	subi	r30, 0x41	; 65
 352:	f1 09       	sbc	r31, r1
 354:	e4 32       	cpi	r30, 0x24	; 36
 356:	f1 05       	cpc	r31, r1
 358:	98 f5       	brcc	.+102    	; 0x3c0 <clearBit+0x74>
 35a:	ea 56       	subi	r30, 0x6A	; 106
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA &= ~(1<<bitNumber);
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <clearBit+0x22>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <clearBit+0x1e>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8b bb       	out	0x1b, r24	; 27
		break;
 378:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB &= ~(1<<bitNumber);
 37a:	28 b3       	in	r18, 0x18	; 24
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <clearBit+0x3a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <clearBit+0x36>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	88 bb       	out	0x18, r24	; 24
		break;
 390:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC &= ~(1<<bitNumber);
 392:	25 b3       	in	r18, 0x15	; 21
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <clearBit+0x52>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <clearBit+0x4e>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	85 bb       	out	0x15, r24	; 21
		break;
 3a8:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD &= ~(1<<bitNumber);
 3aa:	22 b3       	in	r18, 0x12	; 18
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <clearBit+0x6a>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <clearBit+0x66>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	82 bb       	out	0x12, r24	; 18
 3c0:	08 95       	ret

000003c2 <send_pulse>:
#define CURSOR_ON_DISPLAN_ON 0x0E
#define CLEAR_SCREEN 0x01
#define ENTRY_MODE 0x06
void send_pulse()
{
	setBit(ENABEL_PORT,ENABEL_PIN);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	82 e4       	ldi	r24, 0x42	; 66
 3c8:	0e 94 46 01 	call	0x28c	; 0x28c <setBit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3cc:	8f e9       	ldi	r24, 0x9F	; 159
 3ce:	9f e0       	ldi	r25, 0x0F	; 15
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <send_pulse+0xe>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <send_pulse+0x14>
 3d6:	00 00       	nop
	_delay_ms(2);
	clearBit(ENABEL_PORT,ENABEL_PIN);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	82 e4       	ldi	r24, 0x42	; 66
 3de:	0e 94 a6 01 	call	0x34c	; 0x34c <clearBit>
 3e2:	8f e9       	ldi	r24, 0x9F	; 159
 3e4:	9f e0       	ldi	r25, 0x0F	; 15
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <send_pulse+0x24>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <send_pulse+0x2a>
 3ec:	00 00       	nop
 3ee:	08 95       	ret

000003f0 <LCD_sendCommand>:
	_delay_ms(2);
}
void LCD_sendCommand(unsigned char cmd)
{
 3f0:	cf 93       	push	r28
 3f2:	c8 2f       	mov	r28, r24
			_delay_ms(1);
			writeLow_4pins(LCD_CONNECTED_PORT,cmd);
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd>>4);
 3f4:	68 2f       	mov	r22, r24
 3f6:	62 95       	swap	r22
 3f8:	6f 70       	andi	r22, 0x0F	; 15
 3fa:	81 e4       	ldi	r24, 0x41	; 65
 3fc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	82 e4       	ldi	r24, 0x42	; 66
 406:	0e 94 a6 01 	call	0x34c	; 0x34c <clearBit>
			send_pulse();
 40a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
 40e:	8f ec       	ldi	r24, 0xCF	; 207
 410:	97 e0       	ldi	r25, 0x07	; 7
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
			_delay_ms(1);
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd);
 41a:	6c 2f       	mov	r22, r28
 41c:	81 e4       	ldi	r24, 0x41	; 65
 41e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	82 e4       	ldi	r24, 0x42	; 66
 428:	0e 94 a6 01 	call	0x34c	; 0x34c <clearBit>
			send_pulse();
 42c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
 430:	8f ec       	ldi	r24, 0xCF	; 207
 432:	97 e0       	ldi	r25, 0x07	; 7
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
		#endif
	#endif 
	_delay_ms(1);
}
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <LCD_Initialization>:
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	81 ee       	ldi	r24, 0xE1	; 225
 444:	94 e0       	ldi	r25, 0x04	; 4
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <LCD_Initialization+0x6>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_Initialization+0x10>
 450:	00 00       	nop
			setBitDirection(LCD_CONNECTED_PORT,0,'1');
			setBitDirection(LCD_CONNECTED_PORT,1,'1');
			setBitDirection(LCD_CONNECTED_PORT,2,'1');
			setBitDirection(LCD_CONNECTED_PORT,3,'1');
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			setBitDirection(LCD_CONNECTED_PORT,4,'1');
 452:	41 e3       	ldi	r20, 0x31	; 49
 454:	64 e0       	ldi	r22, 0x04	; 4
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	81 e4       	ldi	r24, 0x41	; 65
 45a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,5,'1');
 45e:	41 e3       	ldi	r20, 0x31	; 49
 460:	65 e0       	ldi	r22, 0x05	; 5
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	81 e4       	ldi	r24, 0x41	; 65
 466:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,6,'1');
 46a:	41 e3       	ldi	r20, 0x31	; 49
 46c:	66 e0       	ldi	r22, 0x06	; 6
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	81 e4       	ldi	r24, 0x41	; 65
 472:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,7,'1');
 476:	41 e3       	ldi	r20, 0x31	; 49
 478:	67 e0       	ldi	r22, 0x07	; 7
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	81 e4       	ldi	r24, 0x41	; 65
 47e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
		#else
			#warning "You must set IS_CONNECTED_TO_HIGH_PINS 0 to connect lcd to first 4-bit of any port or 1 to connect lcd to last 4-bit of any port"
		#endif
		
		setBitDirection(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN,'1');
 482:	41 e3       	ldi	r20, 0x31	; 49
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	82 e4       	ldi	r24, 0x42	; 66
 48a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
		setBitDirection(ENABEL_PORT,ENABEL_PIN,'1');
 48e:	41 e3       	ldi	r20, 0x31	; 49
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	82 e4       	ldi	r24, 0x42	; 66
 496:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <setBitDirection>
		
		LCD_sendCommand(0x02); //return home
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4a0:	8f e1       	ldi	r24, 0x1F	; 31
 4a2:	9e e4       	ldi	r25, 0x4E	; 78
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <LCD_Initialization+0x64>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <LCD_Initialization+0x6a>
 4aa:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(LCD_4BIT_MODE);//FOUR_BITS MODE
 4ac:	88 e2       	ldi	r24, 0x28	; 40
 4ae:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4b2:	8f ec       	ldi	r24, 0xCF	; 207
 4b4:	97 e0       	ldi	r25, 0x07	; 7
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <LCD_Initialization+0x76>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <LCD_Initialization+0x7c>
 4bc:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(CURSOR_ON_DISPLAN_ON);//CURSOR_ON_DISPLAN_ON
 4be:	8e e0       	ldi	r24, 0x0E	; 14
 4c0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4c4:	8f ec       	ldi	r24, 0xCF	; 207
 4c6:	97 e0       	ldi	r25, 0x07	; 7
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCD_Initialization+0x88>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCD_Initialization+0x8e>
 4ce:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(0x01);//CLEAR_SCREEN
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4d6:	8f e1       	ldi	r24, 0x1F	; 31
 4d8:	9e e4       	ldi	r25, 0x4E	; 78
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_Initialization+0x9a>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_Initialization+0xa0>
 4e0:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(ENTRY_MODE);//ENTRY_MODE
 4e2:	86 e0       	ldi	r24, 0x06	; 6
 4e4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 4e8:	08 95       	ret

000004ea <LCD_printCharacter>:
	#endif
}

void LCD_printCharacter(char character)
{
 4ea:	cf 93       	push	r28
 4ec:	c8 2f       	mov	r28, r24
			send_pulse();
			writeLow_4pins(LCD_CONNECTED_PORT,character);
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,character>>4);
 4ee:	68 2f       	mov	r22, r24
 4f0:	62 95       	swap	r22
 4f2:	6f 70       	andi	r22, 0x0F	; 15
 4f4:	81 e4       	ldi	r24, 0x41	; 65
 4f6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	82 e4       	ldi	r24, 0x42	; 66
 500:	0e 94 46 01 	call	0x28c	; 0x28c <setBit>
			send_pulse();
 504:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
			writeHigh_4pins(LCD_CONNECTED_PORT,character);
 508:	6c 2f       	mov	r22, r28
 50a:	81 e4       	ldi	r24, 0x41	; 65
 50c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	82 e4       	ldi	r24, 0x42	; 66
 516:	0e 94 46 01 	call	0x28c	; 0x28c <setBit>
			send_pulse();
 51a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <send_pulse>
 51e:	8f ec       	ldi	r24, 0xCF	; 207
 520:	97 e0       	ldi	r25, 0x07	; 7
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <LCD_printCharacter+0x38>
 526:	00 c0       	rjmp	.+0      	; 0x528 <LCD_printCharacter+0x3e>
 528:	00 00       	nop
		#endif

	#endif
	_delay_ms(1);
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <LCD_printString>:

void LCD_printString(char* ptr)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ec 01       	movw	r28, r24
	while(*ptr != 0)
 534:	03 c0       	rjmp	.+6      	; 0x53c <LCD_printString+0xe>
	{
		LCD_printCharacter(*ptr);
 536:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
		++ptr;
 53a:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(1);
}

void LCD_printString(char* ptr)
{
	while(*ptr != 0)
 53c:	88 81       	ld	r24, Y
 53e:	81 11       	cpse	r24, r1
 540:	fa cf       	rjmp	.-12     	; 0x536 <LCD_printString+0x8>
	{
		LCD_printCharacter(*ptr);
		++ptr;
	}
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <LCD_moveCursor>:
void LCD_moveCursor(char row , char column)
{
	char address;
	if (row == 1)
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	19 f4       	brne	.+6      	; 0x552 <LCD_moveCursor+0xa>
	{
		address = 0x80 + column -1;
 54c:	8f e7       	ldi	r24, 0x7F	; 127
 54e:	86 0f       	add	r24, r22
 550:	02 c0       	rjmp	.+4      	; 0x556 <LCD_moveCursor+0xe>
	}
	else
	{
		address = 0xC0 + column -1;
 552:	8f eb       	ldi	r24, 0xBF	; 191
 554:	86 0f       	add	r24, r22
	}
	LCD_sendCommand(address);
 556:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 55a:	08 95       	ret

0000055c <clearScreen>:
}
void clearScreen()
{
	LCD_sendCommand(0x01);
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LCD_sendCommand>
 562:	8f e1       	ldi	r24, 0x1F	; 31
 564:	9e e4       	ldi	r25, 0x4E	; 78
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <clearScreen+0xa>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <clearScreen+0x10>
 56c:	00 00       	nop
 56e:	08 95       	ret

00000570 <main>:
#define  F_CPU 8000000UL
#include <avr/io.h>
#include "LCD.h"
#include "macros.h"
int main(void)
{
 570:	8f 92       	push	r8
 572:	9f 92       	push	r9
 574:	af 92       	push	r10
 576:	bf 92       	push	r11
 578:	cf 92       	push	r12
 57a:	df 92       	push	r13
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
	unsigned short a,b,c,high,period,duty_cycle,frequency;
	LCD_Initialization();
 588:	0e 94 20 02 	call	0x440	; 0x440 <LCD_Initialization>
	TCCR1A = 0;
 58c:	1f bc       	out	0x2f, r1	; 47
	TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 58e:	80 e2       	ldi	r24, 0x20	; 32
 590:	88 bf       	out	0x38, r24	; 56

	TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
 592:	81 ec       	ldi	r24, 0xC1	; 193
 594:	8e bd       	out	0x2e, r24	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 596:	08 b6       	in	r0, 0x38	; 56
 598:	05 fe       	sbrs	r0, 5
 59a:	fd cf       	rjmp	.-6      	; 0x596 <main+0x26>
	a = ICR1;  		/* Take value of capture register */
 59c:	86 b5       	in	r24, 0x26	; 38
 59e:	97 b5       	in	r25, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 5a0:	20 e2       	ldi	r18, 0x20	; 32
 5a2:	28 bf       	out	0x38, r18	; 56
	
	TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 5a4:	21 e8       	ldi	r18, 0x81	; 129
 5a6:	2e bd       	out	0x2e, r18	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 5a8:	08 b6       	in	r0, 0x38	; 56
 5aa:	05 fe       	sbrs	r0, 5
 5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <main+0x38>
	b = ICR1;  		/* Take value of capture register */
 5ae:	66 b5       	in	r22, 0x26	; 38
 5b0:	77 b5       	in	r23, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 5b2:	20 e2       	ldi	r18, 0x20	; 32
 5b4:	28 bf       	out	0x38, r18	; 56
	
	TCCR1B = 0xc1;  	/* Rising edge, no prescaler ,noise canceler*/
 5b6:	21 ec       	ldi	r18, 0xC1	; 193
 5b8:	2e bd       	out	0x2e, r18	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 5ba:	08 b6       	in	r0, 0x38	; 56
 5bc:	05 fe       	sbrs	r0, 5
 5be:	fd cf       	rjmp	.-6      	; 0x5ba <main+0x4a>
	c = ICR1;  		/* Take value of capture register */
 5c0:	c6 b4       	in	r12, 0x26	; 38
 5c2:	d7 b4       	in	r13, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 5c4:	20 e2       	ldi	r18, 0x20	; 32
 5c6:	28 bf       	out	0x38, r18	; 56

	TCCR1B = 0;  		/* Stop the timer */
 5c8:	1e bc       	out	0x2e, r1	; 46
		if (a < b &&  b<c)
 5ca:	86 17       	cp	r24, r22
 5cc:	97 07       	cpc	r25, r23
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <main+0x62>
 5d0:	74 c0       	rjmp	.+232    	; 0x6ba <main+0x14a>
 5d2:	6c 15       	cp	r22, r12
 5d4:	7d 05       	cpc	r23, r13
 5d6:	08 f0       	brcs	.+2      	; 0x5da <main+0x6a>
 5d8:	70 c0       	rjmp	.+224    	; 0x6ba <main+0x14a>
		{
			high=b-a;
 5da:	68 1b       	sub	r22, r24
 5dc:	79 0b       	sbc	r23, r25
			period  = (c - a) ;
 5de:	c8 1a       	sub	r12, r24
 5e0:	d9 0a       	sbc	r13, r25
			duty_cycle =  ((float)high / period) * 100 ;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 14 04 	call	0x828	; 0x828 <__floatunsisf>
 5ea:	4b 01       	movw	r8, r22
 5ec:	5c 01       	movw	r10, r24
 5ee:	e1 2c       	mov	r14, r1
 5f0:	f1 2c       	mov	r15, r1
 5f2:	c7 01       	movw	r24, r14
 5f4:	b6 01       	movw	r22, r12
 5f6:	0e 94 14 04 	call	0x828	; 0x828 <__floatunsisf>
 5fa:	9b 01       	movw	r18, r22
 5fc:	ac 01       	movw	r20, r24
 5fe:	c5 01       	movw	r24, r10
 600:	b4 01       	movw	r22, r8
 602:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__divsf3>
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	48 ec       	ldi	r20, 0xC8	; 200
 60c:	52 e4       	ldi	r21, 0x42	; 66
 60e:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsf3>
 612:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fixunssfsi>
 616:	8b 01       	movw	r16, r22
			
			frequency = F_CPU / period;
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	72 e1       	ldi	r23, 0x12	; 18
 61c:	8a e7       	ldi	r24, 0x7A	; 122
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	a7 01       	movw	r20, r14
 622:	96 01       	movw	r18, r12
 624:	0e 94 23 05 	call	0xa46	; 0xa46 <__udivmodsi4>
 628:	79 01       	movw	r14, r18
			LCD_printString("duty:");
 62a:	80 e6       	ldi	r24, 0x60	; 96
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
			LCD_printCharacter((duty_cycle/10)+48);
 632:	ca e0       	ldi	r28, 0x0A	; 10
 634:	d0 e0       	ldi	r29, 0x00	; 0
 636:	c8 01       	movw	r24, r16
 638:	be 01       	movw	r22, r28
 63a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodhi4>
 63e:	18 2f       	mov	r17, r24
 640:	80 e3       	ldi	r24, 0x30	; 48
 642:	86 0f       	add	r24, r22
 644:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
			LCD_printCharacter((duty_cycle%10)+48);
 648:	80 e3       	ldi	r24, 0x30	; 48
 64a:	81 0f       	add	r24, r17
 64c:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
			LCD_printCharacter('%');
 650:	85 e2       	ldi	r24, 0x25	; 37
 652:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
			LCD_moveCursor(2,1);
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_moveCursor>
			LCD_printString("freq:");
 65e:	86 e6       	ldi	r24, 0x66	; 102
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
			LCD_printCharacter((frequency/1000)+48);
 666:	c7 01       	movw	r24, r14
 668:	68 ee       	ldi	r22, 0xE8	; 232
 66a:	73 e0       	ldi	r23, 0x03	; 3
 66c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodhi4>
 670:	80 e3       	ldi	r24, 0x30	; 48
 672:	86 0f       	add	r24, r22
 674:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
			LCD_printCharacter(((frequency/100)%10)+48);
 678:	c7 01       	movw	r24, r14
 67a:	64 e6       	ldi	r22, 0x64	; 100
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodhi4>
 682:	cb 01       	movw	r24, r22
 684:	be 01       	movw	r22, r28
 686:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodhi4>
 68a:	80 5d       	subi	r24, 0xD0	; 208
 68c:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
			LCD_printCharacter(((frequency/10)%10)+48);
 690:	c7 01       	movw	r24, r14
 692:	be 01       	movw	r22, r28
 694:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodhi4>
 698:	18 2f       	mov	r17, r24
 69a:	cb 01       	movw	r24, r22
 69c:	be 01       	movw	r22, r28
 69e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__udivmodhi4>
 6a2:	80 5d       	subi	r24, 0xD0	; 208
 6a4:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
			LCD_printCharacter((frequency%10)+48);
 6a8:	80 e3       	ldi	r24, 0x30	; 48
 6aa:	81 0f       	add	r24, r17
 6ac:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_printCharacter>
			LCD_printString("HZ");
 6b0:	8c e6       	ldi	r24, 0x6C	; 108
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
 6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <main+0x156>
		}
		else
		{
			clearScreen();
 6ba:	0e 94 ae 02 	call	0x55c	; 0x55c <clearScreen>
			LCD_printString("out of range");
 6be:	8f e6       	ldi	r24, 0x6F	; 111
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_printString>
		}
		TCCR1B = 0;  
 6c6:	1e bc       	out	0x2e, r1	; 46
    return 0;
}
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	df 90       	pop	r13
 6da:	cf 90       	pop	r12
 6dc:	bf 90       	pop	r11
 6de:	af 90       	pop	r10
 6e0:	9f 90       	pop	r9
 6e2:	8f 90       	pop	r8
 6e4:	08 95       	ret

000006e6 <__divsf3>:
 6e6:	0e 94 87 03 	call	0x70e	; 0x70e <__divsf3x>
 6ea:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>
 6ee:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_pscB>
 6f2:	58 f0       	brcs	.+22     	; 0x70a <__divsf3+0x24>
 6f4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscA>
 6f8:	40 f0       	brcs	.+16     	; 0x70a <__divsf3+0x24>
 6fa:	29 f4       	brne	.+10     	; 0x706 <__divsf3+0x20>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	29 f0       	breq	.+10     	; 0x70a <__divsf3+0x24>
 700:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 704:	51 11       	cpse	r21, r1
 706:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
 70a:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>

0000070e <__divsf3x>:
 70e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_split3>
 712:	68 f3       	brcs	.-38     	; 0x6ee <__divsf3+0x8>

00000714 <__divsf3_pse>:
 714:	99 23       	and	r25, r25
 716:	b1 f3       	breq	.-20     	; 0x704 <__divsf3+0x1e>
 718:	55 23       	and	r21, r21
 71a:	91 f3       	breq	.-28     	; 0x700 <__divsf3+0x1a>
 71c:	95 1b       	sub	r25, r21
 71e:	55 0b       	sbc	r21, r21
 720:	bb 27       	eor	r27, r27
 722:	aa 27       	eor	r26, r26
 724:	62 17       	cp	r22, r18
 726:	73 07       	cpc	r23, r19
 728:	84 07       	cpc	r24, r20
 72a:	38 f0       	brcs	.+14     	; 0x73a <__divsf3_pse+0x26>
 72c:	9f 5f       	subi	r25, 0xFF	; 255
 72e:	5f 4f       	sbci	r21, 0xFF	; 255
 730:	22 0f       	add	r18, r18
 732:	33 1f       	adc	r19, r19
 734:	44 1f       	adc	r20, r20
 736:	aa 1f       	adc	r26, r26
 738:	a9 f3       	breq	.-22     	; 0x724 <__divsf3_pse+0x10>
 73a:	35 d0       	rcall	.+106    	; 0x7a6 <__divsf3_pse+0x92>
 73c:	0e 2e       	mov	r0, r30
 73e:	3a f0       	brmi	.+14     	; 0x74e <__divsf3_pse+0x3a>
 740:	e0 e8       	ldi	r30, 0x80	; 128
 742:	32 d0       	rcall	.+100    	; 0x7a8 <__divsf3_pse+0x94>
 744:	91 50       	subi	r25, 0x01	; 1
 746:	50 40       	sbci	r21, 0x00	; 0
 748:	e6 95       	lsr	r30
 74a:	00 1c       	adc	r0, r0
 74c:	ca f7       	brpl	.-14     	; 0x740 <__divsf3_pse+0x2c>
 74e:	2b d0       	rcall	.+86     	; 0x7a6 <__divsf3_pse+0x92>
 750:	fe 2f       	mov	r31, r30
 752:	29 d0       	rcall	.+82     	; 0x7a6 <__divsf3_pse+0x92>
 754:	66 0f       	add	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	bb 1f       	adc	r27, r27
 75c:	26 17       	cp	r18, r22
 75e:	37 07       	cpc	r19, r23
 760:	48 07       	cpc	r20, r24
 762:	ab 07       	cpc	r26, r27
 764:	b0 e8       	ldi	r27, 0x80	; 128
 766:	09 f0       	breq	.+2      	; 0x76a <__divsf3_pse+0x56>
 768:	bb 0b       	sbc	r27, r27
 76a:	80 2d       	mov	r24, r0
 76c:	bf 01       	movw	r22, r30
 76e:	ff 27       	eor	r31, r31
 770:	93 58       	subi	r25, 0x83	; 131
 772:	5f 4f       	sbci	r21, 0xFF	; 255
 774:	3a f0       	brmi	.+14     	; 0x784 <__divsf3_pse+0x70>
 776:	9e 3f       	cpi	r25, 0xFE	; 254
 778:	51 05       	cpc	r21, r1
 77a:	78 f0       	brcs	.+30     	; 0x79a <__divsf3_pse+0x86>
 77c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 780:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	e4 f3       	brlt	.-8      	; 0x780 <__divsf3_pse+0x6c>
 788:	98 3e       	cpi	r25, 0xE8	; 232
 78a:	d4 f3       	brlt	.-12     	; 0x780 <__divsf3_pse+0x6c>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c9 f7       	brne	.-14     	; 0x78c <__divsf3_pse+0x78>
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret
 7a6:	e1 e0       	ldi	r30, 0x01	; 1
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	bb 1f       	adc	r27, r27
 7b0:	62 17       	cp	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	ba 07       	cpc	r27, r26
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__divsf3_pse+0xae>
 7ba:	62 1b       	sub	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	ee 1f       	adc	r30, r30
 7c4:	88 f7       	brcc	.-30     	; 0x7a8 <__divsf3_pse+0x94>
 7c6:	e0 95       	com	r30
 7c8:	08 95       	ret

000007ca <__fixunssfsi>:
 7ca:	0e 94 81 04 	call	0x902	; 0x902 <__fp_splitA>
 7ce:	88 f0       	brcs	.+34     	; 0x7f2 <__fixunssfsi+0x28>
 7d0:	9f 57       	subi	r25, 0x7F	; 127
 7d2:	98 f0       	brcs	.+38     	; 0x7fa <__fixunssfsi+0x30>
 7d4:	b9 2f       	mov	r27, r25
 7d6:	99 27       	eor	r25, r25
 7d8:	b7 51       	subi	r27, 0x17	; 23
 7da:	b0 f0       	brcs	.+44     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7dc:	e1 f0       	breq	.+56     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7de:	66 0f       	add	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	1a f0       	brmi	.+6      	; 0x7ee <__fixunssfsi+0x24>
 7e8:	ba 95       	dec	r27
 7ea:	c9 f7       	brne	.-14     	; 0x7de <__fixunssfsi+0x14>
 7ec:	14 c0       	rjmp	.+40     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7ee:	b1 30       	cpi	r27, 0x01	; 1
 7f0:	91 f0       	breq	.+36     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f2:	0e 94 9b 04 	call	0x936	; 0x936 <__fp_zero>
 7f6:	b1 e0       	ldi	r27, 0x01	; 1
 7f8:	08 95       	ret
 7fa:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_zero>
 7fe:	67 2f       	mov	r22, r23
 800:	78 2f       	mov	r23, r24
 802:	88 27       	eor	r24, r24
 804:	b8 5f       	subi	r27, 0xF8	; 248
 806:	39 f0       	breq	.+14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 808:	b9 3f       	cpi	r27, 0xF9	; 249
 80a:	cc f3       	brlt	.-14     	; 0x7fe <__fixunssfsi+0x34>
 80c:	86 95       	lsr	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b3 95       	inc	r27
 814:	d9 f7       	brne	.-10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 816:	3e f4       	brtc	.+14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 818:	90 95       	com	r25
 81a:	80 95       	com	r24
 81c:	70 95       	com	r23
 81e:	61 95       	neg	r22
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	08 95       	ret

00000828 <__floatunsisf>:
 828:	e8 94       	clt
 82a:	09 c0       	rjmp	.+18     	; 0x83e <__floatsisf+0x12>

0000082c <__floatsisf>:
 82c:	97 fb       	bst	r25, 7
 82e:	3e f4       	brtc	.+14     	; 0x83e <__floatsisf+0x12>
 830:	90 95       	com	r25
 832:	80 95       	com	r24
 834:	70 95       	com	r23
 836:	61 95       	neg	r22
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	99 23       	and	r25, r25
 840:	a9 f0       	breq	.+42     	; 0x86c <__stack+0xd>
 842:	f9 2f       	mov	r31, r25
 844:	96 e9       	ldi	r25, 0x96	; 150
 846:	bb 27       	eor	r27, r27
 848:	93 95       	inc	r25
 84a:	f6 95       	lsr	r31
 84c:	87 95       	ror	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	b7 95       	ror	r27
 854:	f1 11       	cpse	r31, r1
 856:	f8 cf       	rjmp	.-16     	; 0x848 <__floatsisf+0x1c>
 858:	fa f4       	brpl	.+62     	; 0x898 <__stack+0x39>
 85a:	bb 0f       	add	r27, r27
 85c:	11 f4       	brne	.+4      	; 0x862 <__stack+0x3>
 85e:	60 ff       	sbrs	r22, 0
 860:	1b c0       	rjmp	.+54     	; 0x898 <__stack+0x39>
 862:	6f 5f       	subi	r22, 0xFF	; 255
 864:	7f 4f       	sbci	r23, 0xFF	; 255
 866:	8f 4f       	sbci	r24, 0xFF	; 255
 868:	9f 4f       	sbci	r25, 0xFF	; 255
 86a:	16 c0       	rjmp	.+44     	; 0x898 <__stack+0x39>
 86c:	88 23       	and	r24, r24
 86e:	11 f0       	breq	.+4      	; 0x874 <__stack+0x15>
 870:	96 e9       	ldi	r25, 0x96	; 150
 872:	11 c0       	rjmp	.+34     	; 0x896 <__stack+0x37>
 874:	77 23       	and	r23, r23
 876:	21 f0       	breq	.+8      	; 0x880 <__stack+0x21>
 878:	9e e8       	ldi	r25, 0x8E	; 142
 87a:	87 2f       	mov	r24, r23
 87c:	76 2f       	mov	r23, r22
 87e:	05 c0       	rjmp	.+10     	; 0x88a <__stack+0x2b>
 880:	66 23       	and	r22, r22
 882:	71 f0       	breq	.+28     	; 0x8a0 <__stack+0x41>
 884:	96 e8       	ldi	r25, 0x86	; 134
 886:	86 2f       	mov	r24, r22
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	2a f0       	brmi	.+10     	; 0x898 <__stack+0x39>
 88e:	9a 95       	dec	r25
 890:	66 0f       	add	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	da f7       	brpl	.-10     	; 0x88e <__stack+0x2f>
 898:	88 0f       	add	r24, r24
 89a:	96 95       	lsr	r25
 89c:	87 95       	ror	r24
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <__fp_inf>:
 8a2:	97 f9       	bld	r25, 7
 8a4:	9f 67       	ori	r25, 0x7F	; 127
 8a6:	80 e8       	ldi	r24, 0x80	; 128
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	08 95       	ret

000008ae <__fp_nan>:
 8ae:	9f ef       	ldi	r25, 0xFF	; 255
 8b0:	80 ec       	ldi	r24, 0xC0	; 192
 8b2:	08 95       	ret

000008b4 <__fp_pscA>:
 8b4:	00 24       	eor	r0, r0
 8b6:	0a 94       	dec	r0
 8b8:	16 16       	cp	r1, r22
 8ba:	17 06       	cpc	r1, r23
 8bc:	18 06       	cpc	r1, r24
 8be:	09 06       	cpc	r0, r25
 8c0:	08 95       	ret

000008c2 <__fp_pscB>:
 8c2:	00 24       	eor	r0, r0
 8c4:	0a 94       	dec	r0
 8c6:	12 16       	cp	r1, r18
 8c8:	13 06       	cpc	r1, r19
 8ca:	14 06       	cpc	r1, r20
 8cc:	05 06       	cpc	r0, r21
 8ce:	08 95       	ret

000008d0 <__fp_round>:
 8d0:	09 2e       	mov	r0, r25
 8d2:	03 94       	inc	r0
 8d4:	00 0c       	add	r0, r0
 8d6:	11 f4       	brne	.+4      	; 0x8dc <__fp_round+0xc>
 8d8:	88 23       	and	r24, r24
 8da:	52 f0       	brmi	.+20     	; 0x8f0 <__fp_round+0x20>
 8dc:	bb 0f       	add	r27, r27
 8de:	40 f4       	brcc	.+16     	; 0x8f0 <__fp_round+0x20>
 8e0:	bf 2b       	or	r27, r31
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0x18>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__fp_round+0x20>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__fp_split3>:
 8f2:	57 fd       	sbrc	r21, 7
 8f4:	90 58       	subi	r25, 0x80	; 128
 8f6:	44 0f       	add	r20, r20
 8f8:	55 1f       	adc	r21, r21
 8fa:	59 f0       	breq	.+22     	; 0x912 <__fp_splitA+0x10>
 8fc:	5f 3f       	cpi	r21, 0xFF	; 255
 8fe:	71 f0       	breq	.+28     	; 0x91c <__fp_splitA+0x1a>
 900:	47 95       	ror	r20

00000902 <__fp_splitA>:
 902:	88 0f       	add	r24, r24
 904:	97 fb       	bst	r25, 7
 906:	99 1f       	adc	r25, r25
 908:	61 f0       	breq	.+24     	; 0x922 <__fp_splitA+0x20>
 90a:	9f 3f       	cpi	r25, 0xFF	; 255
 90c:	79 f0       	breq	.+30     	; 0x92c <__fp_splitA+0x2a>
 90e:	87 95       	ror	r24
 910:	08 95       	ret
 912:	12 16       	cp	r1, r18
 914:	13 06       	cpc	r1, r19
 916:	14 06       	cpc	r1, r20
 918:	55 1f       	adc	r21, r21
 91a:	f2 cf       	rjmp	.-28     	; 0x900 <__fp_split3+0xe>
 91c:	46 95       	lsr	r20
 91e:	f1 df       	rcall	.-30     	; 0x902 <__fp_splitA>
 920:	08 c0       	rjmp	.+16     	; 0x932 <__fp_splitA+0x30>
 922:	16 16       	cp	r1, r22
 924:	17 06       	cpc	r1, r23
 926:	18 06       	cpc	r1, r24
 928:	99 1f       	adc	r25, r25
 92a:	f1 cf       	rjmp	.-30     	; 0x90e <__fp_splitA+0xc>
 92c:	86 95       	lsr	r24
 92e:	71 05       	cpc	r23, r1
 930:	61 05       	cpc	r22, r1
 932:	08 94       	sec
 934:	08 95       	ret

00000936 <__fp_zero>:
 936:	e8 94       	clt

00000938 <__fp_szero>:
 938:	bb 27       	eor	r27, r27
 93a:	66 27       	eor	r22, r22
 93c:	77 27       	eor	r23, r23
 93e:	cb 01       	movw	r24, r22
 940:	97 f9       	bld	r25, 7
 942:	08 95       	ret

00000944 <__mulsf3>:
 944:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3x>
 948:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>
 94c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscA>
 950:	38 f0       	brcs	.+14     	; 0x960 <__mulsf3+0x1c>
 952:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_pscB>
 956:	20 f0       	brcs	.+8      	; 0x960 <__mulsf3+0x1c>
 958:	95 23       	and	r25, r21
 95a:	11 f0       	breq	.+4      	; 0x960 <__mulsf3+0x1c>
 95c:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 960:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>
 964:	11 24       	eor	r1, r1
 966:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>

0000096a <__mulsf3x>:
 96a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_split3>
 96e:	70 f3       	brcs	.-36     	; 0x94c <__mulsf3+0x8>

00000970 <__mulsf3_pse>:
 970:	95 9f       	mul	r25, r21
 972:	c1 f3       	breq	.-16     	; 0x964 <__mulsf3+0x20>
 974:	95 0f       	add	r25, r21
 976:	50 e0       	ldi	r21, 0x00	; 0
 978:	55 1f       	adc	r21, r21
 97a:	62 9f       	mul	r22, r18
 97c:	f0 01       	movw	r30, r0
 97e:	72 9f       	mul	r23, r18
 980:	bb 27       	eor	r27, r27
 982:	f0 0d       	add	r31, r0
 984:	b1 1d       	adc	r27, r1
 986:	63 9f       	mul	r22, r19
 988:	aa 27       	eor	r26, r26
 98a:	f0 0d       	add	r31, r0
 98c:	b1 1d       	adc	r27, r1
 98e:	aa 1f       	adc	r26, r26
 990:	64 9f       	mul	r22, r20
 992:	66 27       	eor	r22, r22
 994:	b0 0d       	add	r27, r0
 996:	a1 1d       	adc	r26, r1
 998:	66 1f       	adc	r22, r22
 99a:	82 9f       	mul	r24, r18
 99c:	22 27       	eor	r18, r18
 99e:	b0 0d       	add	r27, r0
 9a0:	a1 1d       	adc	r26, r1
 9a2:	62 1f       	adc	r22, r18
 9a4:	73 9f       	mul	r23, r19
 9a6:	b0 0d       	add	r27, r0
 9a8:	a1 1d       	adc	r26, r1
 9aa:	62 1f       	adc	r22, r18
 9ac:	83 9f       	mul	r24, r19
 9ae:	a0 0d       	add	r26, r0
 9b0:	61 1d       	adc	r22, r1
 9b2:	22 1f       	adc	r18, r18
 9b4:	74 9f       	mul	r23, r20
 9b6:	33 27       	eor	r19, r19
 9b8:	a0 0d       	add	r26, r0
 9ba:	61 1d       	adc	r22, r1
 9bc:	23 1f       	adc	r18, r19
 9be:	84 9f       	mul	r24, r20
 9c0:	60 0d       	add	r22, r0
 9c2:	21 1d       	adc	r18, r1
 9c4:	82 2f       	mov	r24, r18
 9c6:	76 2f       	mov	r23, r22
 9c8:	6a 2f       	mov	r22, r26
 9ca:	11 24       	eor	r1, r1
 9cc:	9f 57       	subi	r25, 0x7F	; 127
 9ce:	50 40       	sbci	r21, 0x00	; 0
 9d0:	9a f0       	brmi	.+38     	; 0x9f8 <__mulsf3_pse+0x88>
 9d2:	f1 f0       	breq	.+60     	; 0xa10 <__mulsf3_pse+0xa0>
 9d4:	88 23       	and	r24, r24
 9d6:	4a f0       	brmi	.+18     	; 0x9ea <__mulsf3_pse+0x7a>
 9d8:	ee 0f       	add	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	bb 1f       	adc	r27, r27
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	50 40       	sbci	r21, 0x00	; 0
 9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__mulsf3_pse+0x64>
 9ea:	9e 3f       	cpi	r25, 0xFE	; 254
 9ec:	51 05       	cpc	r21, r1
 9ee:	80 f0       	brcs	.+32     	; 0xa10 <__mulsf3_pse+0xa0>
 9f0:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 9f4:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_szero>
 9f8:	5f 3f       	cpi	r21, 0xFF	; 255
 9fa:	e4 f3       	brlt	.-8      	; 0x9f4 <__mulsf3_pse+0x84>
 9fc:	98 3e       	cpi	r25, 0xE8	; 232
 9fe:	d4 f3       	brlt	.-12     	; 0x9f4 <__mulsf3_pse+0x84>
 a00:	86 95       	lsr	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f7 95       	ror	r31
 a0a:	e7 95       	ror	r30
 a0c:	9f 5f       	subi	r25, 0xFF	; 255
 a0e:	c1 f7       	brne	.-16     	; 0xa00 <__mulsf3_pse+0x90>
 a10:	fe 2b       	or	r31, r30
 a12:	88 0f       	add	r24, r24
 a14:	91 1d       	adc	r25, r1
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__udivmodhi4>:
 a1e:	aa 1b       	sub	r26, r26
 a20:	bb 1b       	sub	r27, r27
 a22:	51 e1       	ldi	r21, 0x11	; 17
 a24:	07 c0       	rjmp	.+14     	; 0xa34 <__udivmodhi4_ep>

00000a26 <__udivmodhi4_loop>:
 a26:	aa 1f       	adc	r26, r26
 a28:	bb 1f       	adc	r27, r27
 a2a:	a6 17       	cp	r26, r22
 a2c:	b7 07       	cpc	r27, r23
 a2e:	10 f0       	brcs	.+4      	; 0xa34 <__udivmodhi4_ep>
 a30:	a6 1b       	sub	r26, r22
 a32:	b7 0b       	sbc	r27, r23

00000a34 <__udivmodhi4_ep>:
 a34:	88 1f       	adc	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	5a 95       	dec	r21
 a3a:	a9 f7       	brne	.-22     	; 0xa26 <__udivmodhi4_loop>
 a3c:	80 95       	com	r24
 a3e:	90 95       	com	r25
 a40:	bc 01       	movw	r22, r24
 a42:	cd 01       	movw	r24, r26
 a44:	08 95       	ret

00000a46 <__udivmodsi4>:
 a46:	a1 e2       	ldi	r26, 0x21	; 33
 a48:	1a 2e       	mov	r1, r26
 a4a:	aa 1b       	sub	r26, r26
 a4c:	bb 1b       	sub	r27, r27
 a4e:	fd 01       	movw	r30, r26
 a50:	0d c0       	rjmp	.+26     	; 0xa6c <__udivmodsi4_ep>

00000a52 <__udivmodsi4_loop>:
 a52:	aa 1f       	adc	r26, r26
 a54:	bb 1f       	adc	r27, r27
 a56:	ee 1f       	adc	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	a2 17       	cp	r26, r18
 a5c:	b3 07       	cpc	r27, r19
 a5e:	e4 07       	cpc	r30, r20
 a60:	f5 07       	cpc	r31, r21
 a62:	20 f0       	brcs	.+8      	; 0xa6c <__udivmodsi4_ep>
 a64:	a2 1b       	sub	r26, r18
 a66:	b3 0b       	sbc	r27, r19
 a68:	e4 0b       	sbc	r30, r20
 a6a:	f5 0b       	sbc	r31, r21

00000a6c <__udivmodsi4_ep>:
 a6c:	66 1f       	adc	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	1a 94       	dec	r1
 a76:	69 f7       	brne	.-38     	; 0xa52 <__udivmodsi4_loop>
 a78:	60 95       	com	r22
 a7a:	70 95       	com	r23
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	9b 01       	movw	r18, r22
 a82:	ac 01       	movw	r20, r24
 a84:	bd 01       	movw	r22, r26
 a86:	cf 01       	movw	r24, r30
 a88:	08 95       	ret

00000a8a <__tablejump2__>:
 a8a:	ee 0f       	add	r30, r30
 a8c:	ff 1f       	adc	r31, r31
 a8e:	05 90       	lpm	r0, Z+
 a90:	f4 91       	lpm	r31, Z
 a92:	e0 2d       	mov	r30, r0
 a94:	09 94       	ijmp

00000a96 <_exit>:
 a96:	f8 94       	cli

00000a98 <__stop_program>:
 a98:	ff cf       	rjmp	.-2      	; 0xa98 <__stop_program>
