
Safe_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00000c28  00000c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b1b  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000990  00000000  00000000  00002a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e0d  00000000  00000000  0000339b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000041a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000511  00000000  00000000  00004468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001251  00000000  00000000  00004979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00005bca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  48:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  4c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  54:	2a 01       	movw	r4, r20
  56:	43 01       	movw	r8, r6
  58:	5c 01       	movw	r10, r24
  5a:	75 01       	movw	r14, r10
  5c:	8d 01       	movw	r16, r26
  5e:	8d 01       	movw	r16, r26
  60:	8d 01       	movw	r16, r26
  62:	8d 01       	movw	r16, r26
  64:	8d 01       	movw	r16, r26
  66:	8d 01       	movw	r16, r26
  68:	8d 01       	movw	r16, r26
  6a:	8d 01       	movw	r16, r26
  6c:	8d 01       	movw	r16, r26
  6e:	8d 01       	movw	r16, r26
  70:	8d 01       	movw	r16, r26
  72:	8d 01       	movw	r16, r26
  74:	8d 01       	movw	r16, r26
  76:	8d 01       	movw	r16, r26
  78:	8d 01       	movw	r16, r26
  7a:	8d 01       	movw	r16, r26
  7c:	8d 01       	movw	r16, r26
  7e:	8d 01       	movw	r16, r26
  80:	8d 01       	movw	r16, r26
  82:	8d 01       	movw	r16, r26
  84:	8d 01       	movw	r16, r26
  86:	8d 01       	movw	r16, r26
  88:	8d 01       	movw	r16, r26
  8a:	8d 01       	movw	r16, r26
  8c:	8d 01       	movw	r16, r26
  8e:	8d 01       	movw	r16, r26
  90:	8d 01       	movw	r16, r26
  92:	8d 01       	movw	r16, r26
  94:	2a 01       	movw	r4, r20
  96:	43 01       	movw	r8, r6
  98:	5c 01       	movw	r10, r24
  9a:	75 01       	movw	r14, r10
  9c:	99 01       	movw	r18, r18
  9e:	a4 01       	movw	r20, r8
  a0:	af 01       	movw	r20, r30
  a2:	ba 01       	movw	r22, r20
  a4:	c4 01       	movw	r24, r8
  a6:	c4 01       	movw	r24, r8
  a8:	c4 01       	movw	r24, r8
  aa:	c4 01       	movw	r24, r8
  ac:	c4 01       	movw	r24, r8
  ae:	c4 01       	movw	r24, r8
  b0:	c4 01       	movw	r24, r8
  b2:	c4 01       	movw	r24, r8
  b4:	c4 01       	movw	r24, r8
  b6:	c4 01       	movw	r24, r8
  b8:	c4 01       	movw	r24, r8
  ba:	c4 01       	movw	r24, r8
  bc:	c4 01       	movw	r24, r8
  be:	c4 01       	movw	r24, r8
  c0:	c4 01       	movw	r24, r8
  c2:	c4 01       	movw	r24, r8
  c4:	c4 01       	movw	r24, r8
  c6:	c4 01       	movw	r24, r8
  c8:	c4 01       	movw	r24, r8
  ca:	c4 01       	movw	r24, r8
  cc:	c4 01       	movw	r24, r8
  ce:	c4 01       	movw	r24, r8
  d0:	c4 01       	movw	r24, r8
  d2:	c4 01       	movw	r24, r8
  d4:	c4 01       	movw	r24, r8
  d6:	c4 01       	movw	r24, r8
  d8:	c4 01       	movw	r24, r8
  da:	c4 01       	movw	r24, r8
  dc:	99 01       	movw	r18, r18
  de:	a4 01       	movw	r20, r8
  e0:	af 01       	movw	r20, r30
  e2:	ba 01       	movw	r22, r20
  e4:	d2 01       	movw	r26, r4
  e6:	d9 01       	movw	r26, r18
  e8:	e0 01       	movw	r28, r0
  ea:	e7 01       	movw	r28, r14
  ec:	ed 01       	movw	r28, r26
  ee:	ed 01       	movw	r28, r26
  f0:	ed 01       	movw	r28, r26
  f2:	ed 01       	movw	r28, r26
  f4:	ed 01       	movw	r28, r26
  f6:	ed 01       	movw	r28, r26
  f8:	ed 01       	movw	r28, r26
  fa:	ed 01       	movw	r28, r26
  fc:	ed 01       	movw	r28, r26
  fe:	ed 01       	movw	r28, r26
 100:	ed 01       	movw	r28, r26
 102:	ed 01       	movw	r28, r26
 104:	ed 01       	movw	r28, r26
 106:	ed 01       	movw	r28, r26
 108:	ed 01       	movw	r28, r26
 10a:	ed 01       	movw	r28, r26
 10c:	ed 01       	movw	r28, r26
 10e:	ed 01       	movw	r28, r26
 110:	ed 01       	movw	r28, r26
 112:	ed 01       	movw	r28, r26
 114:	ed 01       	movw	r28, r26
 116:	ed 01       	movw	r28, r26
 118:	ed 01       	movw	r28, r26
 11a:	ed 01       	movw	r28, r26
 11c:	ed 01       	movw	r28, r26
 11e:	ed 01       	movw	r28, r26
 120:	ed 01       	movw	r28, r26
 122:	ed 01       	movw	r28, r26
 124:	d2 01       	movw	r26, r4
 126:	d9 01       	movw	r26, r18
 128:	e0 01       	movw	r28, r0
 12a:	e7 01       	movw	r28, r14
 12c:	f9 01       	movw	r30, r18
 12e:	05 02       	muls	r16, r21
 130:	11 02       	muls	r17, r17
 132:	1d 02       	muls	r17, r29
 134:	28 02       	muls	r18, r24
 136:	28 02       	muls	r18, r24
 138:	28 02       	muls	r18, r24
 13a:	28 02       	muls	r18, r24
 13c:	28 02       	muls	r18, r24
 13e:	28 02       	muls	r18, r24
 140:	28 02       	muls	r18, r24
 142:	28 02       	muls	r18, r24
 144:	28 02       	muls	r18, r24
 146:	28 02       	muls	r18, r24
 148:	28 02       	muls	r18, r24
 14a:	28 02       	muls	r18, r24
 14c:	28 02       	muls	r18, r24
 14e:	28 02       	muls	r18, r24
 150:	28 02       	muls	r18, r24
 152:	28 02       	muls	r18, r24
 154:	28 02       	muls	r18, r24
 156:	28 02       	muls	r18, r24
 158:	28 02       	muls	r18, r24
 15a:	28 02       	muls	r18, r24
 15c:	28 02       	muls	r18, r24
 15e:	28 02       	muls	r18, r24
 160:	28 02       	muls	r18, r24
 162:	28 02       	muls	r18, r24
 164:	28 02       	muls	r18, r24
 166:	28 02       	muls	r18, r24
 168:	28 02       	muls	r18, r24
 16a:	28 02       	muls	r18, r24
 16c:	f9 01       	movw	r30, r18
 16e:	05 02       	muls	r16, r21
 170:	11 02       	muls	r17, r17
 172:	1d 02       	muls	r17, r29
 174:	35 02       	muls	r19, r21
 176:	49 02       	muls	r20, r25
 178:	5d 02       	muls	r21, r29
 17a:	71 02       	muls	r23, r17
 17c:	85 02       	muls	r24, r21
 17e:	85 02       	muls	r24, r21
 180:	85 02       	muls	r24, r21
 182:	85 02       	muls	r24, r21
 184:	85 02       	muls	r24, r21
 186:	85 02       	muls	r24, r21
 188:	85 02       	muls	r24, r21
 18a:	85 02       	muls	r24, r21
 18c:	85 02       	muls	r24, r21
 18e:	85 02       	muls	r24, r21
 190:	85 02       	muls	r24, r21
 192:	85 02       	muls	r24, r21
 194:	85 02       	muls	r24, r21
 196:	85 02       	muls	r24, r21
 198:	85 02       	muls	r24, r21
 19a:	85 02       	muls	r24, r21
 19c:	85 02       	muls	r24, r21
 19e:	85 02       	muls	r24, r21
 1a0:	85 02       	muls	r24, r21
 1a2:	85 02       	muls	r24, r21
 1a4:	85 02       	muls	r24, r21
 1a6:	85 02       	muls	r24, r21
 1a8:	85 02       	muls	r24, r21
 1aa:	85 02       	muls	r24, r21
 1ac:	85 02       	muls	r24, r21
 1ae:	85 02       	muls	r24, r21
 1b0:	85 02       	muls	r24, r21
 1b2:	85 02       	muls	r24, r21
 1b4:	35 02       	muls	r19, r21
 1b6:	49 02       	muls	r20, r25
 1b8:	5d 02       	muls	r21, r29
 1ba:	71 02       	muls	r23, r17
 1bc:	98 02       	muls	r25, r24
 1be:	b1 02       	muls	r27, r17
 1c0:	ca 02       	muls	r28, r26
 1c2:	e3 02       	muls	r30, r19
 1c4:	fb 02       	muls	r31, r27
 1c6:	fb 02       	muls	r31, r27
 1c8:	fb 02       	muls	r31, r27
 1ca:	fb 02       	muls	r31, r27
 1cc:	fb 02       	muls	r31, r27
 1ce:	fb 02       	muls	r31, r27
 1d0:	fb 02       	muls	r31, r27
 1d2:	fb 02       	muls	r31, r27
 1d4:	fb 02       	muls	r31, r27
 1d6:	fb 02       	muls	r31, r27
 1d8:	fb 02       	muls	r31, r27
 1da:	fb 02       	muls	r31, r27
 1dc:	fb 02       	muls	r31, r27
 1de:	fb 02       	muls	r31, r27
 1e0:	fb 02       	muls	r31, r27
 1e2:	fb 02       	muls	r31, r27
 1e4:	fb 02       	muls	r31, r27
 1e6:	fb 02       	muls	r31, r27
 1e8:	fb 02       	muls	r31, r27
 1ea:	fb 02       	muls	r31, r27
 1ec:	fb 02       	muls	r31, r27
 1ee:	fb 02       	muls	r31, r27
 1f0:	fb 02       	muls	r31, r27
 1f2:	fb 02       	muls	r31, r27
 1f4:	fb 02       	muls	r31, r27
 1f6:	fb 02       	muls	r31, r27
 1f8:	fb 02       	muls	r31, r27
 1fa:	fb 02       	muls	r31, r27
 1fc:	98 02       	muls	r25, r24
 1fe:	b1 02       	muls	r27, r17
 200:	ca 02       	muls	r28, r26
 202:	e3 02       	muls	r30, r19

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf e5       	ldi	r28, 0x5F	; 95
 20a:	d8 e0       	ldi	r29, 0x08	; 8
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	cd bf       	out	0x3d, r28	; 61

00000210 <__do_copy_data>:
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	a0 e6       	ldi	r26, 0x60	; 96
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e8 e2       	ldi	r30, 0x28	; 40
 218:	fc e0       	ldi	r31, 0x0C	; 12
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x10>
 21c:	05 90       	lpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 3f       	cpi	r26, 0xF0	; 240
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0xc>
 226:	0e 94 29 05 	call	0xa52	; 0xa52 <main>
 22a:	0c 94 12 06 	jmp	0xc24	; 0xc24 <_exit>

0000022e <__bad_interrupt>:
 22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000232 <setBitDirection>:
		default:
		break;
	}
	return pins;
	
}
 232:	41 33       	cpi	r20, 0x31	; 49
 234:	11 f4       	brne	.+4      	; 0x23a <setBitDirection+0x8>
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	01 c0       	rjmp	.+2      	; 0x23c <setBitDirection+0xa>
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	e1 54       	subi	r30, 0x41	; 65
 242:	f1 09       	sbc	r31, r1
 244:	e4 32       	cpi	r30, 0x24	; 36
 246:	f1 05       	cpc	r31, r1
 248:	08 f0       	brcs	.+2      	; 0x24c <setBitDirection+0x1a>
 24a:	67 c0       	rjmp	.+206    	; 0x31a <setBitDirection+0xe8>
 24c:	e6 5d       	subi	r30, 0xD6	; 214
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__tablejump2__>
 254:	22 23       	and	r18, r18
 256:	59 f0       	breq	.+22     	; 0x26e <setBitDirection+0x3c>
 258:	2a b3       	in	r18, 0x1a	; 26
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <setBitDirection+0x32>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <setBitDirection+0x2e>
 268:	82 2b       	or	r24, r18
 26a:	8a bb       	out	0x1a, r24	; 26
 26c:	08 95       	ret
 26e:	2a b3       	in	r18, 0x1a	; 26
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <setBitDirection+0x48>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <setBitDirection+0x44>
 27e:	80 95       	com	r24
 280:	82 23       	and	r24, r18
 282:	8a bb       	out	0x1a, r24	; 26
 284:	08 95       	ret
 286:	22 23       	and	r18, r18
 288:	59 f0       	breq	.+22     	; 0x2a0 <setBitDirection+0x6e>
 28a:	27 b3       	in	r18, 0x17	; 23
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <setBitDirection+0x64>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <setBitDirection+0x60>
 29a:	82 2b       	or	r24, r18
 29c:	87 bb       	out	0x17, r24	; 23
 29e:	08 95       	ret
 2a0:	27 b3       	in	r18, 0x17	; 23
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <setBitDirection+0x7a>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <setBitDirection+0x76>
 2b0:	80 95       	com	r24
 2b2:	82 23       	and	r24, r18
 2b4:	87 bb       	out	0x17, r24	; 23
 2b6:	08 95       	ret
 2b8:	22 23       	and	r18, r18
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <setBitDirection+0xa0>
 2bc:	24 b3       	in	r18, 0x14	; 20
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <setBitDirection+0x96>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <setBitDirection+0x92>
 2cc:	82 2b       	or	r24, r18
 2ce:	84 bb       	out	0x14, r24	; 20
 2d0:	08 95       	ret
 2d2:	24 b3       	in	r18, 0x14	; 20
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <setBitDirection+0xac>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <setBitDirection+0xa8>
 2e2:	80 95       	com	r24
 2e4:	82 23       	and	r24, r18
 2e6:	84 bb       	out	0x14, r24	; 20
 2e8:	08 95       	ret
 2ea:	22 23       	and	r18, r18
 2ec:	59 f0       	breq	.+22     	; 0x304 <setBitDirection+0xd2>
 2ee:	21 b3       	in	r18, 0x11	; 17
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <setBitDirection+0xc8>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <setBitDirection+0xc4>
 2fe:	82 2b       	or	r24, r18
 300:	81 bb       	out	0x11, r24	; 17
 302:	08 95       	ret
 304:	21 b3       	in	r18, 0x11	; 17
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <setBitDirection+0xde>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <setBitDirection+0xda>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	81 bb       	out	0x11, r24	; 17
 31a:	08 95       	ret

0000031c <setBit>:
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	fc 01       	movw	r30, r24
 320:	e1 54       	subi	r30, 0x41	; 65
 322:	f1 09       	sbc	r31, r1
 324:	e4 32       	cpi	r30, 0x24	; 36
 326:	f1 05       	cpc	r31, r1
 328:	78 f5       	brcc	.+94     	; 0x388 <setBit+0x6c>
 32a:	e2 5b       	subi	r30, 0xB2	; 178
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__tablejump2__>
 332:	2b b3       	in	r18, 0x1b	; 27
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <setBit+0x22>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <setBit+0x1e>
 342:	82 2b       	or	r24, r18
 344:	8b bb       	out	0x1b, r24	; 27
 346:	08 95       	ret
 348:	28 b3       	in	r18, 0x18	; 24
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <setBit+0x38>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <setBit+0x34>
 358:	82 2b       	or	r24, r18
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	08 95       	ret
 35e:	25 b3       	in	r18, 0x15	; 21
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <setBit+0x4e>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <setBit+0x4a>
 36e:	82 2b       	or	r24, r18
 370:	85 bb       	out	0x15, r24	; 21
 372:	08 95       	ret
 374:	22 b3       	in	r18, 0x12	; 18
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <setBit+0x64>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <setBit+0x60>
 384:	82 2b       	or	r24, r18
 386:	82 bb       	out	0x12, r24	; 18
 388:	08 95       	ret

0000038a <writeHigh_4pins>:
 38a:	62 95       	swap	r22
 38c:	60 7f       	andi	r22, 0xF0	; 240
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	fc 01       	movw	r30, r24
 392:	e1 54       	subi	r30, 0x41	; 65
 394:	f1 09       	sbc	r31, r1
 396:	e4 32       	cpi	r30, 0x24	; 36
 398:	f1 05       	cpc	r31, r1
 39a:	f8 f4       	brcc	.+62     	; 0x3da <writeHigh_4pins+0x50>
 39c:	ee 58       	subi	r30, 0x8E	; 142
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__tablejump2__>
 3a4:	8b b3       	in	r24, 0x1b	; 27
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	8b bb       	out	0x1b, r24	; 27
 3aa:	8b b3       	in	r24, 0x1b	; 27
 3ac:	68 2b       	or	r22, r24
 3ae:	6b bb       	out	0x1b, r22	; 27
 3b0:	08 95       	ret
 3b2:	88 b3       	in	r24, 0x18	; 24
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	88 b3       	in	r24, 0x18	; 24
 3ba:	68 2b       	or	r22, r24
 3bc:	68 bb       	out	0x18, r22	; 24
 3be:	08 95       	ret
 3c0:	85 b3       	in	r24, 0x15	; 21
 3c2:	8f 70       	andi	r24, 0x0F	; 15
 3c4:	85 bb       	out	0x15, r24	; 21
 3c6:	85 b3       	in	r24, 0x15	; 21
 3c8:	68 2b       	or	r22, r24
 3ca:	65 bb       	out	0x15, r22	; 21
 3cc:	08 95       	ret
 3ce:	82 b3       	in	r24, 0x12	; 18
 3d0:	8f 70       	andi	r24, 0x0F	; 15
 3d2:	82 bb       	out	0x12, r24	; 18
 3d4:	82 b3       	in	r24, 0x12	; 18
 3d6:	68 2b       	or	r22, r24
 3d8:	62 bb       	out	0x12, r22	; 18
 3da:	08 95       	ret

000003dc <clearBit>:
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	e1 54       	subi	r30, 0x41	; 65
 3e2:	f1 09       	sbc	r31, r1
 3e4:	e4 32       	cpi	r30, 0x24	; 36
 3e6:	f1 05       	cpc	r31, r1
 3e8:	98 f5       	brcc	.+102    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3ea:	ea 56       	subi	r30, 0x6A	; 106
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__tablejump2__>
 3f2:	2b b3       	in	r18, 0x1b	; 27
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <clearBit+0x22>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <clearBit+0x1e>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	8b bb       	out	0x1b, r24	; 27
 408:	08 95       	ret
 40a:	28 b3       	in	r18, 0x18	; 24
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	80 95       	com	r24
 41c:	82 23       	and	r24, r18
 41e:	88 bb       	out	0x18, r24	; 24
 420:	08 95       	ret
 422:	25 b3       	in	r18, 0x15	; 21
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	80 95       	com	r24
 434:	82 23       	and	r24, r18
 436:	85 bb       	out	0x15, r24	; 21
 438:	08 95       	ret
 43a:	22 b3       	in	r18, 0x12	; 18
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	80 95       	com	r24
 44c:	82 23       	and	r24, r18
 44e:	82 bb       	out	0x12, r24	; 18
 450:	08 95       	ret

00000452 <readBit>:
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	fc 01       	movw	r30, r24
 456:	e1 54       	subi	r30, 0x41	; 65
 458:	f1 09       	sbc	r31, r1
 45a:	e4 32       	cpi	r30, 0x24	; 36
 45c:	f1 05       	cpc	r31, r1
 45e:	08 f0       	brcs	.+2      	; 0x462 <readBit+0x10>
 460:	54 c0       	rjmp	.+168    	; 0x50a <readBit+0xb8>
 462:	e6 54       	subi	r30, 0x46	; 70
 464:	ff 4f       	sbci	r31, 0xFF	; 255
 466:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__tablejump2__>
 46a:	49 b3       	in	r20, 0x19	; 25
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9c 01       	movw	r18, r24
 472:	06 2e       	mov	r0, r22
 474:	02 c0       	rjmp	.+4      	; 0x47a <readBit+0x28>
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <readBit+0x24>
 47e:	84 2f       	mov	r24, r20
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	82 23       	and	r24, r18
 484:	93 23       	and	r25, r19
 486:	02 c0       	rjmp	.+4      	; 0x48c <readBit+0x3a>
 488:	95 95       	asr	r25
 48a:	87 95       	ror	r24
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <readBit+0x36>
 490:	08 95       	ret
 492:	46 b3       	in	r20, 0x16	; 22
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	9c 01       	movw	r18, r24
 49a:	06 2e       	mov	r0, r22
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <readBit+0x50>
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <readBit+0x4c>
 4a6:	84 2f       	mov	r24, r20
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	82 23       	and	r24, r18
 4ac:	93 23       	and	r25, r19
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <readBit+0x62>
 4b0:	95 95       	asr	r25
 4b2:	87 95       	ror	r24
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <readBit+0x5e>
 4b8:	08 95       	ret
 4ba:	43 b3       	in	r20, 0x13	; 19
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	9c 01       	movw	r18, r24
 4c2:	06 2e       	mov	r0, r22
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <readBit+0x78>
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <readBit+0x74>
 4ce:	84 2f       	mov	r24, r20
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	82 23       	and	r24, r18
 4d4:	93 23       	and	r25, r19
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <readBit+0x8a>
 4d8:	95 95       	asr	r25
 4da:	87 95       	ror	r24
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <readBit+0x86>
 4e0:	08 95       	ret
 4e2:	40 b3       	in	r20, 0x10	; 16
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	9c 01       	movw	r18, r24
 4ea:	06 2e       	mov	r0, r22
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <readBit+0xa0>
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <readBit+0x9c>
 4f6:	84 2f       	mov	r24, r20
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	82 23       	and	r24, r18
 4fc:	93 23       	and	r25, r19
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <readBit+0xb2>
 500:	95 95       	asr	r25
 502:	87 95       	ror	r24
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <readBit+0xae>
 508:	08 95       	ret
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret

0000050e <pullUpConnect>:

void pullUpConnect(char port , int bitNumber , char enable)
{
	if (enable == '1')
 50e:	41 33       	cpi	r20, 0x31	; 49
 510:	11 f4       	brne	.+4      	; 0x516 <pullUpConnect+0x8>
	{
		enable = 1;
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	01 c0       	rjmp	.+2      	; 0x518 <pullUpConnect+0xa>
	}
	else
	{
		enable = 0;
 516:	20 e0       	ldi	r18, 0x00	; 0
	}
	switch(port)
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	e1 54       	subi	r30, 0x41	; 65
 51e:	f1 09       	sbc	r31, r1
 520:	e4 32       	cpi	r30, 0x24	; 36
 522:	f1 05       	cpc	r31, r1
 524:	08 f0       	brcs	.+2      	; 0x528 <pullUpConnect+0x1a>
 526:	67 c0       	rjmp	.+206    	; 0x5f6 <pullUpConnect+0xe8>
 528:	e2 52       	subi	r30, 0x22	; 34
 52a:	ff 4f       	sbci	r31, 0xFF	; 255
 52c:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__tablejump2__>
	{
		case 'A':
		case 'a':
			if (enable)
 530:	22 23       	and	r18, r18
 532:	59 f0       	breq	.+22     	; 0x54a <pullUpConnect+0x3c>
			{
				PORTA |= (1<<bitNumber);
 534:	2b b3       	in	r18, 0x1b	; 27
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <pullUpConnect+0x32>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	6a 95       	dec	r22
 542:	e2 f7       	brpl	.-8      	; 0x53c <pullUpConnect+0x2e>
 544:	82 2b       	or	r24, r18
 546:	8b bb       	out	0x1b, r24	; 27
 548:	08 95       	ret
			}
			else
			{
				PORTA &= ~(1<<bitNumber);
 54a:	2b b3       	in	r18, 0x1b	; 27
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 c0       	rjmp	.+4      	; 0x556 <pullUpConnect+0x48>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	6a 95       	dec	r22
 558:	e2 f7       	brpl	.-8      	; 0x552 <pullUpConnect+0x44>
 55a:	80 95       	com	r24
 55c:	82 23       	and	r24, r18
 55e:	8b bb       	out	0x1b, r24	; 27
 560:	08 95       	ret
			}
		break;
		
		case 'B':
		case 'b':
			if (enable)
 562:	22 23       	and	r18, r18
 564:	59 f0       	breq	.+22     	; 0x57c <pullUpConnect+0x6e>
			{
				PORTB |= (1<<bitNumber);
 566:	28 b3       	in	r18, 0x18	; 24
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <pullUpConnect+0x64>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <pullUpConnect+0x60>
 576:	82 2b       	or	r24, r18
 578:	88 bb       	out	0x18, r24	; 24
 57a:	08 95       	ret
			}
			else
			{
				PORTB &= ~(1<<bitNumber);
 57c:	28 b3       	in	r18, 0x18	; 24
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <pullUpConnect+0x7a>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <pullUpConnect+0x76>
 58c:	80 95       	com	r24
 58e:	82 23       	and	r24, r18
 590:	88 bb       	out	0x18, r24	; 24
 592:	08 95       	ret
			}
		break;
		
		case 'C':
		case 'c':
			if (enable)
 594:	22 23       	and	r18, r18
 596:	59 f0       	breq	.+22     	; 0x5ae <pullUpConnect+0xa0>
			{
				PORTC |= (1<<bitNumber);
 598:	25 b3       	in	r18, 0x15	; 21
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <pullUpConnect+0x96>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <pullUpConnect+0x92>
 5a8:	82 2b       	or	r24, r18
 5aa:	85 bb       	out	0x15, r24	; 21
 5ac:	08 95       	ret
			}
			else
			{
				PORTC &= ~(1<<bitNumber);
 5ae:	25 b3       	in	r18, 0x15	; 21
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <pullUpConnect+0xac>
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	6a 95       	dec	r22
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <pullUpConnect+0xa8>
 5be:	80 95       	com	r24
 5c0:	82 23       	and	r24, r18
 5c2:	85 bb       	out	0x15, r24	; 21
 5c4:	08 95       	ret
			}
		break;
		
		case 'D':
		case 'd':
			if (enable)
 5c6:	22 23       	and	r18, r18
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <pullUpConnect+0xd2>
			{
				PORTD |= (1<<bitNumber);
 5ca:	22 b3       	in	r18, 0x12	; 18
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <pullUpConnect+0xc8>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <pullUpConnect+0xc4>
 5da:	82 2b       	or	r24, r18
 5dc:	82 bb       	out	0x12, r24	; 18
 5de:	08 95       	ret
			}
			else
			{
				PORTD &= ~(1<<bitNumber);
 5e0:	22 b3       	in	r18, 0x12	; 18
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <pullUpConnect+0xde>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <pullUpConnect+0xda>
 5f0:	80 95       	com	r24
 5f2:	82 23       	and	r24, r18
 5f4:	82 bb       	out	0x12, r24	; 18
 5f6:	08 95       	ret

000005f8 <EEPROM_write>:
#define EEDR  *((volatile unsigned char*) (0x3D))
#define EECR  *((volatile unsigned char*) (0x3C))

void EEPROM_write(unsigned short address,unsigned char data)
{
	EEAR  = address;
 5f8:	8e bb       	out	0x1e, r24	; 30
	//EEARL  = address;
	//EEARH  = (address>>8);
	EEDR  = data;
 5fa:	6d bb       	out	0x1d, r22	; 29
	//set EEMWE
	SET_BIT(EECR,2);
 5fc:	8c b3       	in	r24, 0x1c	; 28
 5fe:	84 60       	ori	r24, 0x04	; 4
 600:	8c bb       	out	0x1c, r24	; 28
	//set EEWE
	SET_BIT(EECR,1);
 602:	8c b3       	in	r24, 0x1c	; 28
 604:	82 60       	ori	r24, 0x02	; 2
 606:	8c bb       	out	0x1c, r24	; 28
	while(READ_BIT(EECR,1)==1);
 608:	e1 99       	sbic	0x1c, 1	; 28
 60a:	fe cf       	rjmp	.-4      	; 0x608 <EEPROM_write+0x10>
}
 60c:	08 95       	ret

0000060e <EEPROM_read>:

unsigned char EEPROM_read(unsigned short address)
{
	EEAR  = address;
 60e:	8e bb       	out	0x1e, r24	; 30
	//EEARL  = address;
	//EEARH  = (address>>8);
	
	// SET EERE
	SET_BIT(EECR,0);
 610:	8c b3       	in	r24, 0x1c	; 28
 612:	81 60       	ori	r24, 0x01	; 1
 614:	8c bb       	out	0x1c, r24	; 28
	
	return EEDR;
 616:	8d b3       	in	r24, 0x1d	; 29
}
 618:	08 95       	ret

0000061a <keypadInitialization>:
 */ 
#define connected_port 'D'
#include "DIO_Module.h"

void keypadInitialization()
{
 61a:	0f 93       	push	r16
 61c:	1f 93       	push	r17
 61e:	cf 93       	push	r28
	char i ;
	//make first 4 pins output pins
	for (i = 0 ; i<4 ; i++)
 620:	c0 e0       	ldi	r28, 0x00	; 0
 622:	07 c0       	rjmp	.+14     	; 0x632 <keypadInitialization+0x18>
	{
		setBitDirection(connected_port,(int)i , '1');
 624:	6c 2f       	mov	r22, r28
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	41 e3       	ldi	r20, 0x31	; 49
 62a:	84 e4       	ldi	r24, 0x44	; 68
 62c:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>

void keypadInitialization()
{
	char i ;
	//make first 4 pins output pins
	for (i = 0 ; i<4 ; i++)
 630:	cf 5f       	subi	r28, 0xFF	; 255
 632:	c4 30       	cpi	r28, 0x04	; 4
 634:	b8 f3       	brcs	.-18     	; 0x624 <keypadInitialization+0xa>
 636:	c4 e0       	ldi	r28, 0x04	; 4
 638:	0d c0       	rjmp	.+26     	; 0x654 <keypadInitialization+0x3a>
		setBitDirection(connected_port,(int)i , '1');
	}
	//make last 4 pins input pins and enable internal pull up
	for (i = 4 ; i<8 ; i++)
	{
		setBitDirection(connected_port,(int)i , '0');
 63a:	0c 2f       	mov	r16, r28
 63c:	10 e0       	ldi	r17, 0x00	; 0
 63e:	40 e3       	ldi	r20, 0x30	; 48
 640:	b8 01       	movw	r22, r16
 642:	84 e4       	ldi	r24, 0x44	; 68
 644:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
		pullUpConnect(connected_port,(int)i , '1');
 648:	41 e3       	ldi	r20, 0x31	; 49
 64a:	b8 01       	movw	r22, r16
 64c:	84 e4       	ldi	r24, 0x44	; 68
 64e:	0e 94 87 02 	call	0x50e	; 0x50e <pullUpConnect>
	for (i = 0 ; i<4 ; i++)
	{
		setBitDirection(connected_port,(int)i , '1');
	}
	//make last 4 pins input pins and enable internal pull up
	for (i = 4 ; i<8 ; i++)
 652:	cf 5f       	subi	r28, 0xFF	; 255
 654:	c8 30       	cpi	r28, 0x08	; 8
 656:	88 f3       	brcs	.-30     	; 0x63a <keypadInitialization+0x20>
	{
		setBitDirection(connected_port,(int)i , '0');
		pullUpConnect(connected_port,(int)i , '1');
	}
}
 658:	cf 91       	pop	r28
 65a:	1f 91       	pop	r17
 65c:	0f 91       	pop	r16
 65e:	08 95       	ret

00000660 <keypadRead>:

unsigned char keypadRead()
{
 660:	bf 92       	push	r11
 662:	cf 92       	push	r12
 664:	df 92       	push	r13
 666:	ef 92       	push	r14
 668:	ff 92       	push	r15
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	60 97       	sbiw	r28, 0x10	; 16
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	f8 94       	cli
 67c:	de bf       	out	0x3e, r29	; 62
 67e:	0f be       	out	0x3f, r0	; 63
 680:	cd bf       	out	0x3d, r28	; 61
	{'1','2','3','-'},
	{'c','0','=','+'}
     };
	
	*/
	char arr[4][4] ={{'7','8','9','/'},
 682:	80 e1       	ldi	r24, 0x10	; 16
 684:	e0 e6       	ldi	r30, 0x60	; 96
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	de 01       	movw	r26, r28
 68a:	11 96       	adiw	r26, 0x01	; 1
 68c:	01 90       	ld	r0, Z+
 68e:	0d 92       	st	X+, r0
 690:	8a 95       	dec	r24
 692:	e1 f7       	brne	.-8      	; 0x68c <keypadRead+0x2c>
					{'4','5','6','*'},
					{'1','2','3','-'},
					{'c','0','=','+'}
				    };
	char row , col , val = 'Z';			  
 694:	0f 2e       	mov	r0, r31
 696:	fa e5       	ldi	r31, 0x5A	; 90
 698:	bf 2e       	mov	r11, r31
 69a:	f0 2d       	mov	r31, r0
    for (row = 0 ; row < 4 ; row ++)
 69c:	00 e0       	ldi	r16, 0x00	; 0
 69e:	3c c0       	rjmp	.+120    	; 0x718 <keypadRead+0xb8>
    {
		setBit(connected_port,0);
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	84 e4       	ldi	r24, 0x44	; 68
 6a6:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		setBit(connected_port,1);
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	84 e4       	ldi	r24, 0x44	; 68
 6b0:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		setBit(connected_port,2);
 6b4:	62 e0       	ldi	r22, 0x02	; 2
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	84 e4       	ldi	r24, 0x44	; 68
 6ba:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		setBit(connected_port,3);
 6be:	63 e0       	ldi	r22, 0x03	; 3
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	84 e4       	ldi	r24, 0x44	; 68
 6c4:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		clearBit(connected_port,(int)row);
 6c8:	c0 2e       	mov	r12, r16
 6ca:	d1 2c       	mov	r13, r1
 6cc:	b6 01       	movw	r22, r12
 6ce:	84 e4       	ldi	r24, 0x44	; 68
 6d0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
		for (col = 0 ; col < 4 ; col++)
 6d4:	10 e0       	ldi	r17, 0x00	; 0
 6d6:	1a c0       	rjmp	.+52     	; 0x70c <keypadRead+0xac>
		{
			if (readBit(connected_port,(col+4)) == 0)
 6d8:	e1 2e       	mov	r14, r17
 6da:	f1 2c       	mov	r15, r1
 6dc:	b7 01       	movw	r22, r14
 6de:	6c 5f       	subi	r22, 0xFC	; 252
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	84 e4       	ldi	r24, 0x44	; 68
 6e4:	0e 94 29 02 	call	0x452	; 0x452 <readBit>
 6e8:	81 11       	cpse	r24, r1
 6ea:	0f c0       	rjmp	.+30     	; 0x70a <keypadRead+0xaa>
			{
				val = arr[row][col];
 6ec:	cc 0c       	add	r12, r12
 6ee:	dd 1c       	adc	r13, r13
 6f0:	cc 0c       	add	r12, r12
 6f2:	dd 1c       	adc	r13, r13
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	8c 0f       	add	r24, r28
 6fa:	9d 1f       	adc	r25, r29
 6fc:	c8 0e       	add	r12, r24
 6fe:	d9 1e       	adc	r13, r25
 700:	f6 01       	movw	r30, r12
 702:	ee 0d       	add	r30, r14
 704:	ff 1d       	adc	r31, r15
 706:	b0 80       	ld	r11, Z
				break;
 708:	03 c0       	rjmp	.+6      	; 0x710 <keypadRead+0xb0>
		setBit(connected_port,0);
		setBit(connected_port,1);
		setBit(connected_port,2);
		setBit(connected_port,3);
		clearBit(connected_port,(int)row);
		for (col = 0 ; col < 4 ; col++)
 70a:	1f 5f       	subi	r17, 0xFF	; 255
 70c:	14 30       	cpi	r17, 0x04	; 4
 70e:	20 f3       	brcs	.-56     	; 0x6d8 <keypadRead+0x78>
			{
				val = arr[row][col];
				break;
			}
		}
		if (val != 'Z')
 710:	9a e5       	ldi	r25, 0x5A	; 90
 712:	b9 12       	cpse	r11, r25
 714:	03 c0       	rjmp	.+6      	; 0x71c <keypadRead+0xbc>
					{'4','5','6','*'},
					{'1','2','3','-'},
					{'c','0','=','+'}
				    };
	char row , col , val = 'Z';			  
    for (row = 0 ; row < 4 ; row ++)
 716:	0f 5f       	subi	r16, 0xFF	; 255
 718:	04 30       	cpi	r16, 0x04	; 4
 71a:	10 f2       	brcs	.-124    	; 0x6a0 <keypadRead+0x40>
		{
			break;
		}	
    }
	return val;
 71c:	8b 2d       	mov	r24, r11
 71e:	60 96       	adiw	r28, 0x10	; 16
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	bf 90       	pop	r11
 73c:	08 95       	ret

0000073e <send_pulse>:
#define CURSOR_ON_DISPLAN_ON 0x0E
#define CLEAR_SCREEN 0x01
#define ENTRY_MODE 0x06
void send_pulse()
{
	setBit(ENABEL_PORT,ENABEL_PIN);
 73e:	60 e0       	ldi	r22, 0x00	; 0
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	82 e4       	ldi	r24, 0x42	; 66
 744:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 748:	8f e9       	ldi	r24, 0x9F	; 159
 74a:	9f e0       	ldi	r25, 0x0F	; 15
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <send_pulse+0xe>
 750:	00 c0       	rjmp	.+0      	; 0x752 <send_pulse+0x14>
 752:	00 00       	nop
	_delay_ms(2);
	clearBit(ENABEL_PORT,ENABEL_PIN);
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	82 e4       	ldi	r24, 0x42	; 66
 75a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
 75e:	8f e9       	ldi	r24, 0x9F	; 159
 760:	9f e0       	ldi	r25, 0x0F	; 15
 762:	01 97       	sbiw	r24, 0x01	; 1
 764:	f1 f7       	brne	.-4      	; 0x762 <send_pulse+0x24>
 766:	00 c0       	rjmp	.+0      	; 0x768 <send_pulse+0x2a>
 768:	00 00       	nop
 76a:	08 95       	ret

0000076c <LCD_sendCommand>:
	_delay_ms(2);
}
void LCD_sendCommand(unsigned char cmd)
{
 76c:	cf 93       	push	r28
 76e:	c8 2f       	mov	r28, r24
			_delay_ms(1);
			writeLow_4pins(LCD_CONNECTED_PORT,cmd);
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd>>4);
 770:	68 2f       	mov	r22, r24
 772:	62 95       	swap	r22
 774:	6f 70       	andi	r22, 0x0F	; 15
 776:	81 e4       	ldi	r24, 0x41	; 65
 778:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	82 e4       	ldi	r24, 0x42	; 66
 782:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
			send_pulse();
 786:	0e 94 9f 03 	call	0x73e	; 0x73e <send_pulse>
 78a:	8f ec       	ldi	r24, 0xCF	; 207
 78c:	97 e0       	ldi	r25, 0x07	; 7
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	f1 f7       	brne	.-4      	; 0x78e <LCD_sendCommand+0x22>
 792:	00 c0       	rjmp	.+0      	; 0x794 <LCD_sendCommand+0x28>
 794:	00 00       	nop
			_delay_ms(1);
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd);
 796:	6c 2f       	mov	r22, r28
 798:	81 e4       	ldi	r24, 0x41	; 65
 79a:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	82 e4       	ldi	r24, 0x42	; 66
 7a4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
			send_pulse();
 7a8:	0e 94 9f 03 	call	0x73e	; 0x73e <send_pulse>
 7ac:	8f ec       	ldi	r24, 0xCF	; 207
 7ae:	97 e0       	ldi	r25, 0x07	; 7
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	f1 f7       	brne	.-4      	; 0x7b0 <LCD_sendCommand+0x44>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <LCD_sendCommand+0x4a>
 7b6:	00 00       	nop
		#endif
	#endif 
	_delay_ms(1);
}
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <LCD_Initialization>:
 7bc:	2f ef       	ldi	r18, 0xFF	; 255
 7be:	81 ee       	ldi	r24, 0xE1	; 225
 7c0:	94 e0       	ldi	r25, 0x04	; 4
 7c2:	21 50       	subi	r18, 0x01	; 1
 7c4:	80 40       	sbci	r24, 0x00	; 0
 7c6:	90 40       	sbci	r25, 0x00	; 0
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <LCD_Initialization+0x6>
 7ca:	00 c0       	rjmp	.+0      	; 0x7cc <LCD_Initialization+0x10>
 7cc:	00 00       	nop
			setBitDirection(LCD_CONNECTED_PORT,0,'1');
			setBitDirection(LCD_CONNECTED_PORT,1,'1');
			setBitDirection(LCD_CONNECTED_PORT,2,'1');
			setBitDirection(LCD_CONNECTED_PORT,3,'1');
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			setBitDirection(LCD_CONNECTED_PORT,4,'1');
 7ce:	41 e3       	ldi	r20, 0x31	; 49
 7d0:	64 e0       	ldi	r22, 0x04	; 4
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	81 e4       	ldi	r24, 0x41	; 65
 7d6:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,5,'1');
 7da:	41 e3       	ldi	r20, 0x31	; 49
 7dc:	65 e0       	ldi	r22, 0x05	; 5
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	81 e4       	ldi	r24, 0x41	; 65
 7e2:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,6,'1');
 7e6:	41 e3       	ldi	r20, 0x31	; 49
 7e8:	66 e0       	ldi	r22, 0x06	; 6
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	81 e4       	ldi	r24, 0x41	; 65
 7ee:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,7,'1');
 7f2:	41 e3       	ldi	r20, 0x31	; 49
 7f4:	67 e0       	ldi	r22, 0x07	; 7
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	81 e4       	ldi	r24, 0x41	; 65
 7fa:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
		#else
			#warning "You must set IS_CONNECTED_TO_HIGH_PINS 0 to connect lcd to first 4-bit of any port or 1 to connect lcd to last 4-bit of any port"
		#endif
		
		setBitDirection(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN,'1');
 7fe:	41 e3       	ldi	r20, 0x31	; 49
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	82 e4       	ldi	r24, 0x42	; 66
 806:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
		setBitDirection(ENABEL_PORT,ENABEL_PIN,'1');
 80a:	41 e3       	ldi	r20, 0x31	; 49
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	82 e4       	ldi	r24, 0x42	; 66
 812:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
		
		LCD_sendCommand(0x02); //return home
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_sendCommand>
 81c:	8f e1       	ldi	r24, 0x1F	; 31
 81e:	9e e4       	ldi	r25, 0x4E	; 78
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 824:	00 c0       	rjmp	.+0      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 826:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(LCD_4BIT_MODE);//FOUR_BITS MODE
 828:	88 e2       	ldi	r24, 0x28	; 40
 82a:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_sendCommand>
 82e:	8f ec       	ldi	r24, 0xCF	; 207
 830:	97 e0       	ldi	r25, 0x07	; 7
 832:	01 97       	sbiw	r24, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 838:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(CURSOR_ON_DISPLAN_ON);//CURSOR_ON_DISPLAN_ON
 83a:	8e e0       	ldi	r24, 0x0E	; 14
 83c:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_sendCommand>
 840:	8f ec       	ldi	r24, 0xCF	; 207
 842:	97 e0       	ldi	r25, 0x07	; 7
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 848:	00 c0       	rjmp	.+0      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 84a:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(0x01);//CLEAR_SCREEN
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_sendCommand>
 852:	8f e1       	ldi	r24, 0x1F	; 31
 854:	9e e4       	ldi	r25, 0x4E	; 78
 856:	01 97       	sbiw	r24, 0x01	; 1
 858:	f1 f7       	brne	.-4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85c:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(ENTRY_MODE);//ENTRY_MODE
 85e:	86 e0       	ldi	r24, 0x06	; 6
 860:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_sendCommand>
 864:	08 95       	ret

00000866 <LCD_printCharacter>:
	#endif
}

void LCD_printCharacter(char character)
{
 866:	cf 93       	push	r28
 868:	c8 2f       	mov	r28, r24
			send_pulse();
			writeLow_4pins(LCD_CONNECTED_PORT,character);
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,character>>4);
 86a:	68 2f       	mov	r22, r24
 86c:	62 95       	swap	r22
 86e:	6f 70       	andi	r22, 0x0F	; 15
 870:	81 e4       	ldi	r24, 0x41	; 65
 872:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 876:	61 e0       	ldi	r22, 0x01	; 1
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	82 e4       	ldi	r24, 0x42	; 66
 87c:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
			send_pulse();
 880:	0e 94 9f 03 	call	0x73e	; 0x73e <send_pulse>
			writeHigh_4pins(LCD_CONNECTED_PORT,character);
 884:	6c 2f       	mov	r22, r28
 886:	81 e4       	ldi	r24, 0x41	; 65
 888:	0e 94 c5 01 	call	0x38a	; 0x38a <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	82 e4       	ldi	r24, 0x42	; 66
 892:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
			send_pulse();
 896:	0e 94 9f 03 	call	0x73e	; 0x73e <send_pulse>
 89a:	8f ec       	ldi	r24, 0xCF	; 207
 89c:	97 e0       	ldi	r25, 0x07	; 7
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	f1 f7       	brne	.-4      	; 0x89e <LCD_printCharacter+0x38>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <LCD_printCharacter+0x3e>
 8a4:	00 00       	nop
		#endif

	#endif
	_delay_ms(1);
}
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <LCD_printString>:

void LCD_printString(char* ptr)
{
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	ec 01       	movw	r28, r24
	while(*ptr != 0)
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <LCD_printString+0xe>
	{
		LCD_printCharacter(*ptr);
 8b2:	0e 94 33 04 	call	0x866	; 0x866 <LCD_printCharacter>
		++ptr;
 8b6:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(1);
}

void LCD_printString(char* ptr)
{
	while(*ptr != 0)
 8b8:	88 81       	ld	r24, Y
 8ba:	81 11       	cpse	r24, r1
 8bc:	fa cf       	rjmp	.-12     	; 0x8b2 <LCD_printString+0x8>
	{
		LCD_printCharacter(*ptr);
		++ptr;
	}
}
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	08 95       	ret

000008c4 <LCD_moveCursor>:
void LCD_moveCursor(char row , char column)
{
	char address;
	if (row == 1)
 8c4:	81 30       	cpi	r24, 0x01	; 1
 8c6:	19 f4       	brne	.+6      	; 0x8ce <LCD_moveCursor+0xa>
	{
		address = 0x80 + column -1;
 8c8:	8f e7       	ldi	r24, 0x7F	; 127
 8ca:	86 0f       	add	r24, r22
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <LCD_moveCursor+0xe>
	}
	else
	{
		address = 0xC0 + column -1;
 8ce:	8f eb       	ldi	r24, 0xBF	; 191
 8d0:	86 0f       	add	r24, r22
	}
	LCD_sendCommand(address);
 8d2:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_sendCommand>
 8d6:	08 95       	ret

000008d8 <clearScreen>:
}
void clearScreen()
{
	LCD_sendCommand(0x01);
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_sendCommand>
 8de:	8f e1       	ldi	r24, 0x1F	; 31
 8e0:	9e e4       	ldi	r25, 0x4E	; 78
 8e2:	01 97       	sbiw	r24, 0x01	; 1
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <clearScreen+0xa>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <clearScreen+0x10>
 8e8:	00 00       	nop
 8ea:	08 95       	ret

000008ec <set_password>:
		}
    }
}

void set_password()
{
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	2f ef       	ldi	r18, 0xFF	; 255
 8f2:	84 e3       	ldi	r24, 0x34	; 52
 8f4:	9c e0       	ldi	r25, 0x0C	; 12
 8f6:	21 50       	subi	r18, 0x01	; 1
 8f8:	80 40       	sbci	r24, 0x00	; 0
 8fa:	90 40       	sbci	r25, 0x00	; 0
 8fc:	e1 f7       	brne	.-8      	; 0x8f6 <set_password+0xa>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <set_password+0x14>
 900:	00 00       	nop
	_delay_ms(500);
	char value = 'Z' , i;
	clearScreen();
 902:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
	LCD_printString("set pass:");
 906:	80 e7       	ldi	r24, 0x70	; 112
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
	for (i = 0 ;i < 4 ;i++)
 90e:	d0 e0       	ldi	r29, 0x00	; 0
 910:	2a c0       	rjmp	.+84     	; 0x966 <set_password+0x7a>
	{
		if (EEPROM_read(STATUS) == 0xff)
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_read>
 91a:	8f 3f       	cpi	r24, 0xFF	; 255
 91c:	19 f5       	brne	.+70     	; 0x964 <set_password+0x78>
		{
			
			do
			{
				value = keypadRead();
 91e:	0e 94 30 03 	call	0x660	; 0x660 <keypadRead>
 922:	c8 2f       	mov	r28, r24
			} while (value == 'Z');
 924:	8a 35       	cpi	r24, 0x5A	; 90
 926:	d9 f3       	breq	.-10     	; 0x91e <set_password+0x32>
			LCD_printCharacter(value);
 928:	0e 94 33 04 	call	0x866	; 0x866 <LCD_printCharacter>
 92c:	2f ef       	ldi	r18, 0xFF	; 255
 92e:	86 e1       	ldi	r24, 0x16	; 22
 930:	91 e1       	ldi	r25, 0x11	; 17
 932:	21 50       	subi	r18, 0x01	; 1
 934:	80 40       	sbci	r24, 0x00	; 0
 936:	90 40       	sbci	r25, 0x00	; 0
 938:	e1 f7       	brne	.-8      	; 0x932 <set_password+0x46>
 93a:	00 c0       	rjmp	.+0      	; 0x93c <set_password+0x50>
 93c:	00 00       	nop
			_delay_ms(700);
			LCD_moveCursor(1,10+i);
 93e:	6a e0       	ldi	r22, 0x0A	; 10
 940:	6d 0f       	add	r22, r29
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
			LCD_printCharacter('*');
 948:	8a e2       	ldi	r24, 0x2A	; 42
 94a:	0e 94 33 04 	call	0x866	; 0x866 <LCD_printCharacter>
			LCD_moveCursor(1,11+i);
 94e:	6b e0       	ldi	r22, 0x0B	; 11
 950:	6d 0f       	add	r22, r29
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
			EEPROM_write(EEPROM_LOCATION1+i,value);
 958:	8d 2f       	mov	r24, r29
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	6c 2f       	mov	r22, r28
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <EEPROM_write>
{
	_delay_ms(500);
	char value = 'Z' , i;
	clearScreen();
	LCD_printString("set pass:");
	for (i = 0 ;i < 4 ;i++)
 964:	df 5f       	subi	r29, 0xFF	; 255
 966:	d4 30       	cpi	r29, 0x04	; 4
 968:	a0 f2       	brcs	.-88     	; 0x912 <set_password+0x26>
			LCD_printCharacter('*');
			LCD_moveCursor(1,11+i);
			EEPROM_write(EEPROM_LOCATION1+i,value);
		}
	}
	EEPROM_write(STATUS,0x00);
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <EEPROM_write>
	clearScreen();
 974:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
	
}
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	08 95       	ret

0000097e <puse>:

void puse()
{
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
	char counter = 20;
	setBit('a',1);
 982:	61 e0       	ldi	r22, 0x01	; 1
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	81 e6       	ldi	r24, 0x61	; 97
 988:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
	clearBit('A',0);
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	81 e4       	ldi	r24, 0x41	; 65
 992:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
	clearBit('A',2);
 996:	62 e0       	ldi	r22, 0x02	; 2
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	81 e4       	ldi	r24, 0x41	; 65
 99c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
	clearScreen();
 9a0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
	LCD_printString("Safe is locked: ");
 9a4:	8a e7       	ldi	r24, 0x7A	; 122
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
	LCD_moveCursor(2,1);
 9ac:	61 e0       	ldi	r22, 0x01	; 1
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
	LCD_printString("for ");
 9b4:	8b e8       	ldi	r24, 0x8B	; 139
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
	
}

void puse()
{
	char counter = 20;
 9bc:	d4 e1       	ldi	r29, 0x14	; 20
	clearBit('A',2);
	clearScreen();
	LCD_printString("Safe is locked: ");
	LCD_moveCursor(2,1);
	LCD_printString("for ");
	while(counter)
 9be:	27 c0       	rjmp	.+78     	; 0xa0e <puse+0x90>
	{
		LCD_moveCursor(2,5);
 9c0:	65 e0       	ldi	r22, 0x05	; 5
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
		LCD_printCharacter((counter/10)+48);
 9c8:	cd ec       	ldi	r28, 0xCD	; 205
 9ca:	dc 9f       	mul	r29, r28
 9cc:	c1 2d       	mov	r28, r1
 9ce:	11 24       	eor	r1, r1
 9d0:	c6 95       	lsr	r28
 9d2:	c6 95       	lsr	r28
 9d4:	c6 95       	lsr	r28
 9d6:	80 e3       	ldi	r24, 0x30	; 48
 9d8:	8c 0f       	add	r24, r28
 9da:	0e 94 33 04 	call	0x866	; 0x866 <LCD_printCharacter>
		LCD_printCharacter((counter%10)+48);
 9de:	cc 0f       	add	r28, r28
 9e0:	8c 2f       	mov	r24, r28
 9e2:	88 0f       	add	r24, r24
 9e4:	88 0f       	add	r24, r24
 9e6:	c8 0f       	add	r28, r24
 9e8:	8d 2f       	mov	r24, r29
 9ea:	8c 1b       	sub	r24, r28
 9ec:	80 5d       	subi	r24, 0xD0	; 208
 9ee:	0e 94 33 04 	call	0x866	; 0x866 <LCD_printCharacter>
		LCD_printString(" sec");	
 9f2:	80 e9       	ldi	r24, 0x90	; 144
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
		counter -= 1;
 9fa:	d1 50       	subi	r29, 0x01	; 1
 9fc:	2f ef       	ldi	r18, 0xFF	; 255
 9fe:	89 e6       	ldi	r24, 0x69	; 105
 a00:	98 e1       	ldi	r25, 0x18	; 24
 a02:	21 50       	subi	r18, 0x01	; 1
 a04:	80 40       	sbci	r24, 0x00	; 0
 a06:	90 40       	sbci	r25, 0x00	; 0
 a08:	e1 f7       	brne	.-8      	; 0xa02 <puse+0x84>
 a0a:	00 c0       	rjmp	.+0      	; 0xa0c <puse+0x8e>
 a0c:	00 00       	nop
	clearBit('A',2);
	clearScreen();
	LCD_printString("Safe is locked: ");
	LCD_moveCursor(2,1);
	LCD_printString("for ");
	while(counter)
 a0e:	d1 11       	cpse	r29, r1
 a10:	d7 cf       	rjmp	.-82     	; 0x9c0 <puse+0x42>
		LCD_printCharacter((counter%10)+48);
		LCD_printString(" sec");	
		counter -= 1;
		_delay_ms(1000);
	}
}
 a12:	df 91       	pop	r29
 a14:	cf 91       	pop	r28
 a16:	08 95       	ret

00000a18 <reset_passwor>:

char reset_passwor()
{
	char value;
	clearScreen();
 a18:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
	LCD_printString("Reset Password?");
 a1c:	85 e9       	ldi	r24, 0x95	; 149
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
	LCD_moveCursor(2,1);
 a24:	61 e0       	ldi	r22, 0x01	; 1
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
	LCD_printString("YES: 1    NO: 2");
 a2c:	85 ea       	ldi	r24, 0xA5	; 165
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
	do
	{
		value = keypadRead();
 a34:	0e 94 30 03 	call	0x660	; 0x660 <keypadRead>
	} while (value == 'Z');
 a38:	8a 35       	cpi	r24, 0x5A	; 90
 a3a:	e1 f3       	breq	.-8      	; 0xa34 <reset_passwor+0x1c>
	
	if (value == '1')
 a3c:	81 33       	cpi	r24, 0x31	; 49
 a3e:	39 f4       	brne	.+14     	; 0xa4e <reset_passwor+0x36>
	{
		EEPROM_write(STATUS,0xff);
 a40:	6f ef       	ldi	r22, 0xFF	; 255
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <EEPROM_write>
		return '1';
 a4a:	81 e3       	ldi	r24, 0x31	; 49
 a4c:	08 95       	ret
	}else{
		return '0';
 a4e:	80 e3       	ldi	r24, 0x30	; 48
	}
 a50:	08 95       	ret

00000a52 <main>:
if user forget the password this function will be used to reset the password again
*/
char reset_passwor();

int main(void)
{
 a52:	ef 92       	push	r14
 a54:	ff 92       	push	r15
 a56:	0f 93       	push	r16
 a58:	1f 93       	push	r17
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	00 d0       	rcall	.+0      	; 0xa60 <main+0xe>
 a60:	00 d0       	rcall	.+0      	; 0xa62 <main+0x10>
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
	
	LCD_Initialization();
 a66:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_Initialization>
	keypadInitialization();
 a6a:	0e 94 0d 03 	call	0x61a	; 0x61a <keypadInitialization>
	setBitDirection('A',0,'1');
 a6e:	41 e3       	ldi	r20, 0x31	; 49
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	81 e4       	ldi	r24, 0x41	; 65
 a76:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
	setBitDirection('A',1,'1');
 a7a:	41 e3       	ldi	r20, 0x31	; 49
 a7c:	61 e0       	ldi	r22, 0x01	; 1
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	81 e4       	ldi	r24, 0x41	; 65
 a82:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
	setBitDirection('A',2,'1');
 a86:	41 e3       	ldi	r20, 0x31	; 49
 a88:	62 e0       	ldi	r22, 0x02	; 2
 a8a:	70 e0       	ldi	r23, 0x00	; 0
 a8c:	81 e4       	ldi	r24, 0x41	; 65
 a8e:	0e 94 19 01 	call	0x232	; 0x232 <setBitDirection>
	/*
	 password[4]: array contains the value entered by user and compare this values to the values stored in EEPROM
	 when flag is equals to 1 that means that Safe still locked
	*/
	char password[4] ,value, flag = 1 , no_trails = 5 , i;
	if (EEPROM_read(STATUS) == 0xff)
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_read>
 a9a:	8f 3f       	cpi	r24, 0xFF	; 255
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <main+0x50>
	{
		set_password();
 a9e:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_password>
			LCD_moveCursor(2,1);
			LCD_printString("Safe is opened");
			setBit('A',2);
			clearBit('A',0);
			clearBit('A',1);
			flag = 0;
 aa2:	0f 2e       	mov	r0, r31
 aa4:	f5 e0       	ldi	r31, 0x05	; 5
 aa6:	ff 2e       	mov	r15, r31
 aa8:	f0 2d       	mov	r31, r0
 aaa:	ee 24       	eor	r14, r14
 aac:	e3 94       	inc	r14
 aae:	a3 c0       	rjmp	.+326    	; 0xbf6 <main+0x1a4>
		set_password();
	}
	 
    while (flag == 1) 
    {
		setBit('A',0);
 ab0:	60 e0       	ldi	r22, 0x00	; 0
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	81 e4       	ldi	r24, 0x41	; 65
 ab6:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
		clearBit('A',1);
 aba:	61 e0       	ldi	r22, 0x01	; 1
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	81 e4       	ldi	r24, 0x41	; 65
 ac0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
		clearBit('A',2);
 ac4:	62 e0       	ldi	r22, 0x02	; 2
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	81 e4       	ldi	r24, 0x41	; 65
 aca:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
		
		if (no_trails == 0)
 ace:	f1 10       	cpse	r15, r1
 ad0:	18 c0       	rjmp	.+48     	; 0xb02 <main+0xb0>
		{
			puse();
 ad2:	0e 94 bf 04 	call	0x97e	; 0x97e <puse>
			if (reset_passwor() == '1')
 ad6:	0e 94 0c 05 	call	0xa18	; 0xa18 <reset_passwor>
 ada:	81 33       	cpi	r24, 0x31	; 49
 adc:	39 f4       	brne	.+14     	; 0xaec <main+0x9a>
			{
				no_trails = 5;
				set_password();
 ade:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_password>
		if (no_trails == 0)
		{
			puse();
			if (reset_passwor() == '1')
			{
				no_trails = 5;
 ae2:	0f 2e       	mov	r0, r31
 ae4:	f5 e0       	ldi	r31, 0x05	; 5
 ae6:	ff 2e       	mov	r15, r31
 ae8:	f0 2d       	mov	r31, r0
 aea:	0b c0       	rjmp	.+22     	; 0xb02 <main+0xb0>
				set_password();
			}
			else
			{
				clearScreen();
 aec:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
 af0:	2f ef       	ldi	r18, 0xFF	; 255
 af2:	84 e3       	ldi	r24, 0x34	; 52
 af4:	9c e0       	ldi	r25, 0x0C	; 12
 af6:	21 50       	subi	r18, 0x01	; 1
 af8:	80 40       	sbci	r24, 0x00	; 0
 afa:	90 40       	sbci	r25, 0x00	; 0
 afc:	e1 f7       	brne	.-8      	; 0xaf6 <main+0xa4>
 afe:	00 c0       	rjmp	.+0      	; 0xb00 <main+0xae>
 b00:	00 00       	nop
				_delay_ms(500);
			}
		}
		
		LCD_printString("check Pass:");
 b02:	85 eb       	ldi	r24, 0xB5	; 181
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
		
		for (i = 0 ; i<4 ; i++)
 b0a:	00 e0       	ldi	r16, 0x00	; 0
 b0c:	25 c0       	rjmp	.+74     	; 0xb58 <main+0x106>
		{
			do
			{
				value = keypadRead();
 b0e:	0e 94 30 03 	call	0x660	; 0x660 <keypadRead>
 b12:	18 2f       	mov	r17, r24
			} while (value == 'Z');
 b14:	8a 35       	cpi	r24, 0x5A	; 90
 b16:	d9 f3       	breq	.-10     	; 0xb0e <main+0xbc>
			LCD_printCharacter(value);
 b18:	0e 94 33 04 	call	0x866	; 0x866 <LCD_printCharacter>
 b1c:	2f ef       	ldi	r18, 0xFF	; 255
 b1e:	86 e1       	ldi	r24, 0x16	; 22
 b20:	91 e1       	ldi	r25, 0x11	; 17
 b22:	21 50       	subi	r18, 0x01	; 1
 b24:	80 40       	sbci	r24, 0x00	; 0
 b26:	90 40       	sbci	r25, 0x00	; 0
 b28:	e1 f7       	brne	.-8      	; 0xb22 <main+0xd0>
 b2a:	00 c0       	rjmp	.+0      	; 0xb2c <main+0xda>
 b2c:	00 00       	nop
			_delay_ms(700);
			LCD_moveCursor(1,12+i);
 b2e:	6c e0       	ldi	r22, 0x0C	; 12
 b30:	60 0f       	add	r22, r16
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
			LCD_printCharacter('*');
 b38:	8a e2       	ldi	r24, 0x2A	; 42
 b3a:	0e 94 33 04 	call	0x866	; 0x866 <LCD_printCharacter>
			LCD_moveCursor(1,13+i);
 b3e:	6d e0       	ldi	r22, 0x0D	; 13
 b40:	60 0f       	add	r22, r16
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
			
			password[i] = value;
 b48:	e1 e0       	ldi	r30, 0x01	; 1
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	ec 0f       	add	r30, r28
 b4e:	fd 1f       	adc	r31, r29
 b50:	e0 0f       	add	r30, r16
 b52:	f1 1d       	adc	r31, r1
 b54:	10 83       	st	Z, r17
			}
		}
		
		LCD_printString("check Pass:");
		
		for (i = 0 ; i<4 ; i++)
 b56:	0f 5f       	subi	r16, 0xFF	; 255
 b58:	04 30       	cpi	r16, 0x04	; 4
 b5a:	c8 f2       	brcs	.-78     	; 0xb0e <main+0xbc>
			LCD_moveCursor(1,13+i);
			
			password[i] = value;
		}
		
		clearScreen();
 b5c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
		
		if (password[0] == EEPROM_read(EEPROM_LOCATION1) && password[1] == EEPROM_read(EEPROM_LOCATION2)&& password[2] == EEPROM_read(EEPROM_LOCATION3) && password[3] == EEPROM_read(EEPROM_LOCATION4))
 b60:	19 81       	ldd	r17, Y+1	; 0x01
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_read>
 b6a:	18 13       	cpse	r17, r24
 b6c:	32 c0       	rjmp	.+100    	; 0xbd2 <main+0x180>
 b6e:	1a 81       	ldd	r17, Y+2	; 0x02
 b70:	82 e0       	ldi	r24, 0x02	; 2
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_read>
 b78:	18 13       	cpse	r17, r24
 b7a:	2b c0       	rjmp	.+86     	; 0xbd2 <main+0x180>
 b7c:	1b 81       	ldd	r17, Y+3	; 0x03
 b7e:	83 e0       	ldi	r24, 0x03	; 3
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_read>
 b86:	18 13       	cpse	r17, r24
 b88:	24 c0       	rjmp	.+72     	; 0xbd2 <main+0x180>
 b8a:	1c 81       	ldd	r17, Y+4	; 0x04
 b8c:	84 e0       	ldi	r24, 0x04	; 4
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_read>
 b94:	18 13       	cpse	r17, r24
 b96:	1d c0       	rjmp	.+58     	; 0xbd2 <main+0x180>
		{
			LCD_printString("password is true");
 b98:	81 ec       	ldi	r24, 0xC1	; 193
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
			LCD_moveCursor(2,1);
 ba0:	61 e0       	ldi	r22, 0x01	; 1
 ba2:	82 e0       	ldi	r24, 0x02	; 2
 ba4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCD_moveCursor>
			LCD_printString("Safe is opened");
 ba8:	82 ed       	ldi	r24, 0xD2	; 210
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
			setBit('A',2);
 bb0:	62 e0       	ldi	r22, 0x02	; 2
 bb2:	70 e0       	ldi	r23, 0x00	; 0
 bb4:	81 e4       	ldi	r24, 0x41	; 65
 bb6:	0e 94 8e 01 	call	0x31c	; 0x31c <setBit>
			clearBit('A',0);
 bba:	60 e0       	ldi	r22, 0x00	; 0
 bbc:	70 e0       	ldi	r23, 0x00	; 0
 bbe:	81 e4       	ldi	r24, 0x41	; 65
 bc0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
			clearBit('A',1);
 bc4:	61 e0       	ldi	r22, 0x01	; 1
 bc6:	70 e0       	ldi	r23, 0x00	; 0
 bc8:	81 e4       	ldi	r24, 0x41	; 65
 bca:	0e 94 ee 01 	call	0x3dc	; 0x3dc <clearBit>
			flag = 0;
 bce:	e1 2c       	mov	r14, r1
 bd0:	12 c0       	rjmp	.+36     	; 0xbf6 <main+0x1a4>
		}
		else
		{
			no_trails -=1;
 bd2:	fa 94       	dec	r15
			clearScreen();
 bd4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
			LCD_printString("wrong password");
 bd8:	81 ee       	ldi	r24, 0xE1	; 225
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	0e 94 55 04 	call	0x8aa	; 0x8aa <LCD_printString>
 be0:	2f ef       	ldi	r18, 0xFF	; 255
 be2:	83 ed       	ldi	r24, 0xD3	; 211
 be4:	90 e3       	ldi	r25, 0x30	; 48
 be6:	21 50       	subi	r18, 0x01	; 1
 be8:	80 40       	sbci	r24, 0x00	; 0
 bea:	90 40       	sbci	r25, 0x00	; 0
 bec:	e1 f7       	brne	.-8      	; 0xbe6 <main+0x194>
 bee:	00 c0       	rjmp	.+0      	; 0xbf0 <main+0x19e>
 bf0:	00 00       	nop
			_delay_ms(2000);
			clearScreen();
 bf2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <clearScreen>
	if (EEPROM_read(STATUS) == 0xff)
	{
		set_password();
	}
	 
    while (flag == 1) 
 bf6:	21 e0       	ldi	r18, 0x01	; 1
 bf8:	e2 16       	cp	r14, r18
 bfa:	09 f4       	brne	.+2      	; 0xbfe <main+0x1ac>
 bfc:	59 cf       	rjmp	.-334    	; 0xab0 <main+0x5e>
			LCD_printString("wrong password");
			_delay_ms(2000);
			clearScreen();
		}
    }
}
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	0f 90       	pop	r0
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	1f 91       	pop	r17
 c10:	0f 91       	pop	r16
 c12:	ff 90       	pop	r15
 c14:	ef 90       	pop	r14
 c16:	08 95       	ret

00000c18 <__tablejump2__>:
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	05 90       	lpm	r0, Z+
 c1e:	f4 91       	lpm	r31, Z
 c20:	e0 2d       	mov	r30, r0
 c22:	09 94       	ijmp

00000c24 <_exit>:
 c24:	f8 94       	cli

00000c26 <__stop_program>:
 c26:	ff cf       	rjmp	.-2      	; 0xc26 <__stop_program>
