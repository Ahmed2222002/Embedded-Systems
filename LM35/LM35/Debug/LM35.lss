
LM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000009a4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000134f  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000808  00000000  00000000  00001ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a5a  00000000  00000000  000026fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d24  00000000  00000000  000037f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  0000451a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	01 01       	movw	r0, r2
  56:	1a 01       	movw	r2, r20
  58:	33 01       	movw	r6, r6
  5a:	4c 01       	movw	r8, r24
  5c:	64 01       	movw	r12, r8
  5e:	64 01       	movw	r12, r8
  60:	64 01       	movw	r12, r8
  62:	64 01       	movw	r12, r8
  64:	64 01       	movw	r12, r8
  66:	64 01       	movw	r12, r8
  68:	64 01       	movw	r12, r8
  6a:	64 01       	movw	r12, r8
  6c:	64 01       	movw	r12, r8
  6e:	64 01       	movw	r12, r8
  70:	64 01       	movw	r12, r8
  72:	64 01       	movw	r12, r8
  74:	64 01       	movw	r12, r8
  76:	64 01       	movw	r12, r8
  78:	64 01       	movw	r12, r8
  7a:	64 01       	movw	r12, r8
  7c:	64 01       	movw	r12, r8
  7e:	64 01       	movw	r12, r8
  80:	64 01       	movw	r12, r8
  82:	64 01       	movw	r12, r8
  84:	64 01       	movw	r12, r8
  86:	64 01       	movw	r12, r8
  88:	64 01       	movw	r12, r8
  8a:	64 01       	movw	r12, r8
  8c:	64 01       	movw	r12, r8
  8e:	64 01       	movw	r12, r8
  90:	64 01       	movw	r12, r8
  92:	64 01       	movw	r12, r8
  94:	01 01       	movw	r0, r2
  96:	1a 01       	movw	r2, r20
  98:	33 01       	movw	r6, r6
  9a:	4c 01       	movw	r8, r24
  9c:	70 01       	movw	r14, r0
  9e:	7b 01       	movw	r14, r22
  a0:	86 01       	movw	r16, r12
  a2:	91 01       	movw	r18, r2
  a4:	9b 01       	movw	r18, r22
  a6:	9b 01       	movw	r18, r22
  a8:	9b 01       	movw	r18, r22
  aa:	9b 01       	movw	r18, r22
  ac:	9b 01       	movw	r18, r22
  ae:	9b 01       	movw	r18, r22
  b0:	9b 01       	movw	r18, r22
  b2:	9b 01       	movw	r18, r22
  b4:	9b 01       	movw	r18, r22
  b6:	9b 01       	movw	r18, r22
  b8:	9b 01       	movw	r18, r22
  ba:	9b 01       	movw	r18, r22
  bc:	9b 01       	movw	r18, r22
  be:	9b 01       	movw	r18, r22
  c0:	9b 01       	movw	r18, r22
  c2:	9b 01       	movw	r18, r22
  c4:	9b 01       	movw	r18, r22
  c6:	9b 01       	movw	r18, r22
  c8:	9b 01       	movw	r18, r22
  ca:	9b 01       	movw	r18, r22
  cc:	9b 01       	movw	r18, r22
  ce:	9b 01       	movw	r18, r22
  d0:	9b 01       	movw	r18, r22
  d2:	9b 01       	movw	r18, r22
  d4:	9b 01       	movw	r18, r22
  d6:	9b 01       	movw	r18, r22
  d8:	9b 01       	movw	r18, r22
  da:	9b 01       	movw	r18, r22
  dc:	70 01       	movw	r14, r0
  de:	7b 01       	movw	r14, r22
  e0:	86 01       	movw	r16, r12
  e2:	91 01       	movw	r18, r2
  e4:	a9 01       	movw	r20, r18
  e6:	b0 01       	movw	r22, r0
  e8:	b7 01       	movw	r22, r14
  ea:	be 01       	movw	r22, r28
  ec:	c4 01       	movw	r24, r8
  ee:	c4 01       	movw	r24, r8
  f0:	c4 01       	movw	r24, r8
  f2:	c4 01       	movw	r24, r8
  f4:	c4 01       	movw	r24, r8
  f6:	c4 01       	movw	r24, r8
  f8:	c4 01       	movw	r24, r8
  fa:	c4 01       	movw	r24, r8
  fc:	c4 01       	movw	r24, r8
  fe:	c4 01       	movw	r24, r8
 100:	c4 01       	movw	r24, r8
 102:	c4 01       	movw	r24, r8
 104:	c4 01       	movw	r24, r8
 106:	c4 01       	movw	r24, r8
 108:	c4 01       	movw	r24, r8
 10a:	c4 01       	movw	r24, r8
 10c:	c4 01       	movw	r24, r8
 10e:	c4 01       	movw	r24, r8
 110:	c4 01       	movw	r24, r8
 112:	c4 01       	movw	r24, r8
 114:	c4 01       	movw	r24, r8
 116:	c4 01       	movw	r24, r8
 118:	c4 01       	movw	r24, r8
 11a:	c4 01       	movw	r24, r8
 11c:	c4 01       	movw	r24, r8
 11e:	c4 01       	movw	r24, r8
 120:	c4 01       	movw	r24, r8
 122:	c4 01       	movw	r24, r8
 124:	a9 01       	movw	r20, r18
 126:	b0 01       	movw	r22, r0
 128:	b7 01       	movw	r22, r14
 12a:	be 01       	movw	r22, r28
 12c:	d0 01       	movw	r26, r0
 12e:	dc 01       	movw	r26, r24
 130:	e8 01       	movw	r28, r16
 132:	f4 01       	movw	r30, r8
 134:	ff 01       	movw	r30, r30
 136:	ff 01       	movw	r30, r30
 138:	ff 01       	movw	r30, r30
 13a:	ff 01       	movw	r30, r30
 13c:	ff 01       	movw	r30, r30
 13e:	ff 01       	movw	r30, r30
 140:	ff 01       	movw	r30, r30
 142:	ff 01       	movw	r30, r30
 144:	ff 01       	movw	r30, r30
 146:	ff 01       	movw	r30, r30
 148:	ff 01       	movw	r30, r30
 14a:	ff 01       	movw	r30, r30
 14c:	ff 01       	movw	r30, r30
 14e:	ff 01       	movw	r30, r30
 150:	ff 01       	movw	r30, r30
 152:	ff 01       	movw	r30, r30
 154:	ff 01       	movw	r30, r30
 156:	ff 01       	movw	r30, r30
 158:	ff 01       	movw	r30, r30
 15a:	ff 01       	movw	r30, r30
 15c:	ff 01       	movw	r30, r30
 15e:	ff 01       	movw	r30, r30
 160:	ff 01       	movw	r30, r30
 162:	ff 01       	movw	r30, r30
 164:	ff 01       	movw	r30, r30
 166:	ff 01       	movw	r30, r30
 168:	ff 01       	movw	r30, r30
 16a:	ff 01       	movw	r30, r30
 16c:	d0 01       	movw	r26, r0
 16e:	dc 01       	movw	r26, r24
 170:	e8 01       	movw	r28, r16
 172:	f4 01       	movw	r30, r8

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf e5       	ldi	r28, 0x5F	; 95
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	a0 e6       	ldi	r26, 0x60	; 96
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e4 ea       	ldi	r30, 0xA4	; 164
 188:	f9 e0       	ldi	r31, 0x09	; 9
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a8 36       	cpi	r26, 0x68	; 104
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>
 196:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
 19a:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_exit>

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a2 <ADC_initialization>:
#include "macros.h"

void ADC_initialization()
{
	//Enable ADC
	SET_BIT(ADCSRA,ADEN);
 1a2:	86 b1       	in	r24, 0x06	; 6
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	86 b9       	out	0x06, r24	; 6
	
	//select ADC channel
	SET_BIT(ADMUX,MUX4);
 1a8:	87 b1       	in	r24, 0x07	; 7
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	87 b9       	out	0x07, r24	; 7
	
	//select reference voltage = 2.5v (internal volt)
	SET_BIT(ADMUX,REFS0);
 1ae:	87 b1       	in	r24, 0x07	; 7
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADMUX,REFS1);
 1b4:	87 b1       	in	r24, 0x07	; 7
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	87 b9       	out	0x07, r24	; 7
	
	//select prescaler = 64 
	SET_BIT(ADCSRA,ADPS1);
 1ba:	86 b1       	in	r24, 0x06	; 6
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
 1c0:	86 b1       	in	r24, 0x06	; 6
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	86 b9       	out	0x06, r24	; 6
 1c6:	08 95       	ret

000001c8 <ADC_read>:

unsigned short ADC_read()
{
	unsigned short adc_value;
	
	SET_BIT(ADCSRA,ADSC);
 1c8:	86 b1       	in	r24, 0x06	; 6
 1ca:	80 64       	ori	r24, 0x40	; 64
 1cc:	86 b9       	out	0x06, r24	; 6
	
	while(READ_BIT(ADCSRA,ADSC) == 1);
 1ce:	36 99       	sbic	0x06, 6	; 6
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <ADC_read+0x6>
	adc_value = ADCL;
 1d2:	24 b1       	in	r18, 0x04	; 4
	
	adc_value = adc_value | (ADCH<<8);
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	98 2f       	mov	r25, r24
 1da:	88 27       	eor	r24, r24
	
	return adc_value;
 1dc:	82 2b       	or	r24, r18
 1de:	08 95       	ret

000001e0 <setBitDirection>:
		break;
		
		case 'D':
		case 'd':
			PORTD &=0xF0;
			PORTD |=value;
 1e0:	41 33       	cpi	r20, 0x31	; 49
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <setBitDirection+0x8>
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <setBitDirection+0xa>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	e1 54       	subi	r30, 0x41	; 65
 1f0:	f1 09       	sbc	r31, r1
 1f2:	e4 32       	cpi	r30, 0x24	; 36
 1f4:	f1 05       	cpc	r31, r1
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <setBitDirection+0x1a>
 1f8:	67 c0       	rjmp	.+206    	; 0x2c8 <setBitDirection+0xe8>
 1fa:	e6 5d       	subi	r30, 0xD6	; 214
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	0c 94 bb 04 	jmp	0x976	; 0x976 <__tablejump2__>
 202:	22 23       	and	r18, r18
 204:	59 f0       	breq	.+22     	; 0x21c <setBitDirection+0x3c>
 206:	2a b3       	in	r18, 0x1a	; 26
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <setBitDirection+0x32>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <setBitDirection+0x2e>
 216:	82 2b       	or	r24, r18
 218:	8a bb       	out	0x1a, r24	; 26
 21a:	08 95       	ret
 21c:	2a b3       	in	r18, 0x1a	; 26
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <setBitDirection+0x48>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <setBitDirection+0x44>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	8a bb       	out	0x1a, r24	; 26
 232:	08 95       	ret
 234:	22 23       	and	r18, r18
 236:	59 f0       	breq	.+22     	; 0x24e <setBitDirection+0x6e>
 238:	27 b3       	in	r18, 0x17	; 23
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <setBitDirection+0x64>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <setBitDirection+0x60>
 248:	82 2b       	or	r24, r18
 24a:	87 bb       	out	0x17, r24	; 23
 24c:	08 95       	ret
 24e:	27 b3       	in	r18, 0x17	; 23
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <setBitDirection+0x7a>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <setBitDirection+0x76>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	87 bb       	out	0x17, r24	; 23
 264:	08 95       	ret
 266:	22 23       	and	r18, r18
 268:	59 f0       	breq	.+22     	; 0x280 <setBitDirection+0xa0>
 26a:	24 b3       	in	r18, 0x14	; 20
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <setBitDirection+0x96>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <setBitDirection+0x92>
 27a:	82 2b       	or	r24, r18
 27c:	84 bb       	out	0x14, r24	; 20
 27e:	08 95       	ret
 280:	24 b3       	in	r18, 0x14	; 20
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <setBitDirection+0xac>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <setBitDirection+0xa8>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	84 bb       	out	0x14, r24	; 20
 296:	08 95       	ret
 298:	22 23       	and	r18, r18
 29a:	59 f0       	breq	.+22     	; 0x2b2 <setBitDirection+0xd2>
 29c:	21 b3       	in	r18, 0x11	; 17
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <setBitDirection+0xc8>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <setBitDirection+0xc4>
 2ac:	82 2b       	or	r24, r18
 2ae:	81 bb       	out	0x11, r24	; 17
 2b0:	08 95       	ret
 2b2:	21 b3       	in	r18, 0x11	; 17
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <setBitDirection+0xde>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <setBitDirection+0xda>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	81 bb       	out	0x11, r24	; 17
 2c8:	08 95       	ret

000002ca <setBit>:
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	e1 54       	subi	r30, 0x41	; 65
 2d0:	f1 09       	sbc	r31, r1
 2d2:	e4 32       	cpi	r30, 0x24	; 36
 2d4:	f1 05       	cpc	r31, r1
 2d6:	78 f5       	brcc	.+94     	; 0x336 <setBit+0x6c>
 2d8:	e2 5b       	subi	r30, 0xB2	; 178
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	0c 94 bb 04 	jmp	0x976	; 0x976 <__tablejump2__>
 2e0:	2b b3       	in	r18, 0x1b	; 27
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <setBit+0x22>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <setBit+0x1e>
 2f0:	82 2b       	or	r24, r18
 2f2:	8b bb       	out	0x1b, r24	; 27
 2f4:	08 95       	ret
 2f6:	28 b3       	in	r18, 0x18	; 24
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <setBit+0x38>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <setBit+0x34>
 306:	82 2b       	or	r24, r18
 308:	88 bb       	out	0x18, r24	; 24
 30a:	08 95       	ret
 30c:	25 b3       	in	r18, 0x15	; 21
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <setBit+0x4e>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <setBit+0x4a>
 31c:	82 2b       	or	r24, r18
 31e:	85 bb       	out	0x15, r24	; 21
 320:	08 95       	ret
 322:	22 b3       	in	r18, 0x12	; 18
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <setBit+0x64>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <setBit+0x60>
 332:	82 2b       	or	r24, r18
 334:	82 bb       	out	0x12, r24	; 18
 336:	08 95       	ret

00000338 <writeHigh_4pins>:
	}
}

void writeHigh_4pins(unsigned char port,unsigned char value)
{
	value = value << 4;
 338:	62 95       	swap	r22
 33a:	60 7f       	andi	r22, 0xF0	; 240
	switch(port)
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	fc 01       	movw	r30, r24
 340:	e1 54       	subi	r30, 0x41	; 65
 342:	f1 09       	sbc	r31, r1
 344:	e4 32       	cpi	r30, 0x24	; 36
 346:	f1 05       	cpc	r31, r1
 348:	f8 f4       	brcc	.+62     	; 0x388 <writeHigh_4pins+0x50>
 34a:	ee 58       	subi	r30, 0x8E	; 142
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	0c 94 bb 04 	jmp	0x976	; 0x976 <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA &= 0x0F;
 352:	8b b3       	in	r24, 0x1b	; 27
 354:	8f 70       	andi	r24, 0x0F	; 15
 356:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 358:	8b b3       	in	r24, 0x1b	; 27
 35a:	68 2b       	or	r22, r24
 35c:	6b bb       	out	0x1b, r22	; 27
		break;
 35e:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB &= 0x0F;
 360:	88 b3       	in	r24, 0x18	; 24
 362:	8f 70       	andi	r24, 0x0F	; 15
 364:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 366:	88 b3       	in	r24, 0x18	; 24
 368:	68 2b       	or	r22, r24
 36a:	68 bb       	out	0x18, r22	; 24
		break;
 36c:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC &= 0x0F;
 36e:	85 b3       	in	r24, 0x15	; 21
 370:	8f 70       	andi	r24, 0x0F	; 15
 372:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 374:	85 b3       	in	r24, 0x15	; 21
 376:	68 2b       	or	r22, r24
 378:	65 bb       	out	0x15, r22	; 21
		break;
 37a:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD &= 0x0F;
 37c:	82 b3       	in	r24, 0x12	; 18
 37e:	8f 70       	andi	r24, 0x0F	; 15
 380:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 382:	82 b3       	in	r24, 0x12	; 18
 384:	68 2b       	or	r22, r24
 386:	62 bb       	out	0x12, r22	; 18
 388:	08 95       	ret

0000038a <clearBit>:
}

void clearBit(char port , int bitNumber)
{
	
	switch(port)
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	fc 01       	movw	r30, r24
 38e:	e1 54       	subi	r30, 0x41	; 65
 390:	f1 09       	sbc	r31, r1
 392:	e4 32       	cpi	r30, 0x24	; 36
 394:	f1 05       	cpc	r31, r1
 396:	98 f5       	brcc	.+102    	; 0x3fe <clearBit+0x74>
 398:	ea 56       	subi	r30, 0x6A	; 106
 39a:	ff 4f       	sbci	r31, 0xFF	; 255
 39c:	0c 94 bb 04 	jmp	0x976	; 0x976 <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA &= ~(1<<bitNumber);
 3a0:	2b b3       	in	r18, 0x1b	; 27
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <clearBit+0x22>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <clearBit+0x1e>
 3b0:	80 95       	com	r24
 3b2:	82 23       	and	r24, r18
 3b4:	8b bb       	out	0x1b, r24	; 27
		break;
 3b6:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB &= ~(1<<bitNumber);
 3b8:	28 b3       	in	r18, 0x18	; 24
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <clearBit+0x3a>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <clearBit+0x36>
 3c8:	80 95       	com	r24
 3ca:	82 23       	and	r24, r18
 3cc:	88 bb       	out	0x18, r24	; 24
		break;
 3ce:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC &= ~(1<<bitNumber);
 3d0:	25 b3       	in	r18, 0x15	; 21
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <clearBit+0x52>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <clearBit+0x4e>
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	85 bb       	out	0x15, r24	; 21
		break;
 3e6:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD &= ~(1<<bitNumber);
 3e8:	22 b3       	in	r18, 0x12	; 18
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <clearBit+0x6a>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <clearBit+0x66>
 3f8:	80 95       	com	r24
 3fa:	82 23       	and	r24, r18
 3fc:	82 bb       	out	0x12, r24	; 18
 3fe:	08 95       	ret

00000400 <send_pulse>:
#define CURSOR_ON_DISPLAN_ON 0x0C
#define CLEAR_SCREEN 0x01
#define ENTRY_MODE 0x06
void send_pulse()
{
	setBit(ENABEL_PORT,ENABEL_PIN);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	82 e4       	ldi	r24, 0x42	; 66
 406:	0e 94 65 01 	call	0x2ca	; 0x2ca <setBit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	8f e9       	ldi	r24, 0x9F	; 159
 40c:	9f e0       	ldi	r25, 0x0F	; 15
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <send_pulse+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <send_pulse+0x14>
 414:	00 00       	nop
	_delay_ms(2);
	clearBit(ENABEL_PORT,ENABEL_PIN);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	82 e4       	ldi	r24, 0x42	; 66
 41c:	0e 94 c5 01 	call	0x38a	; 0x38a <clearBit>
 420:	8f e9       	ldi	r24, 0x9F	; 159
 422:	9f e0       	ldi	r25, 0x0F	; 15
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <send_pulse+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <send_pulse+0x2a>
 42a:	00 00       	nop
 42c:	08 95       	ret

0000042e <LCD_sendCommand>:
	_delay_ms(2);
}
void LCD_sendCommand(unsigned char cmd)
{
 42e:	cf 93       	push	r28
 430:	c8 2f       	mov	r28, r24
			_delay_ms(1);
			writeLow_4pins(LCD_CONNECTED_PORT,cmd);
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd>>4);
 432:	68 2f       	mov	r22, r24
 434:	62 95       	swap	r22
 436:	6f 70       	andi	r22, 0x0F	; 15
 438:	84 e4       	ldi	r24, 0x44	; 68
 43a:	0e 94 9c 01 	call	0x338	; 0x338 <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	82 e4       	ldi	r24, 0x42	; 66
 444:	0e 94 c5 01 	call	0x38a	; 0x38a <clearBit>
			send_pulse();
 448:	0e 94 00 02 	call	0x400	; 0x400 <send_pulse>
 44c:	8f ec       	ldi	r24, 0xCF	; 207
 44e:	97 e0       	ldi	r25, 0x07	; 7
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <LCD_sendCommand+0x22>
 454:	00 c0       	rjmp	.+0      	; 0x456 <LCD_sendCommand+0x28>
 456:	00 00       	nop
			_delay_ms(1);
			writeHigh_4pins(LCD_CONNECTED_PORT,cmd);
 458:	6c 2f       	mov	r22, r28
 45a:	84 e4       	ldi	r24, 0x44	; 68
 45c:	0e 94 9c 01 	call	0x338	; 0x338 <writeHigh_4pins>
			clearBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	82 e4       	ldi	r24, 0x42	; 66
 466:	0e 94 c5 01 	call	0x38a	; 0x38a <clearBit>
			send_pulse();
 46a:	0e 94 00 02 	call	0x400	; 0x400 <send_pulse>
 46e:	8f ec       	ldi	r24, 0xCF	; 207
 470:	97 e0       	ldi	r25, 0x07	; 7
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <LCD_sendCommand+0x44>
 476:	00 c0       	rjmp	.+0      	; 0x478 <LCD_sendCommand+0x4a>
 478:	00 00       	nop
		#endif
	#endif 
	_delay_ms(1);
}
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <LCD_Initialization>:
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	81 ee       	ldi	r24, 0xE1	; 225
 482:	94 e0       	ldi	r25, 0x04	; 4
 484:	21 50       	subi	r18, 0x01	; 1
 486:	80 40       	sbci	r24, 0x00	; 0
 488:	90 40       	sbci	r25, 0x00	; 0
 48a:	e1 f7       	brne	.-8      	; 0x484 <LCD_Initialization+0x6>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <LCD_Initialization+0x10>
 48e:	00 00       	nop
			setBitDirection(LCD_CONNECTED_PORT,0,'1');
			setBitDirection(LCD_CONNECTED_PORT,1,'1');
			setBitDirection(LCD_CONNECTED_PORT,2,'1');
			setBitDirection(LCD_CONNECTED_PORT,3,'1');
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			setBitDirection(LCD_CONNECTED_PORT,4,'1');
 490:	41 e3       	ldi	r20, 0x31	; 49
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,5,'1');
 49c:	41 e3       	ldi	r20, 0x31	; 49
 49e:	65 e0       	ldi	r22, 0x05	; 5
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	84 e4       	ldi	r24, 0x44	; 68
 4a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,6,'1');
 4a8:	41 e3       	ldi	r20, 0x31	; 49
 4aa:	66 e0       	ldi	r22, 0x06	; 6
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	84 e4       	ldi	r24, 0x44	; 68
 4b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <setBitDirection>
			setBitDirection(LCD_CONNECTED_PORT,7,'1');
 4b4:	41 e3       	ldi	r20, 0x31	; 49
 4b6:	67 e0       	ldi	r22, 0x07	; 7
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	84 e4       	ldi	r24, 0x44	; 68
 4bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <setBitDirection>
		#else
			#warning "You must set IS_CONNECTED_TO_HIGH_PINS 0 to connect lcd to first 4-bit of any port or 1 to connect lcd to last 4-bit of any port"
		#endif
		
		setBitDirection(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN,'1');
 4c0:	41 e3       	ldi	r20, 0x31	; 49
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	82 e4       	ldi	r24, 0x42	; 66
 4c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <setBitDirection>
		setBitDirection(ENABEL_PORT,ENABEL_PIN,'1');
 4cc:	41 e3       	ldi	r20, 0x31	; 49
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	82 e4       	ldi	r24, 0x42	; 66
 4d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <setBitDirection>
		
		LCD_sendCommand(0x02); //return home
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendCommand>
 4de:	8f e1       	ldi	r24, 0x1F	; 31
 4e0:	9e e4       	ldi	r25, 0x4E	; 78
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LCD_Initialization+0x64>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <LCD_Initialization+0x6a>
 4e8:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(LCD_4BIT_MODE);//FOUR_BITS MODE
 4ea:	88 e2       	ldi	r24, 0x28	; 40
 4ec:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendCommand>
 4f0:	8f ec       	ldi	r24, 0xCF	; 207
 4f2:	97 e0       	ldi	r25, 0x07	; 7
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LCD_Initialization+0x76>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LCD_Initialization+0x7c>
 4fa:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(CURSOR_ON_DISPLAN_ON);//CURSOR_ON_DISPLAN_ON
 4fc:	8c e0       	ldi	r24, 0x0C	; 12
 4fe:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendCommand>
 502:	8f ec       	ldi	r24, 0xCF	; 207
 504:	97 e0       	ldi	r25, 0x07	; 7
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <LCD_Initialization+0x88>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <LCD_Initialization+0x8e>
 50c:	00 00       	nop
		_delay_ms(1);
		LCD_sendCommand(0x01);//CLEAR_SCREEN
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendCommand>
 514:	8f e1       	ldi	r24, 0x1F	; 31
 516:	9e e4       	ldi	r25, 0x4E	; 78
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_Initialization+0x9a>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_Initialization+0xa0>
 51e:	00 00       	nop
		_delay_ms(10);
		LCD_sendCommand(ENTRY_MODE);//ENTRY_MODE
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendCommand>
 526:	08 95       	ret

00000528 <LCD_printCharacter>:
	#endif
}

void LCD_printCharacter(char character)
{
 528:	cf 93       	push	r28
 52a:	c8 2f       	mov	r28, r24
			send_pulse();
			writeLow_4pins(LCD_CONNECTED_PORT,character);
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
			send_pulse();
		#elif (IS_CONNECTED_TO_HIGH_PINS == 1)
			writeHigh_4pins(LCD_CONNECTED_PORT,character>>4);
 52c:	68 2f       	mov	r22, r24
 52e:	62 95       	swap	r22
 530:	6f 70       	andi	r22, 0x0F	; 15
 532:	84 e4       	ldi	r24, 0x44	; 68
 534:	0e 94 9c 01 	call	0x338	; 0x338 <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	82 e4       	ldi	r24, 0x42	; 66
 53e:	0e 94 65 01 	call	0x2ca	; 0x2ca <setBit>
			send_pulse();
 542:	0e 94 00 02 	call	0x400	; 0x400 <send_pulse>
			writeHigh_4pins(LCD_CONNECTED_PORT,character);
 546:	6c 2f       	mov	r22, r28
 548:	84 e4       	ldi	r24, 0x44	; 68
 54a:	0e 94 9c 01 	call	0x338	; 0x338 <writeHigh_4pins>
			setBit(REGESTER_SELECT_PORT,REGESTER_SELECT_PIN);
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	82 e4       	ldi	r24, 0x42	; 66
 554:	0e 94 65 01 	call	0x2ca	; 0x2ca <setBit>
			send_pulse();
 558:	0e 94 00 02 	call	0x400	; 0x400 <send_pulse>
 55c:	8f ec       	ldi	r24, 0xCF	; 207
 55e:	97 e0       	ldi	r25, 0x07	; 7
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <LCD_printCharacter+0x38>
 564:	00 c0       	rjmp	.+0      	; 0x566 <LCD_printCharacter+0x3e>
 566:	00 00       	nop
		#endif

	#endif
	_delay_ms(1);
}
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <LCD_printString>:

void LCD_printString(char* ptr)
{
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	ec 01       	movw	r28, r24
	while(*ptr != 0)
 572:	03 c0       	rjmp	.+6      	; 0x57a <LCD_printString+0xe>
	{
		LCD_printCharacter(*ptr);
 574:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
		++ptr;
 578:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(1);
}

void LCD_printString(char* ptr)
{
	while(*ptr != 0)
 57a:	88 81       	ld	r24, Y
 57c:	81 11       	cpse	r24, r1
 57e:	fa cf       	rjmp	.-12     	; 0x574 <LCD_printString+0x8>
	{
		LCD_printCharacter(*ptr);
		++ptr;
	}
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <LCD_moveCursor>:
void LCD_moveCursor(char row , char column)
{
	char address;
	if (row == 1)
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	19 f4       	brne	.+6      	; 0x590 <LCD_moveCursor+0xa>
	{
		address = 0x80 + column -1;
 58a:	8f e7       	ldi	r24, 0x7F	; 127
 58c:	86 0f       	add	r24, r22
 58e:	02 c0       	rjmp	.+4      	; 0x594 <LCD_moveCursor+0xe>
	}
	else
	{
		address = 0xC0 + column -1;
 590:	8f eb       	ldi	r24, 0xBF	; 191
 592:	86 0f       	add	r24, r22
	}
	LCD_sendCommand(address);
 594:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendCommand>
 598:	08 95       	ret

0000059a <clearScreen>:
}
void clearScreen()
{
	LCD_sendCommand(0x01);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendCommand>
 5a0:	8f e1       	ldi	r24, 0x1F	; 31
 5a2:	9e e4       	ldi	r25, 0x4E	; 78
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <clearScreen+0xa>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <clearScreen+0x10>
 5aa:	00 00       	nop
 5ac:	08 95       	ret

000005ae <main>:
#include "LCD.h"
#include "ADC2_driver.h"

int main(void)
{
	clearScreen();
 5ae:	0e 94 cd 02 	call	0x59a	; 0x59a <clearScreen>
    LCD_Initialization();
 5b2:	0e 94 3f 02 	call	0x47e	; 0x47e <LCD_Initialization>
	ADC_initialization();
 5b6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <ADC_initialization>
	LCD_printString("temp = ");
 5ba:	80 e6       	ldi	r24, 0x60	; 96
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_printString>
	unsigned short mille_volt;
	char temperature ;
    while (1) 
    {
		mille_volt = ADC_read() * 2.5;
 5c2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <ADC_read>
 5c6:	bc 01       	movw	r22, r24
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 c0 03 	call	0x780	; 0x780 <__floatunsisf>
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	40 e2       	ldi	r20, 0x20	; 32
 5d6:	50 e4       	ldi	r21, 0x40	; 64
 5d8:	0e 94 26 04 	call	0x84c	; 0x84c <__mulsf3>
 5dc:	0e 94 91 03 	call	0x722	; 0x722 <__fixunssfsi>
		
		if (mille_volt < 1000)
 5e0:	68 3e       	cpi	r22, 0xE8	; 232
 5e2:	43 e0       	ldi	r20, 0x03	; 3
 5e4:	74 07       	cpc	r23, r20
 5e6:	08 f0       	brcs	.+2      	; 0x5ea <main+0x3c>
 5e8:	45 c0       	rjmp	.+138    	; 0x674 <main+0xc6>
		{
			temperature = (1000-mille_volt) / 10;
 5ea:	28 ee       	ldi	r18, 0xE8	; 232
 5ec:	33 e0       	ldi	r19, 0x03	; 3
 5ee:	26 1b       	sub	r18, r22
 5f0:	37 0b       	sbc	r19, r23
 5f2:	ad ec       	ldi	r26, 0xCD	; 205
 5f4:	bc ec       	ldi	r27, 0xCC	; 204
 5f6:	0e 94 c1 04 	call	0x982	; 0x982 <__umulhisi3>
 5fa:	8c 01       	movw	r16, r24
 5fc:	16 95       	lsr	r17
 5fe:	07 95       	ror	r16
 600:	16 95       	lsr	r17
 602:	07 95       	ror	r16
 604:	16 95       	lsr	r17
 606:	07 95       	ror	r16
			LCD_moveCursor(1,8);
 608:	68 e0       	ldi	r22, 0x08	; 8
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_moveCursor>
			LCD_printCharacter('-');
 610:	8d e2       	ldi	r24, 0x2D	; 45
 612:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
			if (temperature < 10)
 616:	0a 30       	cpi	r16, 0x0A	; 10
 618:	70 f4       	brcc	.+28     	; 0x636 <main+0x88>
			{
				LCD_printCharacter(temperature + 48 );
 61a:	80 e3       	ldi	r24, 0x30	; 48
 61c:	80 0f       	add	r24, r16
 61e:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0xdf);
 622:	8f ed       	ldi	r24, 0xDF	; 223
 624:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter('C');
 628:	83 e4       	ldi	r24, 0x43	; 67
 62a:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0x20);
 62e:	80 e2       	ldi	r24, 0x20	; 32
 630:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
 634:	c6 cf       	rjmp	.-116    	; 0x5c2 <main+0x14>
			}
			else
			{
				LCD_printCharacter((temperature/10) + 48 );
 636:	cd ec       	ldi	r28, 0xCD	; 205
 638:	0c 9f       	mul	r16, r28
 63a:	c1 2d       	mov	r28, r1
 63c:	11 24       	eor	r1, r1
 63e:	c6 95       	lsr	r28
 640:	c6 95       	lsr	r28
 642:	c6 95       	lsr	r28
 644:	80 e3       	ldi	r24, 0x30	; 48
 646:	8c 0f       	add	r24, r28
 648:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter((temperature%10) + 48 );
 64c:	cc 0f       	add	r28, r28
 64e:	8c 2f       	mov	r24, r28
 650:	88 0f       	add	r24, r24
 652:	88 0f       	add	r24, r24
 654:	c8 0f       	add	r28, r24
 656:	80 2f       	mov	r24, r16
 658:	8c 1b       	sub	r24, r28
 65a:	80 5d       	subi	r24, 0xD0	; 208
 65c:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0xdf);
 660:	8f ed       	ldi	r24, 0xDF	; 223
 662:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter('C');
 666:	83 e4       	ldi	r24, 0x43	; 67
 668:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0x20);
 66c:	80 e2       	ldi	r24, 0x20	; 32
 66e:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
 672:	a7 cf       	rjmp	.-178    	; 0x5c2 <main+0x14>
			}
		}
		else if (mille_volt > 1000)
 674:	69 3e       	cpi	r22, 0xE9	; 233
 676:	43 e0       	ldi	r20, 0x03	; 3
 678:	74 07       	cpc	r23, r20
 67a:	08 f4       	brcc	.+2      	; 0x67e <main+0xd0>
 67c:	41 c0       	rjmp	.+130    	; 0x700 <main+0x152>
		{
			temperature = (mille_volt-1000) / 10;
 67e:	9b 01       	movw	r18, r22
 680:	28 5e       	subi	r18, 0xE8	; 232
 682:	33 40       	sbci	r19, 0x03	; 3
 684:	ad ec       	ldi	r26, 0xCD	; 205
 686:	bc ec       	ldi	r27, 0xCC	; 204
 688:	0e 94 c1 04 	call	0x982	; 0x982 <__umulhisi3>
 68c:	8c 01       	movw	r16, r24
 68e:	16 95       	lsr	r17
 690:	07 95       	ror	r16
 692:	16 95       	lsr	r17
 694:	07 95       	ror	r16
 696:	16 95       	lsr	r17
 698:	07 95       	ror	r16
			LCD_moveCursor(1,8);
 69a:	68 e0       	ldi	r22, 0x08	; 8
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_moveCursor>
			if (temperature < 10)
 6a2:	0a 30       	cpi	r16, 0x0A	; 10
 6a4:	70 f4       	brcc	.+28     	; 0x6c2 <main+0x114>
			{
				LCD_printCharacter(temperature + 48 );
 6a6:	80 e3       	ldi	r24, 0x30	; 48
 6a8:	80 0f       	add	r24, r16
 6aa:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0xdf);
 6ae:	8f ed       	ldi	r24, 0xDF	; 223
 6b0:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter('C');
 6b4:	83 e4       	ldi	r24, 0x43	; 67
 6b6:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0x20);
 6ba:	80 e2       	ldi	r24, 0x20	; 32
 6bc:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
 6c0:	80 cf       	rjmp	.-256    	; 0x5c2 <main+0x14>
			}
			else
			{
				LCD_printCharacter((temperature/10) + 48 );
 6c2:	cd ec       	ldi	r28, 0xCD	; 205
 6c4:	0c 9f       	mul	r16, r28
 6c6:	c1 2d       	mov	r28, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	c6 95       	lsr	r28
 6cc:	c6 95       	lsr	r28
 6ce:	c6 95       	lsr	r28
 6d0:	80 e3       	ldi	r24, 0x30	; 48
 6d2:	8c 0f       	add	r24, r28
 6d4:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter((temperature%10) + 48 );
 6d8:	cc 0f       	add	r28, r28
 6da:	8c 2f       	mov	r24, r28
 6dc:	88 0f       	add	r24, r24
 6de:	88 0f       	add	r24, r24
 6e0:	c8 0f       	add	r28, r24
 6e2:	80 2f       	mov	r24, r16
 6e4:	8c 1b       	sub	r24, r28
 6e6:	80 5d       	subi	r24, 0xD0	; 208
 6e8:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0xdf);
 6ec:	8f ed       	ldi	r24, 0xDF	; 223
 6ee:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter('C');
 6f2:	83 e4       	ldi	r24, 0x43	; 67
 6f4:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
				LCD_printCharacter(0x20);
 6f8:	80 e2       	ldi	r24, 0x20	; 32
 6fa:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
 6fe:	61 cf       	rjmp	.-318    	; 0x5c2 <main+0x14>
			}
		}
		else
		{
			LCD_moveCursor(1,8);
 700:	68 e0       	ldi	r22, 0x08	; 8
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	0e 94 c3 02 	call	0x586	; 0x586 <LCD_moveCursor>
			LCD_printCharacter('0');
 708:	80 e3       	ldi	r24, 0x30	; 48
 70a:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
			LCD_printCharacter(0xdf);
 70e:	8f ed       	ldi	r24, 0xDF	; 223
 710:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
			LCD_printCharacter('C');
 714:	83 e4       	ldi	r24, 0x43	; 67
 716:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
			LCD_printCharacter(0x20);
 71a:	80 e2       	ldi	r24, 0x20	; 32
 71c:	0e 94 94 02 	call	0x528	; 0x528 <LCD_printCharacter>
 720:	50 cf       	rjmp	.-352    	; 0x5c2 <main+0x14>

00000722 <__fixunssfsi>:
 722:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_splitA>
 726:	88 f0       	brcs	.+34     	; 0x74a <__fixunssfsi+0x28>
 728:	9f 57       	subi	r25, 0x7F	; 127
 72a:	98 f0       	brcs	.+38     	; 0x752 <__fixunssfsi+0x30>
 72c:	b9 2f       	mov	r27, r25
 72e:	99 27       	eor	r25, r25
 730:	b7 51       	subi	r27, 0x17	; 23
 732:	b0 f0       	brcs	.+44     	; 0x760 <__fixunssfsi+0x3e>
 734:	e1 f0       	breq	.+56     	; 0x76e <__fixunssfsi+0x4c>
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	1a f0       	brmi	.+6      	; 0x746 <__fixunssfsi+0x24>
 740:	ba 95       	dec	r27
 742:	c9 f7       	brne	.-14     	; 0x736 <__fixunssfsi+0x14>
 744:	14 c0       	rjmp	.+40     	; 0x76e <__fixunssfsi+0x4c>
 746:	b1 30       	cpi	r27, 0x01	; 1
 748:	91 f0       	breq	.+36     	; 0x76e <__fixunssfsi+0x4c>
 74a:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_zero>
 74e:	b1 e0       	ldi	r27, 0x01	; 1
 750:	08 95       	ret
 752:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_zero>
 756:	67 2f       	mov	r22, r23
 758:	78 2f       	mov	r23, r24
 75a:	88 27       	eor	r24, r24
 75c:	b8 5f       	subi	r27, 0xF8	; 248
 75e:	39 f0       	breq	.+14     	; 0x76e <__fixunssfsi+0x4c>
 760:	b9 3f       	cpi	r27, 0xF9	; 249
 762:	cc f3       	brlt	.-14     	; 0x756 <__fixunssfsi+0x34>
 764:	86 95       	lsr	r24
 766:	77 95       	ror	r23
 768:	67 95       	ror	r22
 76a:	b3 95       	inc	r27
 76c:	d9 f7       	brne	.-10     	; 0x764 <__fixunssfsi+0x42>
 76e:	3e f4       	brtc	.+14     	; 0x77e <__fixunssfsi+0x5c>
 770:	90 95       	com	r25
 772:	80 95       	com	r24
 774:	70 95       	com	r23
 776:	61 95       	neg	r22
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	08 95       	ret

00000780 <__floatunsisf>:
 780:	e8 94       	clt
 782:	09 c0       	rjmp	.+18     	; 0x796 <__floatsisf+0x12>

00000784 <__floatsisf>:
 784:	97 fb       	bst	r25, 7
 786:	3e f4       	brtc	.+14     	; 0x796 <__floatsisf+0x12>
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	99 23       	and	r25, r25
 798:	a9 f0       	breq	.+42     	; 0x7c4 <__floatsisf+0x40>
 79a:	f9 2f       	mov	r31, r25
 79c:	96 e9       	ldi	r25, 0x96	; 150
 79e:	bb 27       	eor	r27, r27
 7a0:	93 95       	inc	r25
 7a2:	f6 95       	lsr	r31
 7a4:	87 95       	ror	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b7 95       	ror	r27
 7ac:	f1 11       	cpse	r31, r1
 7ae:	f8 cf       	rjmp	.-16     	; 0x7a0 <__floatsisf+0x1c>
 7b0:	fa f4       	brpl	.+62     	; 0x7f0 <__floatsisf+0x6c>
 7b2:	bb 0f       	add	r27, r27
 7b4:	11 f4       	brne	.+4      	; 0x7ba <__floatsisf+0x36>
 7b6:	60 ff       	sbrs	r22, 0
 7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <__floatsisf+0x6c>
 7ba:	6f 5f       	subi	r22, 0xFF	; 255
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	16 c0       	rjmp	.+44     	; 0x7f0 <__floatsisf+0x6c>
 7c4:	88 23       	and	r24, r24
 7c6:	11 f0       	breq	.+4      	; 0x7cc <__floatsisf+0x48>
 7c8:	96 e9       	ldi	r25, 0x96	; 150
 7ca:	11 c0       	rjmp	.+34     	; 0x7ee <__floatsisf+0x6a>
 7cc:	77 23       	and	r23, r23
 7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatsisf+0x54>
 7d0:	9e e8       	ldi	r25, 0x8E	; 142
 7d2:	87 2f       	mov	r24, r23
 7d4:	76 2f       	mov	r23, r22
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <__floatsisf+0x5e>
 7d8:	66 23       	and	r22, r22
 7da:	71 f0       	breq	.+28     	; 0x7f8 <__floatsisf+0x74>
 7dc:	96 e8       	ldi	r25, 0x86	; 134
 7de:	86 2f       	mov	r24, r22
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	2a f0       	brmi	.+10     	; 0x7f0 <__floatsisf+0x6c>
 7e6:	9a 95       	dec	r25
 7e8:	66 0f       	add	r22, r22
 7ea:	77 1f       	adc	r23, r23
 7ec:	88 1f       	adc	r24, r24
 7ee:	da f7       	brpl	.-10     	; 0x7e6 <__floatsisf+0x62>
 7f0:	88 0f       	add	r24, r24
 7f2:	96 95       	lsr	r25
 7f4:	87 95       	ror	r24
 7f6:	97 f9       	bld	r25, 7
 7f8:	08 95       	ret

000007fa <__fp_split3>:
 7fa:	57 fd       	sbrc	r21, 7
 7fc:	90 58       	subi	r25, 0x80	; 128
 7fe:	44 0f       	add	r20, r20
 800:	55 1f       	adc	r21, r21
 802:	59 f0       	breq	.+22     	; 0x81a <__fp_splitA+0x10>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	71 f0       	breq	.+28     	; 0x824 <__fp_splitA+0x1a>
 808:	47 95       	ror	r20

0000080a <__fp_splitA>:
 80a:	88 0f       	add	r24, r24
 80c:	97 fb       	bst	r25, 7
 80e:	99 1f       	adc	r25, r25
 810:	61 f0       	breq	.+24     	; 0x82a <__fp_splitA+0x20>
 812:	9f 3f       	cpi	r25, 0xFF	; 255
 814:	79 f0       	breq	.+30     	; 0x834 <__fp_splitA+0x2a>
 816:	87 95       	ror	r24
 818:	08 95       	ret
 81a:	12 16       	cp	r1, r18
 81c:	13 06       	cpc	r1, r19
 81e:	14 06       	cpc	r1, r20
 820:	55 1f       	adc	r21, r21
 822:	f2 cf       	rjmp	.-28     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 824:	46 95       	lsr	r20
 826:	f1 df       	rcall	.-30     	; 0x80a <__fp_splitA>
 828:	08 c0       	rjmp	.+16     	; 0x83a <__fp_splitA+0x30>
 82a:	16 16       	cp	r1, r22
 82c:	17 06       	cpc	r1, r23
 82e:	18 06       	cpc	r1, r24
 830:	99 1f       	adc	r25, r25
 832:	f1 cf       	rjmp	.-30     	; 0x816 <__fp_splitA+0xc>
 834:	86 95       	lsr	r24
 836:	71 05       	cpc	r23, r1
 838:	61 05       	cpc	r22, r1
 83a:	08 94       	sec
 83c:	08 95       	ret

0000083e <__fp_zero>:
 83e:	e8 94       	clt

00000840 <__fp_szero>:
 840:	bb 27       	eor	r27, r27
 842:	66 27       	eor	r22, r22
 844:	77 27       	eor	r23, r23
 846:	cb 01       	movw	r24, r22
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__mulsf3>:
 84c:	0e 94 39 04 	call	0x872	; 0x872 <__mulsf3x>
 850:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_round>
 854:	0e 94 9c 04 	call	0x938	; 0x938 <__fp_pscA>
 858:	38 f0       	brcs	.+14     	; 0x868 <__stack+0x9>
 85a:	0e 94 a3 04 	call	0x946	; 0x946 <__fp_pscB>
 85e:	20 f0       	brcs	.+8      	; 0x868 <__stack+0x9>
 860:	95 23       	and	r25, r21
 862:	11 f0       	breq	.+4      	; 0x868 <__stack+0x9>
 864:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_inf>
 868:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_nan>
 86c:	11 24       	eor	r1, r1
 86e:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>

00000872 <__mulsf3x>:
 872:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 876:	70 f3       	brcs	.-36     	; 0x854 <__mulsf3+0x8>

00000878 <__mulsf3_pse>:
 878:	95 9f       	mul	r25, r21
 87a:	c1 f3       	breq	.-16     	; 0x86c <__stack+0xd>
 87c:	95 0f       	add	r25, r21
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	55 1f       	adc	r21, r21
 882:	62 9f       	mul	r22, r18
 884:	f0 01       	movw	r30, r0
 886:	72 9f       	mul	r23, r18
 888:	bb 27       	eor	r27, r27
 88a:	f0 0d       	add	r31, r0
 88c:	b1 1d       	adc	r27, r1
 88e:	63 9f       	mul	r22, r19
 890:	aa 27       	eor	r26, r26
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	aa 1f       	adc	r26, r26
 898:	64 9f       	mul	r22, r20
 89a:	66 27       	eor	r22, r22
 89c:	b0 0d       	add	r27, r0
 89e:	a1 1d       	adc	r26, r1
 8a0:	66 1f       	adc	r22, r22
 8a2:	82 9f       	mul	r24, r18
 8a4:	22 27       	eor	r18, r18
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	62 1f       	adc	r22, r18
 8ac:	73 9f       	mul	r23, r19
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	83 9f       	mul	r24, r19
 8b6:	a0 0d       	add	r26, r0
 8b8:	61 1d       	adc	r22, r1
 8ba:	22 1f       	adc	r18, r18
 8bc:	74 9f       	mul	r23, r20
 8be:	33 27       	eor	r19, r19
 8c0:	a0 0d       	add	r26, r0
 8c2:	61 1d       	adc	r22, r1
 8c4:	23 1f       	adc	r18, r19
 8c6:	84 9f       	mul	r24, r20
 8c8:	60 0d       	add	r22, r0
 8ca:	21 1d       	adc	r18, r1
 8cc:	82 2f       	mov	r24, r18
 8ce:	76 2f       	mov	r23, r22
 8d0:	6a 2f       	mov	r22, r26
 8d2:	11 24       	eor	r1, r1
 8d4:	9f 57       	subi	r25, 0x7F	; 127
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	9a f0       	brmi	.+38     	; 0x900 <__mulsf3_pse+0x88>
 8da:	f1 f0       	breq	.+60     	; 0x918 <__mulsf3_pse+0xa0>
 8dc:	88 23       	and	r24, r24
 8de:	4a f0       	brmi	.+18     	; 0x8f2 <__mulsf3_pse+0x7a>
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	bb 1f       	adc	r27, r27
 8e6:	66 1f       	adc	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__mulsf3_pse+0x64>
 8f2:	9e 3f       	cpi	r25, 0xFE	; 254
 8f4:	51 05       	cpc	r21, r1
 8f6:	80 f0       	brcs	.+32     	; 0x918 <__mulsf3_pse+0xa0>
 8f8:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_inf>
 8fc:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 900:	5f 3f       	cpi	r21, 0xFF	; 255
 902:	e4 f3       	brlt	.-8      	; 0x8fc <__mulsf3_pse+0x84>
 904:	98 3e       	cpi	r25, 0xE8	; 232
 906:	d4 f3       	brlt	.-12     	; 0x8fc <__mulsf3_pse+0x84>
 908:	86 95       	lsr	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f7 95       	ror	r31
 912:	e7 95       	ror	r30
 914:	9f 5f       	subi	r25, 0xFF	; 255
 916:	c1 f7       	brne	.-16     	; 0x908 <__mulsf3_pse+0x90>
 918:	fe 2b       	or	r31, r30
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret

00000926 <__fp_inf>:
 926:	97 f9       	bld	r25, 7
 928:	9f 67       	ori	r25, 0x7F	; 127
 92a:	80 e8       	ldi	r24, 0x80	; 128
 92c:	70 e0       	ldi	r23, 0x00	; 0
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	08 95       	ret

00000932 <__fp_nan>:
 932:	9f ef       	ldi	r25, 0xFF	; 255
 934:	80 ec       	ldi	r24, 0xC0	; 192
 936:	08 95       	ret

00000938 <__fp_pscA>:
 938:	00 24       	eor	r0, r0
 93a:	0a 94       	dec	r0
 93c:	16 16       	cp	r1, r22
 93e:	17 06       	cpc	r1, r23
 940:	18 06       	cpc	r1, r24
 942:	09 06       	cpc	r0, r25
 944:	08 95       	ret

00000946 <__fp_pscB>:
 946:	00 24       	eor	r0, r0
 948:	0a 94       	dec	r0
 94a:	12 16       	cp	r1, r18
 94c:	13 06       	cpc	r1, r19
 94e:	14 06       	cpc	r1, r20
 950:	05 06       	cpc	r0, r21
 952:	08 95       	ret

00000954 <__fp_round>:
 954:	09 2e       	mov	r0, r25
 956:	03 94       	inc	r0
 958:	00 0c       	add	r0, r0
 95a:	11 f4       	brne	.+4      	; 0x960 <__fp_round+0xc>
 95c:	88 23       	and	r24, r24
 95e:	52 f0       	brmi	.+20     	; 0x974 <__fp_round+0x20>
 960:	bb 0f       	add	r27, r27
 962:	40 f4       	brcc	.+16     	; 0x974 <__fp_round+0x20>
 964:	bf 2b       	or	r27, r31
 966:	11 f4       	brne	.+4      	; 0x96c <__fp_round+0x18>
 968:	60 ff       	sbrs	r22, 0
 96a:	04 c0       	rjmp	.+8      	; 0x974 <__fp_round+0x20>
 96c:	6f 5f       	subi	r22, 0xFF	; 255
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	8f 4f       	sbci	r24, 0xFF	; 255
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	08 95       	ret

00000976 <__tablejump2__>:
 976:	ee 0f       	add	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	05 90       	lpm	r0, Z+
 97c:	f4 91       	lpm	r31, Z
 97e:	e0 2d       	mov	r30, r0
 980:	09 94       	ijmp

00000982 <__umulhisi3>:
 982:	a2 9f       	mul	r26, r18
 984:	b0 01       	movw	r22, r0
 986:	b3 9f       	mul	r27, r19
 988:	c0 01       	movw	r24, r0
 98a:	a3 9f       	mul	r26, r19
 98c:	70 0d       	add	r23, r0
 98e:	81 1d       	adc	r24, r1
 990:	11 24       	eor	r1, r1
 992:	91 1d       	adc	r25, r1
 994:	b2 9f       	mul	r27, r18
 996:	70 0d       	add	r23, r0
 998:	81 1d       	adc	r24, r1
 99a:	11 24       	eor	r1, r1
 99c:	91 1d       	adc	r25, r1
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
