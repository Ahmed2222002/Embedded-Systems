
Ultra_sonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000079c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012cb  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084d  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a16  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ac  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d59  00000000  00000000  0000350c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004265  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__ctors_end>
   4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
   8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
   c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  14:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  18:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  1c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  20:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  28:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  30:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
  54:	06 01       	movw	r0, r12
  56:	1f 01       	movw	r2, r30
  58:	38 01       	movw	r6, r16
  5a:	51 01       	movw	r10, r2
  5c:	69 01       	movw	r12, r18
  5e:	69 01       	movw	r12, r18
  60:	69 01       	movw	r12, r18
  62:	69 01       	movw	r12, r18
  64:	69 01       	movw	r12, r18
  66:	69 01       	movw	r12, r18
  68:	69 01       	movw	r12, r18
  6a:	69 01       	movw	r12, r18
  6c:	69 01       	movw	r12, r18
  6e:	69 01       	movw	r12, r18
  70:	69 01       	movw	r12, r18
  72:	69 01       	movw	r12, r18
  74:	69 01       	movw	r12, r18
  76:	69 01       	movw	r12, r18
  78:	69 01       	movw	r12, r18
  7a:	69 01       	movw	r12, r18
  7c:	69 01       	movw	r12, r18
  7e:	69 01       	movw	r12, r18
  80:	69 01       	movw	r12, r18
  82:	69 01       	movw	r12, r18
  84:	69 01       	movw	r12, r18
  86:	69 01       	movw	r12, r18
  88:	69 01       	movw	r12, r18
  8a:	69 01       	movw	r12, r18
  8c:	69 01       	movw	r12, r18
  8e:	69 01       	movw	r12, r18
  90:	69 01       	movw	r12, r18
  92:	69 01       	movw	r12, r18
  94:	06 01       	movw	r0, r12
  96:	1f 01       	movw	r2, r30
  98:	38 01       	movw	r6, r16
  9a:	51 01       	movw	r10, r2
  9c:	75 01       	movw	r14, r10
  9e:	80 01       	movw	r16, r0
  a0:	8b 01       	movw	r16, r22
  a2:	96 01       	movw	r18, r12
  a4:	a0 01       	movw	r20, r0
  a6:	a0 01       	movw	r20, r0
  a8:	a0 01       	movw	r20, r0
  aa:	a0 01       	movw	r20, r0
  ac:	a0 01       	movw	r20, r0
  ae:	a0 01       	movw	r20, r0
  b0:	a0 01       	movw	r20, r0
  b2:	a0 01       	movw	r20, r0
  b4:	a0 01       	movw	r20, r0
  b6:	a0 01       	movw	r20, r0
  b8:	a0 01       	movw	r20, r0
  ba:	a0 01       	movw	r20, r0
  bc:	a0 01       	movw	r20, r0
  be:	a0 01       	movw	r20, r0
  c0:	a0 01       	movw	r20, r0
  c2:	a0 01       	movw	r20, r0
  c4:	a0 01       	movw	r20, r0
  c6:	a0 01       	movw	r20, r0
  c8:	a0 01       	movw	r20, r0
  ca:	a0 01       	movw	r20, r0
  cc:	a0 01       	movw	r20, r0
  ce:	a0 01       	movw	r20, r0
  d0:	a0 01       	movw	r20, r0
  d2:	a0 01       	movw	r20, r0
  d4:	a0 01       	movw	r20, r0
  d6:	a0 01       	movw	r20, r0
  d8:	a0 01       	movw	r20, r0
  da:	a0 01       	movw	r20, r0
  dc:	75 01       	movw	r14, r10
  de:	80 01       	movw	r16, r0
  e0:	8b 01       	movw	r16, r22
  e2:	96 01       	movw	r18, r12
  e4:	ae 01       	movw	r20, r28
  e6:	b5 01       	movw	r22, r10
  e8:	bc 01       	movw	r22, r24
  ea:	c3 01       	movw	r24, r6
  ec:	c9 01       	movw	r24, r18
  ee:	c9 01       	movw	r24, r18
  f0:	c9 01       	movw	r24, r18
  f2:	c9 01       	movw	r24, r18
  f4:	c9 01       	movw	r24, r18
  f6:	c9 01       	movw	r24, r18
  f8:	c9 01       	movw	r24, r18
  fa:	c9 01       	movw	r24, r18
  fc:	c9 01       	movw	r24, r18
  fe:	c9 01       	movw	r24, r18
 100:	c9 01       	movw	r24, r18
 102:	c9 01       	movw	r24, r18
 104:	c9 01       	movw	r24, r18
 106:	c9 01       	movw	r24, r18
 108:	c9 01       	movw	r24, r18
 10a:	c9 01       	movw	r24, r18
 10c:	c9 01       	movw	r24, r18
 10e:	c9 01       	movw	r24, r18
 110:	c9 01       	movw	r24, r18
 112:	c9 01       	movw	r24, r18
 114:	c9 01       	movw	r24, r18
 116:	c9 01       	movw	r24, r18
 118:	c9 01       	movw	r24, r18
 11a:	c9 01       	movw	r24, r18
 11c:	c9 01       	movw	r24, r18
 11e:	c9 01       	movw	r24, r18
 120:	c9 01       	movw	r24, r18
 122:	c9 01       	movw	r24, r18
 124:	ae 01       	movw	r20, r28
 126:	b5 01       	movw	r22, r10
 128:	bc 01       	movw	r22, r24
 12a:	c3 01       	movw	r24, r6
 12c:	d5 01       	movw	r26, r10
 12e:	e1 01       	movw	r28, r2
 130:	ed 01       	movw	r28, r26
 132:	f9 01       	movw	r30, r18
 134:	04 02       	muls	r16, r20
 136:	04 02       	muls	r16, r20
 138:	04 02       	muls	r16, r20
 13a:	04 02       	muls	r16, r20
 13c:	04 02       	muls	r16, r20
 13e:	04 02       	muls	r16, r20
 140:	04 02       	muls	r16, r20
 142:	04 02       	muls	r16, r20
 144:	04 02       	muls	r16, r20
 146:	04 02       	muls	r16, r20
 148:	04 02       	muls	r16, r20
 14a:	04 02       	muls	r16, r20
 14c:	04 02       	muls	r16, r20
 14e:	04 02       	muls	r16, r20
 150:	04 02       	muls	r16, r20
 152:	04 02       	muls	r16, r20
 154:	04 02       	muls	r16, r20
 156:	04 02       	muls	r16, r20
 158:	04 02       	muls	r16, r20
 15a:	04 02       	muls	r16, r20
 15c:	04 02       	muls	r16, r20
 15e:	04 02       	muls	r16, r20
 160:	04 02       	muls	r16, r20
 162:	04 02       	muls	r16, r20
 164:	04 02       	muls	r16, r20
 166:	04 02       	muls	r16, r20
 168:	04 02       	muls	r16, r20
 16a:	04 02       	muls	r16, r20
 16c:	d5 01       	movw	r26, r10
 16e:	e1 01       	movw	r28, r2
 170:	ed 01       	movw	r28, r26
 172:	f9 01       	movw	r30, r18
 174:	10 02       	muls	r17, r16
 176:	1b 02       	muls	r17, r27
 178:	26 02       	muls	r18, r22
 17a:	31 02       	muls	r19, r17
 17c:	3b 02       	muls	r19, r27
 17e:	3b 02       	muls	r19, r27
 180:	3b 02       	muls	r19, r27
 182:	3b 02       	muls	r19, r27
 184:	3b 02       	muls	r19, r27
 186:	3b 02       	muls	r19, r27
 188:	3b 02       	muls	r19, r27
 18a:	3b 02       	muls	r19, r27
 18c:	3b 02       	muls	r19, r27
 18e:	3b 02       	muls	r19, r27
 190:	3b 02       	muls	r19, r27
 192:	3b 02       	muls	r19, r27
 194:	3b 02       	muls	r19, r27
 196:	3b 02       	muls	r19, r27
 198:	3b 02       	muls	r19, r27
 19a:	3b 02       	muls	r19, r27
 19c:	3b 02       	muls	r19, r27
 19e:	3b 02       	muls	r19, r27
 1a0:	3b 02       	muls	r19, r27
 1a2:	3b 02       	muls	r19, r27
 1a4:	3b 02       	muls	r19, r27
 1a6:	3b 02       	muls	r19, r27
 1a8:	3b 02       	muls	r19, r27
 1aa:	3b 02       	muls	r19, r27
 1ac:	3b 02       	muls	r19, r27
 1ae:	3b 02       	muls	r19, r27
 1b0:	3b 02       	muls	r19, r27
 1b2:	3b 02       	muls	r19, r27
 1b4:	10 02       	muls	r17, r16
 1b6:	1b 02       	muls	r17, r27
 1b8:	26 02       	muls	r18, r22
 1ba:	31 02       	muls	r19, r17

000001bc <__ctors_end>:
 1bc:	11 24       	eor	r1, r1
 1be:	1f be       	out	0x3f, r1	; 63
 1c0:	cf e5       	ldi	r28, 0x5F	; 95
 1c2:	d8 e0       	ldi	r29, 0x08	; 8
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	cd bf       	out	0x3d, r28	; 61

000001c8 <__do_copy_data>:
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	a0 e6       	ldi	r26, 0x60	; 96
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	ec e9       	ldi	r30, 0x9C	; 156
 1d0:	f7 e0       	ldi	r31, 0x07	; 7
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x10>
 1d4:	05 90       	lpm	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	aa 37       	cpi	r26, 0x7A	; 122
 1da:	b1 07       	cpc	r27, r17
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0xc>
 1de:	0e 94 09 03 	call	0x612	; 0x612 <main>
 1e2:	0c 94 cc 03 	jmp	0x798	; 0x798 <_exit>

000001e6 <__bad_interrupt>:
 1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <setBitDirection>:
			PORTC = 0;
		break;
		
		case 'D':
		case 'd':
			PORTD = 0;
 1ea:	41 33       	cpi	r20, 0x31	; 49
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <setBitDirection+0x8>
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <setBitDirection+0xa>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	e1 54       	subi	r30, 0x41	; 65
 1fa:	f1 09       	sbc	r31, r1
 1fc:	e4 32       	cpi	r30, 0x24	; 36
 1fe:	f1 05       	cpc	r31, r1
 200:	08 f0       	brcs	.+2      	; 0x204 <setBitDirection+0x1a>
 202:	67 c0       	rjmp	.+206    	; 0x2d2 <setBitDirection+0xe8>
 204:	e6 5d       	subi	r30, 0xD6	; 214
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__tablejump2__>
 20c:	22 23       	and	r18, r18
 20e:	59 f0       	breq	.+22     	; 0x226 <setBitDirection+0x3c>
 210:	2a b3       	in	r18, 0x1a	; 26
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <setBitDirection+0x32>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <setBitDirection+0x2e>
 220:	82 2b       	or	r24, r18
 222:	8a bb       	out	0x1a, r24	; 26
 224:	08 95       	ret
 226:	2a b3       	in	r18, 0x1a	; 26
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <setBitDirection+0x48>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <setBitDirection+0x44>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	8a bb       	out	0x1a, r24	; 26
 23c:	08 95       	ret
 23e:	22 23       	and	r18, r18
 240:	59 f0       	breq	.+22     	; 0x258 <setBitDirection+0x6e>
 242:	27 b3       	in	r18, 0x17	; 23
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <setBitDirection+0x64>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <setBitDirection+0x60>
 252:	82 2b       	or	r24, r18
 254:	87 bb       	out	0x17, r24	; 23
 256:	08 95       	ret
 258:	27 b3       	in	r18, 0x17	; 23
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <setBitDirection+0x7a>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <setBitDirection+0x76>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	87 bb       	out	0x17, r24	; 23
 26e:	08 95       	ret
 270:	22 23       	and	r18, r18
 272:	59 f0       	breq	.+22     	; 0x28a <setBitDirection+0xa0>
 274:	24 b3       	in	r18, 0x14	; 20
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <setBitDirection+0x96>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <setBitDirection+0x92>
 284:	82 2b       	or	r24, r18
 286:	84 bb       	out	0x14, r24	; 20
 288:	08 95       	ret
 28a:	24 b3       	in	r18, 0x14	; 20
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <setBitDirection+0xac>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <setBitDirection+0xa8>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	84 bb       	out	0x14, r24	; 20
 2a0:	08 95       	ret
 2a2:	22 23       	and	r18, r18
 2a4:	59 f0       	breq	.+22     	; 0x2bc <setBitDirection+0xd2>
 2a6:	21 b3       	in	r18, 0x11	; 17
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <setBitDirection+0xc8>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <setBitDirection+0xc4>
 2b6:	82 2b       	or	r24, r18
 2b8:	81 bb       	out	0x11, r24	; 17
 2ba:	08 95       	ret
 2bc:	21 b3       	in	r18, 0x11	; 17
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <setBitDirection+0xde>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <setBitDirection+0xda>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	81 bb       	out	0x11, r24	; 17
 2d2:	08 95       	ret

000002d4 <setBit>:
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	fc 01       	movw	r30, r24
 2d8:	e1 54       	subi	r30, 0x41	; 65
 2da:	f1 09       	sbc	r31, r1
 2dc:	e4 32       	cpi	r30, 0x24	; 36
 2de:	f1 05       	cpc	r31, r1
 2e0:	78 f5       	brcc	.+94     	; 0x340 <setBit+0x6c>
 2e2:	e2 5b       	subi	r30, 0xB2	; 178
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__tablejump2__>
 2ea:	2b b3       	in	r18, 0x1b	; 27
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <setBit+0x22>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <setBit+0x1e>
 2fa:	82 2b       	or	r24, r18
 2fc:	8b bb       	out	0x1b, r24	; 27
 2fe:	08 95       	ret
 300:	28 b3       	in	r18, 0x18	; 24
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <setBit+0x38>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <setBit+0x34>
 310:	82 2b       	or	r24, r18
 312:	88 bb       	out	0x18, r24	; 24
 314:	08 95       	ret
 316:	25 b3       	in	r18, 0x15	; 21
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <setBit+0x4e>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <setBit+0x4a>
 326:	82 2b       	or	r24, r18
 328:	85 bb       	out	0x15, r24	; 21
 32a:	08 95       	ret
 32c:	22 b3       	in	r18, 0x12	; 18
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <setBit+0x64>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <setBit+0x60>
 33c:	82 2b       	or	r24, r18
 33e:	82 bb       	out	0x12, r24	; 18
 340:	08 95       	ret

00000342 <writeHigh_4pins>:
 342:	62 95       	swap	r22
 344:	60 7f       	andi	r22, 0xF0	; 240
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	fc 01       	movw	r30, r24
 34a:	e1 54       	subi	r30, 0x41	; 65
 34c:	f1 09       	sbc	r31, r1
 34e:	e4 32       	cpi	r30, 0x24	; 36
 350:	f1 05       	cpc	r31, r1
 352:	f8 f4       	brcc	.+62     	; 0x392 <writeHigh_4pins+0x50>
 354:	ee 58       	subi	r30, 0x8E	; 142
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__tablejump2__>
 35c:	8b b3       	in	r24, 0x1b	; 27
 35e:	8f 70       	andi	r24, 0x0F	; 15
 360:	8b bb       	out	0x1b, r24	; 27
 362:	8b b3       	in	r24, 0x1b	; 27
 364:	68 2b       	or	r22, r24
 366:	6b bb       	out	0x1b, r22	; 27
 368:	08 95       	ret
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	88 bb       	out	0x18, r24	; 24
 370:	88 b3       	in	r24, 0x18	; 24
 372:	68 2b       	or	r22, r24
 374:	68 bb       	out	0x18, r22	; 24
 376:	08 95       	ret
 378:	85 b3       	in	r24, 0x15	; 21
 37a:	8f 70       	andi	r24, 0x0F	; 15
 37c:	85 bb       	out	0x15, r24	; 21
 37e:	85 b3       	in	r24, 0x15	; 21
 380:	68 2b       	or	r22, r24
 382:	65 bb       	out	0x15, r22	; 21
 384:	08 95       	ret
 386:	82 b3       	in	r24, 0x12	; 18
 388:	8f 70       	andi	r24, 0x0F	; 15
 38a:	82 bb       	out	0x12, r24	; 18
 38c:	82 b3       	in	r24, 0x12	; 18
 38e:	68 2b       	or	r22, r24
 390:	62 bb       	out	0x12, r22	; 18
 392:	08 95       	ret

00000394 <clearBit>:
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	e1 54       	subi	r30, 0x41	; 65
 39a:	f1 09       	sbc	r31, r1
 39c:	e4 32       	cpi	r30, 0x24	; 36
 39e:	f1 05       	cpc	r31, r1
 3a0:	98 f5       	brcc	.+102    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3a2:	ea 56       	subi	r30, 0x6A	; 106
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
 3a6:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__tablejump2__>
 3aa:	2b b3       	in	r18, 0x1b	; 27
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <clearBit+0x22>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <clearBit+0x1e>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	8b bb       	out	0x1b, r24	; 27
 3c0:	08 95       	ret
 3c2:	28 b3       	in	r18, 0x18	; 24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <clearBit+0x3a>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <clearBit+0x36>
 3d2:	80 95       	com	r24
 3d4:	82 23       	and	r24, r18
 3d6:	88 bb       	out	0x18, r24	; 24
 3d8:	08 95       	ret
 3da:	25 b3       	in	r18, 0x15	; 21
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <clearBit+0x52>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <clearBit+0x4e>
 3ea:	80 95       	com	r24
 3ec:	82 23       	and	r24, r18
 3ee:	85 bb       	out	0x15, r24	; 21
 3f0:	08 95       	ret
 3f2:	22 b3       	in	r18, 0x12	; 18
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <clearBit+0x6a>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <clearBit+0x66>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	82 bb       	out	0x12, r24	; 18
 408:	08 95       	ret

0000040a <toggelBit>:
}

void toggelBit(char port , int bitNumber)
{
	
	switch(port)
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	fc 01       	movw	r30, r24
 40e:	e1 54       	subi	r30, 0x41	; 65
 410:	f1 09       	sbc	r31, r1
 412:	e4 32       	cpi	r30, 0x24	; 36
 414:	f1 05       	cpc	r31, r1
 416:	78 f5       	brcc	.+94     	; 0x476 <toggelBit+0x6c>
 418:	e6 54       	subi	r30, 0x46	; 70
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__tablejump2__>
	{
		case 'A':
		case 'a':
			PORTA ^= (1<<bitNumber);
 420:	2b b3       	in	r18, 0x1b	; 27
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <toggelBit+0x22>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <toggelBit+0x1e>
 430:	82 27       	eor	r24, r18
 432:	8b bb       	out	0x1b, r24	; 27
		break;
 434:	08 95       	ret
		
		case 'B':
		case 'b':
			PORTB ^= (1<<bitNumber);
 436:	28 b3       	in	r18, 0x18	; 24
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <toggelBit+0x38>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <toggelBit+0x34>
 446:	82 27       	eor	r24, r18
 448:	88 bb       	out	0x18, r24	; 24
		break;
 44a:	08 95       	ret
		
		case 'C':
		case 'c':
			PORTC ^= (1<<bitNumber);
 44c:	25 b3       	in	r18, 0x15	; 21
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <toggelBit+0x4e>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <toggelBit+0x4a>
 45c:	82 27       	eor	r24, r18
 45e:	85 bb       	out	0x15, r24	; 21
		break; 
 460:	08 95       	ret
		
		case 'D':
		case 'd':
			PORTD ^= (1<<bitNumber);
 462:	22 b3       	in	r18, 0x12	; 18
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <toggelBit+0x64>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <toggelBit+0x60>
 472:	82 27       	eor	r24, r18
 474:	82 bb       	out	0x12, r24	; 18
 476:	08 95       	ret

00000478 <send_pulse>:
	}
	else
	{
		address = 0xC0 + column -1;
	}
	LCD_sendCommand(address);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	82 e4       	ldi	r24, 0x42	; 66
 47e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setBit>
 482:	8f e9       	ldi	r24, 0x9F	; 159
 484:	9f e0       	ldi	r25, 0x0F	; 15
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <send_pulse+0xe>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <send_pulse+0x14>
 48c:	00 00       	nop
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	82 e4       	ldi	r24, 0x42	; 66
 494:	0e 94 ca 01 	call	0x394	; 0x394 <clearBit>
 498:	8f e9       	ldi	r24, 0x9F	; 159
 49a:	9f e0       	ldi	r25, 0x0F	; 15
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <send_pulse+0x24>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <send_pulse+0x2a>
 4a2:	00 00       	nop
 4a4:	08 95       	ret

000004a6 <LCD_sendCommand>:
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
 4aa:	68 2f       	mov	r22, r24
 4ac:	62 95       	swap	r22
 4ae:	6f 70       	andi	r22, 0x0F	; 15
 4b0:	81 e4       	ldi	r24, 0x41	; 65
 4b2:	0e 94 a1 01 	call	0x342	; 0x342 <writeHigh_4pins>
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	82 e4       	ldi	r24, 0x42	; 66
 4bc:	0e 94 ca 01 	call	0x394	; 0x394 <clearBit>
 4c0:	0e 94 3c 02 	call	0x478	; 0x478 <send_pulse>
 4c4:	8f ec       	ldi	r24, 0xCF	; 207
 4c6:	97 e0       	ldi	r25, 0x07	; 7
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCD_sendCommand+0x22>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <LCD_sendCommand+0x28>
 4ce:	00 00       	nop
 4d0:	6c 2f       	mov	r22, r28
 4d2:	81 e4       	ldi	r24, 0x41	; 65
 4d4:	0e 94 a1 01 	call	0x342	; 0x342 <writeHigh_4pins>
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	82 e4       	ldi	r24, 0x42	; 66
 4de:	0e 94 ca 01 	call	0x394	; 0x394 <clearBit>
 4e2:	0e 94 3c 02 	call	0x478	; 0x478 <send_pulse>
 4e6:	8f ec       	ldi	r24, 0xCF	; 207
 4e8:	97 e0       	ldi	r25, 0x07	; 7
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_sendCommand+0x44>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_sendCommand+0x4a>
 4f0:	00 00       	nop
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <LCD_Initialization>:
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	81 ee       	ldi	r24, 0xE1	; 225
 4fa:	94 e0       	ldi	r25, 0x04	; 4
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <LCD_Initialization+0x6>
 504:	00 c0       	rjmp	.+0      	; 0x506 <LCD_Initialization+0x10>
 506:	00 00       	nop
 508:	41 e3       	ldi	r20, 0x31	; 49
 50a:	64 e0       	ldi	r22, 0x04	; 4
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	81 e4       	ldi	r24, 0x41	; 65
 510:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
 514:	41 e3       	ldi	r20, 0x31	; 49
 516:	65 e0       	ldi	r22, 0x05	; 5
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	81 e4       	ldi	r24, 0x41	; 65
 51c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
 520:	41 e3       	ldi	r20, 0x31	; 49
 522:	66 e0       	ldi	r22, 0x06	; 6
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	81 e4       	ldi	r24, 0x41	; 65
 528:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
 52c:	41 e3       	ldi	r20, 0x31	; 49
 52e:	67 e0       	ldi	r22, 0x07	; 7
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	81 e4       	ldi	r24, 0x41	; 65
 534:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
 538:	41 e3       	ldi	r20, 0x31	; 49
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	82 e4       	ldi	r24, 0x42	; 66
 540:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
 544:	41 e3       	ldi	r20, 0x31	; 49
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	82 e4       	ldi	r24, 0x42	; 66
 54c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_sendCommand>
 556:	8f e1       	ldi	r24, 0x1F	; 31
 558:	9e e4       	ldi	r25, 0x4E	; 78
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <LCD_Initialization+0x64>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <LCD_Initialization+0x6a>
 560:	00 00       	nop
 562:	88 e2       	ldi	r24, 0x28	; 40
 564:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_sendCommand>
 568:	8f ec       	ldi	r24, 0xCF	; 207
 56a:	97 e0       	ldi	r25, 0x07	; 7
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <LCD_Initialization+0x76>
 570:	00 c0       	rjmp	.+0      	; 0x572 <LCD_Initialization+0x7c>
 572:	00 00       	nop
 574:	8e e0       	ldi	r24, 0x0E	; 14
 576:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_sendCommand>
 57a:	8f ec       	ldi	r24, 0xCF	; 207
 57c:	97 e0       	ldi	r25, 0x07	; 7
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCD_Initialization+0x88>
 582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_Initialization+0x8e>
 584:	00 00       	nop
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_sendCommand>
 58c:	8f e1       	ldi	r24, 0x1F	; 31
 58e:	9e e4       	ldi	r25, 0x4E	; 78
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <LCD_Initialization+0x9a>
 594:	00 c0       	rjmp	.+0      	; 0x596 <LCD_Initialization+0xa0>
 596:	00 00       	nop
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_sendCommand>
 59e:	08 95       	ret

000005a0 <LCD_printCharacter>:
 5a0:	cf 93       	push	r28
 5a2:	c8 2f       	mov	r28, r24
 5a4:	68 2f       	mov	r22, r24
 5a6:	62 95       	swap	r22
 5a8:	6f 70       	andi	r22, 0x0F	; 15
 5aa:	81 e4       	ldi	r24, 0x41	; 65
 5ac:	0e 94 a1 01 	call	0x342	; 0x342 <writeHigh_4pins>
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	82 e4       	ldi	r24, 0x42	; 66
 5b6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setBit>
 5ba:	0e 94 3c 02 	call	0x478	; 0x478 <send_pulse>
 5be:	6c 2f       	mov	r22, r28
 5c0:	81 e4       	ldi	r24, 0x41	; 65
 5c2:	0e 94 a1 01 	call	0x342	; 0x342 <writeHigh_4pins>
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	82 e4       	ldi	r24, 0x42	; 66
 5cc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setBit>
 5d0:	0e 94 3c 02 	call	0x478	; 0x478 <send_pulse>
 5d4:	8f ec       	ldi	r24, 0xCF	; 207
 5d6:	97 e0       	ldi	r25, 0x07	; 7
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <LCD_printCharacter+0x38>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCD_printCharacter+0x3e>
 5de:	00 00       	nop
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <LCD_printString>:
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	ec 01       	movw	r28, r24
 5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <LCD_printString+0xe>
 5ec:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_printCharacter>
 5f0:	21 96       	adiw	r28, 0x01	; 1
 5f2:	88 81       	ld	r24, Y
 5f4:	81 11       	cpse	r24, r1
 5f6:	fa cf       	rjmp	.-12     	; 0x5ec <LCD_printString+0x8>
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <clearScreen>:
}
void clearScreen()
{
	LCD_sendCommand(0x01);
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 604:	8f e1       	ldi	r24, 0x1F	; 31
 606:	9e e4       	ldi	r25, 0x4E	; 78
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <clearScreen+0xa>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <clearScreen+0x10>
 60e:	00 00       	nop
 610:	08 95       	ret

00000612 <main>:
#include "DIO_Module.h"
#include "macros.h"
int main(void)
{
	unsigned short a,b,high, distance ;
	LCD_Initialization();
 612:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_Initialization>
	setBitDirection('D',7,'1');
 616:	41 e3       	ldi	r20, 0x31	; 49
 618:	67 e0       	ldi	r22, 0x07	; 7
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	84 e4       	ldi	r24, 0x44	; 68
 61e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
	setBitDirection('B',5,'1');
 622:	41 e3       	ldi	r20, 0x31	; 49
 624:	65 e0       	ldi	r22, 0x05	; 5
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	82 e4       	ldi	r24, 0x42	; 66
 62a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <setBitDirection>
	while(1)
	{
		setBit('D',7);
 62e:	67 e0       	ldi	r22, 0x07	; 7
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	84 e4       	ldi	r24, 0x44	; 68
 634:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <setBit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 638:	25 e8       	ldi	r18, 0x85	; 133
 63a:	2a 95       	dec	r18
 63c:	f1 f7       	brne	.-4      	; 0x63a <main+0x28>
 63e:	00 00       	nop
		_delay_us(50);
		clearBit('D',7);
 640:	67 e0       	ldi	r22, 0x07	; 7
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	84 e4       	ldi	r24, 0x44	; 68
 646:	0e 94 ca 01 	call	0x394	; 0x394 <clearBit>
		
		TCCR1A = 0;
 64a:	1f bc       	out	0x2f, r1	; 47
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 64c:	80 e2       	ldi	r24, 0x20	; 32
 64e:	88 bf       	out	0x38, r24	; 56

		TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
 650:	81 ec       	ldi	r24, 0xC1	; 193
 652:	8e bd       	out	0x2e, r24	; 46
		while ((TIFR&(1<<ICF1)) == 0);
 654:	08 b6       	in	r0, 0x38	; 56
 656:	05 fe       	sbrs	r0, 5
 658:	fd cf       	rjmp	.-6      	; 0x654 <main+0x42>
		a = ICR1;  		/* Take value of capture register */
 65a:	46 b5       	in	r20, 0x26	; 38
 65c:	57 b5       	in	r21, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
 65e:	88 b7       	in	r24, 0x38	; 56
 660:	80 62       	ori	r24, 0x20	; 32
 662:	88 bf       	out	0x38, r24	; 56
	
		TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 664:	81 e8       	ldi	r24, 0x81	; 129
 666:	8e bd       	out	0x2e, r24	; 46
		while ((TIFR&(1<<ICF1)) == 0);
 668:	08 b6       	in	r0, 0x38	; 56
 66a:	05 fe       	sbrs	r0, 5
 66c:	fd cf       	rjmp	.-6      	; 0x668 <main+0x56>
		b = ICR1;  		/* Take value of capture register */
 66e:	26 b5       	in	r18, 0x26	; 38
 670:	37 b5       	in	r19, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
 672:	88 b7       	in	r24, 0x38	; 56
 674:	80 62       	ori	r24, 0x20	; 32
 676:	88 bf       	out	0x38, r24	; 56
	
		TIFR = (1<<ICF1);  	/* Clear ICF flag */
 678:	80 e2       	ldi	r24, 0x20	; 32
 67a:	88 bf       	out	0x38, r24	; 56

		TCCR1B = 0;
 67c:	1e bc       	out	0x2e, r1	; 46
		
		if (a < b)
 67e:	42 17       	cp	r20, r18
 680:	53 07       	cpc	r21, r19
 682:	08 f0       	brcs	.+2      	; 0x686 <main+0x74>
 684:	43 c0       	rjmp	.+134    	; 0x70c <main+0xfa>
		{
			high=b-a;
 686:	24 1b       	sub	r18, r20
 688:	35 0b       	sbc	r19, r21
			
			distance = ((high*34600)/(F_CPU*2)) ;
 68a:	a8 e2       	ldi	r26, 0x28	; 40
 68c:	b7 e8       	ldi	r27, 0x87	; 135
 68e:	0e 94 bd 03 	call	0x77a	; 0x77a <__umulhisi3>
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	34 e2       	ldi	r19, 0x24	; 36
 696:	44 ef       	ldi	r20, 0xF4	; 244
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	0e 94 95 03 	call	0x72a	; 0x72a <__udivmodsi4>
 69e:	69 01       	movw	r12, r18
 6a0:	7a 01       	movw	r14, r20
			
			if (distance < 80)
 6a2:	20 35       	cpi	r18, 0x50	; 80
 6a4:	31 05       	cpc	r19, r1
 6a6:	60 f5       	brcc	.+88     	; 0x700 <main+0xee>
			{
				clearScreen();
 6a8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <clearScreen>
				
				LCD_printString("distance = ");
 6ac:	80 e6       	ldi	r24, 0x60	; 96
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_printString>
				LCD_printCharacter((distance/10) + 48 );
 6b4:	96 01       	movw	r18, r12
 6b6:	ad ec       	ldi	r26, 0xCD	; 205
 6b8:	bc ec       	ldi	r27, 0xCC	; 204
 6ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__umulhisi3>
 6be:	ec 01       	movw	r28, r24
 6c0:	d6 95       	lsr	r29
 6c2:	c7 95       	ror	r28
 6c4:	d6 95       	lsr	r29
 6c6:	c7 95       	ror	r28
 6c8:	d6 95       	lsr	r29
 6ca:	c7 95       	ror	r28
 6cc:	8c 2f       	mov	r24, r28
 6ce:	80 5d       	subi	r24, 0xD0	; 208
 6d0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_printCharacter>
				LCD_printCharacter((distance%10) + 48 );
 6d4:	ce 01       	movw	r24, r28
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	cc 0f       	add	r28, r28
 6dc:	dd 1f       	adc	r29, r29
 6de:	cc 0f       	add	r28, r28
 6e0:	dd 1f       	adc	r29, r29
 6e2:	cc 0f       	add	r28, r28
 6e4:	dd 1f       	adc	r29, r29
 6e6:	c8 0f       	add	r28, r24
 6e8:	d9 1f       	adc	r29, r25
 6ea:	c6 01       	movw	r24, r12
 6ec:	8c 1b       	sub	r24, r28
 6ee:	9d 0b       	sbc	r25, r29
 6f0:	80 5d       	subi	r24, 0xD0	; 208
 6f2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LCD_printCharacter>
				LCD_printString("CM");
 6f6:	8c e6       	ldi	r24, 0x6C	; 108
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_printString>
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <main+0xfa>
			}
			else
			{
				clearScreen();
 700:	0e 94 ff 02 	call	0x5fe	; 0x5fe <clearScreen>
				LCD_printString("no object ");
 704:	8f e6       	ldi	r24, 0x6F	; 111
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_printString>
			}
			
		}
		 	toggelBit('B',5);
 70c:	65 e0       	ldi	r22, 0x05	; 5
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	82 e4       	ldi	r24, 0x42	; 66
 712:	0e 94 05 02 	call	0x40a	; 0x40a <toggelBit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 716:	9f ef       	ldi	r25, 0xFF	; 255
 718:	29 e6       	ldi	r18, 0x69	; 105
 71a:	88 e1       	ldi	r24, 0x18	; 24
 71c:	91 50       	subi	r25, 0x01	; 1
 71e:	20 40       	sbci	r18, 0x00	; 0
 720:	80 40       	sbci	r24, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x10a>
 724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x114>
 726:	00 00       	nop
 728:	82 cf       	rjmp	.-252    	; 0x62e <main+0x1c>

0000072a <__udivmodsi4>:
 72a:	a1 e2       	ldi	r26, 0x21	; 33
 72c:	1a 2e       	mov	r1, r26
 72e:	aa 1b       	sub	r26, r26
 730:	bb 1b       	sub	r27, r27
 732:	fd 01       	movw	r30, r26
 734:	0d c0       	rjmp	.+26     	; 0x750 <__udivmodsi4_ep>

00000736 <__udivmodsi4_loop>:
 736:	aa 1f       	adc	r26, r26
 738:	bb 1f       	adc	r27, r27
 73a:	ee 1f       	adc	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	a2 17       	cp	r26, r18
 740:	b3 07       	cpc	r27, r19
 742:	e4 07       	cpc	r30, r20
 744:	f5 07       	cpc	r31, r21
 746:	20 f0       	brcs	.+8      	; 0x750 <__udivmodsi4_ep>
 748:	a2 1b       	sub	r26, r18
 74a:	b3 0b       	sbc	r27, r19
 74c:	e4 0b       	sbc	r30, r20
 74e:	f5 0b       	sbc	r31, r21

00000750 <__udivmodsi4_ep>:
 750:	66 1f       	adc	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a 94       	dec	r1
 75a:	69 f7       	brne	.-38     	; 0x736 <__udivmodsi4_loop>
 75c:	60 95       	com	r22
 75e:	70 95       	com	r23
 760:	80 95       	com	r24
 762:	90 95       	com	r25
 764:	9b 01       	movw	r18, r22
 766:	ac 01       	movw	r20, r24
 768:	bd 01       	movw	r22, r26
 76a:	cf 01       	movw	r24, r30
 76c:	08 95       	ret

0000076e <__tablejump2__>:
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	05 90       	lpm	r0, Z+
 774:	f4 91       	lpm	r31, Z
 776:	e0 2d       	mov	r30, r0
 778:	09 94       	ijmp

0000077a <__umulhisi3>:
 77a:	a2 9f       	mul	r26, r18
 77c:	b0 01       	movw	r22, r0
 77e:	b3 9f       	mul	r27, r19
 780:	c0 01       	movw	r24, r0
 782:	a3 9f       	mul	r26, r19
 784:	70 0d       	add	r23, r0
 786:	81 1d       	adc	r24, r1
 788:	11 24       	eor	r1, r1
 78a:	91 1d       	adc	r25, r1
 78c:	b2 9f       	mul	r27, r18
 78e:	70 0d       	add	r23, r0
 790:	81 1d       	adc	r24, r1
 792:	11 24       	eor	r1, r1
 794:	91 1d       	adc	r25, r1
 796:	08 95       	ret

00000798 <_exit>:
 798:	f8 94       	cli

0000079a <__stop_program>:
 79a:	ff cf       	rjmp	.-2      	; 0x79a <__stop_program>
